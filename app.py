import streamlit as st
import pandas as pd
import datetime
import plotly.graph_objects as go
import plotly.express as px
import requests
import random
import base64
from PIL import Image
from io import BytesIO
import os
import json
import time # For simulating loading

# --- Streamlit È†ÅÈù¢Ë®≠ÂÆö ---
st.set_page_config(
    page_title="ÂÅ•Â∫∑Êó•Ë®ò Health Diary", # È†ÅÁ±§Ê®ôÈ°å
    page_icon="üíñ", # È†ÅÁ±§ÂúñÁ§∫
    layout="centered", # È†ÅÈù¢‰ΩàÂ±ÄÁÇ∫Â±Ö‰∏≠
    initial_sidebar_state="collapsed" # ÂàùÂßãÂÅ¥ÈÇäÊ¨ÑÁãÄÊÖãÁÇ∫Êî∂Ëµ∑
)

# --- Ëá™Ë®Ç CSS Ê®£Âºè ---
# This CSS is carefully crafted to give the Streamlit app a friendly, cute, and responsive look.
# It uses soft pink and deeper pink tones, rounded corners, and subtle shadows for a modern feel.
st.markdown("""
    <style>
        /* Define a global anchor at the very top of the app, before any content */
        html {
            scroll-behavior: smooth; /* Smooth scrolling for anchors */
        }
        #app_top_anchor {
            position: absolute;
            top: 0;
            left: 0;
            visibility: hidden;
        }

        /* Â∞áËÉåÊôØËâ≤ÊáâÁî®Âà∞ Streamlit ÊáâÁî®Á®ãÂºèÁöÑ‰∏ªÂÆπÂô® */
        .stApp {
            background-color: #fce4ec; /* Ê∑∫Á≤âËâ≤‰ΩúÁÇ∫‰∏ªËÉåÊôØ */
            color: #333333; /* È†êË®≠ÊñáÂ≠óÈ°èËâ≤ */
        }
        .main {
            padding: 20px;
            border-radius: 10px;
        }

        /* Ë™øÊï¥Ê®ôÈ°åÂíåÊñáÂ≠óÈ°èËâ≤ */
        h1, h2, h3, h4, h5, h6 {
            color: #d81b60; /* Ê∑±Á≤âËâ≤Ê®ôÈ°å */
            font-family: 'Comic Sans MS', 'Arial Rounded MT Bold', sans-serif; /* ÂòóË©¶Âç°ÈÄöÂ≠óÈ´î */
        }
        p, li, div {
            color: #4a4a4a; /* Ê∑±ÁÅ∞Ëâ≤ÊñáÂ≠ó */
            font-family: 'Comic Sans MS', 'Arial Rounded MT Bold', sans-serif; /* ÊáâÁî®Âç°ÈÄöÂ≠óÈ´îÂà∞ÊôÆÈÄöÊñáÂ≠ó */
        }

        /* ÊåâÈàïÊ®£Âºè */
        .stButton>button {
            background-color: #ffb6c1; /* Á≤âËâ≤ÊåâÈàï */
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 8px;
            border: none;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #ff8b9b; /* ÊªëÈº†Êá∏ÂÅúÊôÇÊõ¥Ê∑±ÁöÑÁ≤âËâ≤ */
            box-shadow: 0 6px 12px 0 rgba(0,0,0,0.2);
            transform: translateY(-2px);
        }

        /* Ëº∏ÂÖ•Ê°ÜÂíåÈÅ∏ÊìáÊ°ÜÊ®£Âºè */
        .stTextInput>div>div>input, .stSelectbox>div>div>select, .stDateInput>div>div>input {
            border-radius: 8px;
            border: 1px solid #ffccd5; /* Á≤âËâ≤ÈÇäÊ°Ü */
            padding: 8px;
            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.05);
            font-family: 'Comic Sans MS', 'Arial Rounded MT Bold', sans-serif; /* ÊáâÁî®Âç°ÈÄöÂ≠óÈ´î */
        }
        /* Markdown ÊñáÂ≠óÊ®£Âºè */
        .stMarkdown {
            font-family: 'Comic Sans MS', 'Arial Rounded MT Bold', sans-serif;
            color: #5d4037; /* Ê£ïËâ≤Á≥ªÊñáÂ≠óÔºåÊõ¥Ê∫´Êöñ */
        }
        /* Êï∏ÊìöÊ°ÜÊ®£Âºè */
        .dataframe {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.1);
        }
        /* Ë®äÊÅØÊ°ÜÊ®£Âºè (success, warning, error) */
        .stAlert {
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
        }
        .stAlert.success {
            background-color: #e8f5e9; /* Ê∑∫Á∂†Ëâ≤ÊàêÂäüÊèêÁ§∫ */
            color: #2e7d32;
        }
        .stAlert.warning {
            background-color: #fffde7; /* Ê∑∫ÈªÉËâ≤Ë≠¶ÂëäÊèêÁ§∫ */
            color: #fbc02d;
        }
        .stAlert.error {
            background-color: #ffebee; /* Ê∑∫Á¥ÖËâ≤ÈåØË™§ÊèêÁ§∫ */
            color: #c62828;
        }
        /* Plotly ÂúñË°®ÂÆπÂô®ÁöÑËÉåÊôØÂíåÂúìËßí */
        .stPlotlyChart {
            background-color: #ffffff; /* ÂúñË°®ËÉåÊôØ */
            border-radius: 15px; /* Êõ¥Â§ßÁöÑÂúìËßí */
            padding: 15px; /* ÂÖßÈÉ®ÈñìË∑ù */
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.15); /* Êõ¥ÊòéÈ°ØÁöÑÈô∞ÂΩ± */
            margin-bottom: 20px;
        }
        /* LOGO ÂúñÁâáÊ®£ÂºèÔºåÁî®ÊñºËÆìÂúñÁâáÊõ¥ËûçÂÖ•Ê®ôÈ°å */
        .logo-img {
            vertical-align: middle; /* ÂûÇÁõ¥Â±Ö‰∏≠Â∞çÈΩäÊñáÂ≠ó */
            margin-right: 15px; /* ËàáÊñáÂ≠óÁöÑÈñìË∑ù */
            border-radius: 50%; /* Â¶ÇÊûúÊòØÊ≠£ÊñπÂΩ¢ÂúñÁâáÔºåÂèØ‰ª•ËÆäÊàêÂúìÂΩ¢ */
        }
        /* È†ÅÂ∞æÂúñÁâáÊ®£Âºè */
        .footer-image-container {
            text-align: center; /* ËÆìÈ†ÅÂ∞æÂúñÁâáÂ±Ö‰∏≠ */
            margin-top: 30px; /* Ëàá‰∏äÊñπÂÖßÂÆπÁöÑÈñìË∑ù */
            padding-top: 20px;
            border-top: 1px solid #ffccd5;
        }

        /* Â∞éË¶Ω Radio Ê®£Âºè */
        div.stRadio { /* Targeting the radio group container */
            display: flex; /* Use flexbox */
            justify-content: center; /* Center the buttons horizontally */
            flex-wrap: wrap; /* Allow buttons to wrap to the next line on smaller screens */
            margin-bottom: 20px; /* Space below the navigation */
            gap: 10px; /* Space between the radio buttons */
        }

        div.stRadio > label { /* Targeting each radio button label */
            display: flex; /* Use flexbox for icon and text alignment */
            align-items: center; /* Vertically align items */
            background-color: #ffccd2; /* Lighter pink background */
            padding: 8px 15px;
            border-radius: 20px; /* More rounded corners for a cute, pill-like look */
            border: 1px solid #ff80ab; /* Thin border */
            cursor: pointer;
            transition: all 0.3s ease; /* Smooth transition effects */
            font-weight: bold;
            color: #d81b60; /* Text color */
            white-space: nowrap; /* Prevent text wrapping inside the button */
        }

        div.stRadio > label:hover {
            background-color: #ffafbd; /* Darker pink on hover */
            border-color: #e91e63;
            color: #e91e63;
            transform: translateY(-2px); /* Slight lift effect on hover */
        }

        div.stRadio > label.css-1ccx87l.e16fv1bt2:has(input:checked) { /* Targets the checked state */
            background-color: #e91e63; /* Background color when selected */
            color: white; /* Text color when selected */
            border-color: #e91e63;
            box-shadow: 0 4px 8px rgba(233, 30, 99, 0.3); /* Add shadow when selected */
        }

        div.stRadio > label > div[data-testid="stRadio-0-input"] {
            display: none; /* Hide the actual radio circle */
        }

        div.stRadio > label > div > p {
            margin: 0; /* Remove default paragraph margin */
            padding-left: 5px; /* Space between icon and text */
            color: inherit; /* Ensure text color inherits from parent label */
        }
        /* Hide the "Â∞éË¶Ω" label for the radio buttons */
        div.stRadio > label[data-testid="stMarkdownContainer"]:first-child {
           
        }


        /* AI Food Recognition result card style */
        .food-recognition-card {
            background-color: #fff0f5; /* Ê∑∫Á≤âËâ≤ËÉåÊôØ */
            border-left: 5px solid #ff69b4; /* Á≤âËâ≤Â∑¶ÈÇäÊ°Ü */
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .food-recognition-card h5 {
            color: #d81b60;
            margin-top: 0;
            margin-bottom: 5px;
        }
        .food-recognition-card p {
            margin: 0;
            color: #5d4037;
        }
        /* Style for scroll to top button (cute pill shape) */
        .scroll-to-top-btn {
            display: inline-flex; /* Use flex for icon and text alignment */
            align-items: center; /* Vertically align items */
            justify-content: center; /* Center content horizontally */
            background-color: #ffb6c1; /* Light pink background */
            color: white; /* White text/emoji */
            padding: 10px 20px; /* Padding for button feel */
            border-radius: 30px; /* More rounded, pill-like */
            text-decoration: none; /* Removed underline */
            font-weight: bold;
            font-size: 1.1em; /* Slightly larger font for prominence */
            margin-top: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15); /* More prominent shadow */
            transition: all 0.3s ease; /* Smooth transitions */
            cursor: pointer;
        }
        .scroll-to-top-btn:hover {
            background-color: #ff8b9b; /* Darker pink on hover */
            box-shadow: 0 6px 12px rgba(0,0,0,0.25); /* More prominent shadow on hover */
            transform: translateY(-3px); /* Lift effect on hover */
            color: white; /* Ensure text remains white on hover */
        }
        /* AI Recognition Loading Animation (Spinner) */
        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .ai-loading-spinner {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #ff69b4; /* Pink */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: rotate 1s linear infinite;
            margin: 10px auto; /* Center the spinner */
        }
        /* AI Suggestion Box */
        .ai-suggestion-box {
            background-color: #ffe0f0; /* Very light pink */
            border: 2px dashed #ff8b9b; /* Dashed pink border */
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            text-align: center;
            font-weight: bold;
            color: #d81b60;
            font-size: 1.1em;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .ai-suggestion-box .emoji-large {
            font-size: 1.8em;
            vertical-align: middle;
            margin-right: 10px;
        }
        /* New styles for AI recognition section for cute design */
        .stFileUploader {
            border: 2px dashed #ffccd5; /* Lighter pink dashed border */
            border-radius: 12px; /* Rounded corners for uploader */
            padding: 20px;
            background-color: #fffafa; /* Slightly off-white background */
            margin-bottom: 20px;
        }
        .ai-button {
            background-image: linear-gradient(to right, #ff9a9e 0%, #fad0c4 99%, #fad0c4 100%); /* Gradient button */
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 25px; /* Pill shape */
            font-weight: bold;
            font-size: 1.1em;
            letter-spacing: 1px;
            box-shadow: 0 6px 12px rgba(255,154,158,0.4);
            transition: all 0.3s ease;
            cursor: pointer;
            margin-top: 15px;
            display: block; /* Make button full width */
            width: fit-content; /* Adjust width to content */
            margin-left: auto; /* Center the button */
            margin-right: auto; /* Center the button */
        }
        .ai-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(255,154,158,0.6);
            color: white; /* Ensure text color remains white on hover */
        }
        .ai-button:active {
            transform: translateY(0);
            box-shadow: 0 4px 8px rgba(255,154,158,0.3);
        }
        /* Style for the "Á¢∫Ë™ç‰∏¶Êñ∞Â¢ûÂà∞ÊàëÁöÑÈ£üÁâ©Ë≥áÊñôÂ∫´" button */
        /* Note: Streamlit's internal styling might override specific custom classes for form buttons,
           so targeting kind="primary" is generally more effective for form submit buttons. */
        .stForm button[kind="primary"] { 
            background-image: linear-gradient(to right, #84fab0 0%, #8fd3f4 100%); /* Green-blue gradient for success */
            border: none;
            color: white;
            padding: 12px 25px;
            border-radius: 25px; /* Pill shape */
            font-weight: bold;
            font-size: 1.1em;
            letter-spacing: 1px;
            box-shadow: 0 6px 12px rgba(132,250,176,0.4);
            transition: all 0.3s ease;
            cursor: pointer;
            margin-top: 15px;
        }
        .stForm button[kind="primary"]:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(132,250,176,0.6);
            color: white;
        }
        .stForm button[kind="primary"]:active {
            transform: translateY(0);
            box_shadow: 0 4px 8px rgba(132,250,176,0.3);
        }

        /* New styles for food item chips */
        .food-chips-container {
            display: flex;
            flex-wrap: wrap; /* Allow chips to wrap to the next line */
            gap: 8px; /* Space between chips */
            margin-top: 10px;
            margin-bottom: 10px;
            padding: 10px;
            border: 1px dashed #ffccd5; /* Light pink dashed border */
            border-radius: 10px;
            background-color: #fffafa; /* Light background for the container */
            min-height: 40px; /* Ensure some height even if empty */
            align-items: center; /* Center items vertically */
        }
        .food-chip {
            background-color: #ffeadb; /* Lighter peach for chips */
            color: #d81b60; /* Deep pink text */
            padding: 6px 12px;
            border-radius: 20px; /* Pill shape for chips */
            font-size: 0.9em;
            font-weight: bold;
            white-space: nowrap; /* Prevent text wrapping inside chip */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }
        .food-chip:hover {
            transform: translateY(-1px); /* Slight lift on hover */
        }
        /* Styles for the "clear meal" buttons in add record page */
        .clear-meal-button {
            background-color: #f48fb1; /* Medium pink */
            color: white;
            border-radius: 8px;
            padding: 5px 10px;
            font-size: 0.9em;
            margin-top: 10px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
            width: fit-content; /* Make button fit content */
            display: block; /* Ensure it's a block element */
            margin-left: auto; /* Push to right */
            margin-right: auto; /* Push to left, effectively centering for small buttons */
        }
        .clear-meal-button:hover {
            background-color: #e91e63; /* Darker pink on hover */
        }
        /* Adjust st.info for compact meal display */
        .stInfo > div {
            padding: 10px;
        }
        /* Styles for the Assistant Page */
        .assistant-plan-card {
            background-color: #fcf8f2; /* Creamy background */
            border: 1px solid #ffe0b2; /* Light orange border */
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        }
        .assistant-plan-card h5 {
            color: #ff9800; /* Orange title */
            margin-top: 0;
            margin-bottom: 10px;
        }
        .assistant-plan-card ul {
            list-style-type: none; /* Remove bullet points */
            padding-left: 0;
        }
        .assistant-plan-card ul li {
            margin-bottom: 5px;
            color: #4e342e; /* Dark brown text */
        }
        .assistant-plan-card strong {
            color: #d81b60; /* Deep pink for emphasis */
        }
        .plan-header {
            font-size: 1.3em;
            color: #d81b60;
            margin-top: 10px;
            margin-bottom: 10px;
            font-weight: bold;
        }
        .day-header {
            font-size: 1.1em;
            color: #ff8a65; /* Salmon pink for day headers */
            margin-top: 8px;
            margin-bottom: 5px;
            font-weight: bold;
            border-bottom: 1px dashed #ffccbc;
            padding-bottom: 3px;
        }
        /* Styles for Diet Plan Cards within the Assistant Page */
        .diet-plan-card {
            background-color: #fffafa; /* Light background for the card */
            border: 1px solid #ffccd2; /* Light pink border */
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        }
        .diet-plan-card h4 {
            color: #d81b60; /* Deep pink for card titles */
            margin-top: 0;
            margin-bottom: 10px;
        }
        .diet-plan-card .stExpander { /* Styling for expanders inside the diet plan card */
            border: none; /* Remove default expander border */
            box-shadow: none; /* Remove default expander shadow */
            margin-bottom: 5px;
        }
        .diet-plan-card .streamlit-expanderHeader {
            background-color: #ffeadb; /* Lighter peach for expander header */
            color: #d81b60;
            border-radius: 8px;
            padding: 8px 12px;
            font-weight: bold;
            border: 1px solid #ffccd2;
            transition: background-color 0.3s ease;
        }
        .diet-plan-card .streamlit-expanderHeader:hover {
            background-color: #ffc2b4; /* Slightly darker peach on hover */
        }
        .diet-plan-card .streamlit-expanderContent {
            background-color: #fff0f5; /* Light pink for expander content */
            border-left: 3px solid #ff80ab; /* Pink left border for content */
            padding: 10px;
            border-radius: 0 0 8px 8px;
            margin-top: -5px;
        }
        .diet-plan-card p, .diet-plan-card li {
            color: #5d4037; /* Darker text for content */
            line-height: 1.6;
        }
    </style>
""", unsafe_allow_html=True)

# Define a global anchor at the very top of the application for "scroll to top" functionality
st.markdown("<a name='app_top'></a>", unsafe_allow_html=True)

# --- ÂÆöÁæ©Âç°ÈÄöÈ¢®Ê†ºÈ°èËâ≤Ë™øËâ≤Áõ§ ---
# ÂèØÊÑõÁ≤âËâ≤Á≥ªÂíåÈ¶¨Âç°ÈæçËâ≤
CUTE_COLORS = [
    '#ffb6c1', # Light Pink
    '#ffdbcd', # Peach Puff
    '#ffe4e1', # Misty Rose
    '#add8e6', # Light Blue
    '#b0e0e6', # Powder Blue
    '#e6e6fa', # Lavender
    '#f0e68c', # Khaki (light yellow)
    '#98fb98', # Pale Green
    '#dda0dd', # Plum (light)
    '#ffacd9'  # Hot Pink (lighter)
]

# --- ÂúñÁâáËôïÁêÜ ---
@st.cache_data
def get_base64_image(image_path):
    """
    Â∞áÂúñÁâáÊ™îÊ°àËΩâÊèõÁÇ∫ Base64 Á∑®Á¢ºÂ≠ó‰∏≤ÔºåÁî®ÊñºÂú® Streamlit ‰∏≠ÂµåÂÖ•ÂúñÁâá„ÄÇ
    ÂèÉÊï∏:
        image_path (str): ÂúñÁâáÊ™îÊ°àÁöÑË∑ØÂæë„ÄÇ
    ÂõûÂÇ≥:
        str: Base64 Á∑®Á¢ºÁöÑÂúñÁâáÂ≠ó‰∏≤ÔºåÂ¶ÇÊûúÊ™îÊ°àÊú™ÊâæÂà∞ÊàñÁôºÁîüÈåØË™§ÂâáÂõûÂÇ≥ None„ÄÇ
    """
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode()
    except FileNotFoundError:
        # Â∞áÈåØË™§Ë®äÊÅØËº∏Âá∫Âà∞ÊéßÂà∂Âè∞ÔºåËÄå‰∏çÊòØÁõ¥Êé•È°ØÁ§∫Âú®ÊáâÁî®Á®ãÂºè‰ªãÈù¢‰∏ä
        print(f"ÈåØË™§ÔºöÂúñÁâáÊ™îÊ°àÊú™ÊâæÂà∞: {image_path}ÔºåË´ãÁ¢∫Ë™çÊ™îÊ°àÊòØÂê¶Â≠òÂú®ÊñºÁõ∏ÂêåÁõÆÈåÑ‰∏ã„ÄÇ")
        return None
    except Exception as e:
        print(f"ÈåØË™§ÔºöËºâÂÖ•ÂúñÁâá {image_path} ÊôÇÁôºÁîüÈåØË™§: {e}")
        return None

# ËºâÂÖ• LOGO ÂíåÈ†ÅÂ∞æÊèíÂúñ
logo_base64 = get_base64_image("vivi.png")
footer_image_base64 = get_base64_image("S__13418505.jpg")

# --- Ë≥áÊñôËºâÂÖ•ËàáÂÑ≤Â≠ò ---
DATA_FILE = 'health_data.csv' # Áµ±‰∏Ä‰ΩøÁî® health_data.csv

def load_data():
    """
    Âæû CSV Êñá‰ª∂ËºâÂÖ•ÂÅ•Â∫∑Á¥ÄÈåÑÊï∏Êìö„ÄÇ
    ËôïÁêÜÊñá‰ª∂‰∏çÂ≠òÂú®ÊàñÁÇ∫Á©∫ÁöÑÊÉÖÊ≥ÅÔºå‰∏¶Á¢∫‰øùÊó•ÊúüÂàóË¢´Ê≠£Á¢∫Ëß£Êûê„ÄÇ
    ÂõûÂÇ≥:
        pd.DataFrame: ËºâÂÖ•ÁöÑÂÅ•Â∫∑Á¥ÄÈåÑ DataFrame„ÄÇ
    """
    # ÂÆöÁæ©ÊâÄÊúâÈ†êÊúüÁöÑÂàóÂêçÔºåÁ¢∫‰øùÈ†ÜÂ∫èÂíå‰∏ÄËá¥ÊÄß
    columns = [
        'Êó•Êúü', 'È´îÈáç(kg)', 'ÁõÆÊ®ôÈ´îÈáç(kg)', 'Ë∫´È´ò(ÂÖ¨ÂàÜ)', 'ÊÄßÂà•',
        'BMI', 'È´îËÑÇËÇ™Áéá', 'Á∏ΩÊîùÂèñÁÜ±Èáè', 'ÈÅãÂãïÈ°ûÂûã', 'ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)',
        'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè', 'Â§©Ê∞£ÂüéÂ∏Ç', 'Â§©Ê∞£Ë™™Êòé', 'Ê∞£Ê∫´', 'ÂÅ•Â∫∑Âª∫Ë≠∞', 'Á∏ΩÊ∑®ÁÜ±Èáè',
        'È§êÈªûÂÖßÂÆπ'
    ]
    
    if os.path.exists(DATA_FILE) and os.path.getsize(DATA_FILE) > 0:
        try:
            # ÂòóË©¶ËÆÄÂèñ CSVÔºåÁõ¥Êé•Ëß£ÊûêÊó•ÊúüÁÇ∫ datetime.date Áâ©‰ª∂
            df = pd.read_csv(DATA_FILE, parse_dates=['Êó•Êúü'], date_format='%Y-%m-%d')
            df['Êó•Êúü'] = df['Êó•Êúü'].dt.date # Á¢∫‰øùÊòØ date Áâ©‰ª∂
            
            # Á¢∫‰øùËÆÄÂèñÁöÑ DataFrame ÂåÖÂê´ÊâÄÊúâÈ†êÊúüÁöÑÊ¨Ñ‰ΩçÔºåÂ¶ÇÊûúÁº∫Â∞ëÂâáË£úÈΩä
            for col in columns:
                if col not in df.columns:
                    df[col] = None 
            
            # Á¢∫‰øùÈóúÈçµÊï∏ÂÄºÂàóÁÇ∫Êï∏Â≠óÈ°ûÂûãÔºåÂ∞áÈùûÊï∏Â≠óÂÄºËΩâÊèõÁÇ∫ NaNÔºåÁÑ∂ÂæåÂ°´ÂÖÖÁÇ∫ 0
            numeric_cols = [
                'È´îÈáç(kg)', 'ÁõÆÊ®ôÈ´îÈáç(kg)', 'Ë∫´È´ò(ÂÖ¨ÂàÜ)', 'BMI', 'È´îËÑÇËÇ™Áéá',
                'Á∏ΩÊîùÂèñÁÜ±Èáè', 'ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)', 'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè', 'Ê∞£Ê∫´', 'Á∏ΩÊ∑®ÁÜ±Èáè'
            ]
            for col in numeric_cols:
                if col in df.columns:
                    # ‰ΩøÁî® errors='coerce' Â∞áÁÑ°ÊïàËß£ÊûêÁöÑÊï∏ÊìöËΩâÁÇ∫ NaNÔºåÁÑ∂ÂæåÂ°´ÂÖÖ 0
                    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0) 

            # ÈáçÊñ∞ÊéíÂ∫èÂàóÔºåÁ¢∫‰øùÊñ∞Á¥ÄÈåÑÂíåËàäÁ¥ÄÈåÑÁöÑÂàóÈ†ÜÂ∫è‰∏ÄËá¥ÔºåÈÅøÂÖç pd.concat Â†±ÈåØ
            df = df[columns]
            return df
        except pd.errors.EmptyDataError:
            st.warning("Ê≠∑Âè≤Á¥ÄÈåÑÊ™îÊ°àÂ≠òÂú®‰ΩÜÂÖßÂÆπÁÇ∫Á©∫ÔºåÂ∞áÂâµÂª∫Êñ∞ÁöÑÁ¥ÄÈåÑË°®„ÄÇ")
            return pd.DataFrame(columns=columns)
        except Exception as e:
            st.error(f"ËÆÄÂèñÊ≠∑Âè≤Á¥ÄÈåÑÊôÇÁôºÁîüÈåØË™§: {e}„ÄÇË´ãÊ™¢Êü• '{DATA_FILE}' Ê™îÊ°àÁöÑÊó•ÊúüÊ†ºÂºèÊàñÂÖßÂÆπ„ÄÇÂ∞áÂâµÂª∫Êñ∞ÁöÑÁ¥ÄÈåÑË°®„ÄÇ")
            return pd.DataFrame(columns=columns)
    else:
        st.info("Ê≠∑Âè≤Á¥ÄÈåÑÊ™îÊ°àÊú™ÊâæÂà∞ÊàñÁÇ∫Á©∫ÔºåÂ∞áÂâµÂª∫Êñ∞ÁöÑÁ¥ÄÈåÑË°®„ÄÇ")
        return pd.DataFrame(columns=columns)

# ËºâÂÖ•Êï∏ÊìöÂà∞ Session State
if 'df_history' not in st.session_state:
    st.session_state.df_history = load_data()

def save_data(df):
    """
    Â∞á DataFrame ÂÑ≤Â≠òÂà∞ CSV Êñá‰ª∂„ÄÇ
    ÂèÉÊï∏:
        df (pd.DataFrame): Ë¶ÅÂÑ≤Â≠òÁöÑ DataFrame„ÄÇ
    """
    try:
        # Âú®ÂÑ≤Â≠òÂâçÔºåÁ¢∫‰øùÊó•ÊúüÂàóÊòØÂ≠ó‰∏≤Ê†ºÂºèÔºå‰ª•‰æø CSV Ê≠£Â∏∏ÂÑ≤Â≠ò
        df_to_save = df.copy() # ÈÅøÂÖç‰øÆÊîπÂéüÂßã DataFrame
        df_to_save['Êó•Êúü'] = df_to_save['Êó•Êúü'].apply(lambda x: x.strftime('%Y-%m-%d') if isinstance(x, (datetime.date, datetime.datetime)) else x)
        df_to_save.to_csv(DATA_FILE, index=False)
    except Exception as e:
        st.error(f"ÂÑ≤Â≠òÊ≠∑Âè≤Á¥ÄÈåÑÊôÇÁôºÁîüÈåØË™§: {e}")

# --- È£üÁâ©Ë≥áÊñôÂ∫´ (ÊúÉË©±ÁãÄÊÖãÁÆ°ÁêÜ) ---
if 'food_database' not in st.session_state:
    st.session_state.food_database = {
        # ‰∏≠Âºè
        "ÁôΩÈ£Ø(‰∏ÄÁ¢ó)": {"calories": 280, "category": "‰∏≠Âºè"},
        "ÁÇíÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Êª∑ËÇâÈ£Ø(‰∏ÄÁ¢ó)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Ê∞¥È§É(10È°Ü)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Â∞èÁ±†ÂåÖ(5È°Ü)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Á≤•(‰∏ÄÁ¢ó)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Ë±ÜÊºø(250ml)": {"calories": 70, "category": "‰∏≠Âºè"},
        "Ê≤πÊ¢ù(‰∏ÄÊ†π)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Ëöµ‰ªîÁÖé(‰∏Ä‰ªΩ)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Â§ßËÖ∏È∫µÁ∑ö(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Ëá≠Ë±ÜËÖê(‰∏Ä‰ªΩ)": {"calories": 350, "category": "‰∏≠Âºè"},
        "ËÇâÂúì(‰∏ÄÂÄã)": {"calories": 250, "category": "‰∏≠Âºè"},
        "ÊΩ§È§Ö(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Ê∂ºÈ∫µ(‰∏Ä‰ªΩ)": {"calories": 350, "category": "‰∏≠Âºè"},
        "ÈçãË≤º(5ÂÄã)": {"calories": 300, "category": "‰∏≠Âºè"},
        "Ê∞¥ÁÖéÂåÖ(‰∏ÄÂÄã)": {"calories": 180, "category": "‰∏≠Âºè"},
        "ÈππÈÖ•Èõû(100g)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Êª∑Âë≥(100g)": {"calories": 150, "category": "‰∏≠Âºè"},
        "ÈóúÊù±ÁÖÆ(100g)": {"calories": 100, "category": "‰∏≠Âºè"},
        "ÁâõËÇâÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÈôΩÊò•È∫µ(‰∏ÄÁ¢ó)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Ê¶®ËèúËÇâÁµ≤È∫µ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®ÈÖ•È∫µ(‰∏ÄÁ¢ó)": {"calories": 500, "category": "‰∏≠Âºè"},
        "ÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "Êª∑Âë≥ÊãºÁõ§(‰∏Ä‰ªΩ)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÈππÁ≤•(‰∏ÄÁ¢ó)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Ê∏ÖÁ≤•Â∞èËèú(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "È£ØÁ≥∞(‰∏ÄÂÄã)": {"calories": 250, "category": "‰∏≠Âºè"},
        "Êµ∑ËãîÈ£ØÊç≤(‰∏ÄÂÄã)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÁÉ§Âú∞Áìú(‰∏ÄÂÄã)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ÁÉ§ÁéâÁ±≥(‰∏ÄÊ†π)": {"calories": 180, "category": "‰∏≠Âºè"},
        "Á¥ÖÁáíËÇâ(100g)": {"calories": 300, "category": "‰∏≠Âºè"},
        "È∫ªÂ©ÜË±ÜËÖê(‰∏Ä‰ªΩ)": {"calories": 250, "category": "‰∏≠Âºè"},
        "ÂÆÆ‰øùÈõû‰∏Å(‰∏Ä‰ªΩ)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Á≥ñÈÜãÊéíÈ™®(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ÁÇíÈùíËèú(‰∏Ä‰ªΩ)": {"calories": 100, "category": "‰∏≠Âºè"},
        "Áï™ËåÑÁÇíËõã(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ËíúÊ≥•ÁôΩËÇâ(‰∏Ä‰ªΩ)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÂÆ¢ÂÆ∂Â∞èÁÇí(‰∏Ä‰ªΩ)": {"calories": 350, "category": "‰∏≠Âºè"},
        "‰∏âÊùØÈõû(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Ëõ§ËúäÁµ≤Áìú(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "ËñëÁµ≤Â§ßËÖ∏(‰∏Ä‰ªΩ)": {"calories": 250, "category": "‰∏≠Âºè"},
        "ËíºË†ÖÈ†≠(‰∏Ä‰ªΩ)": {"calories": 280, "category": "‰∏≠Âºè"},
        "ÈππË±¨ËÇâ(100g)": {"calories": 350, "category": "‰∏≠Âºè"},
        "È¶ôËÖ∏(‰∏ÄÊ¢ù)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Á±≥ËÖ∏(‰∏ÄÊ¢ù)": {"calories": 150, "category": "‰∏≠Âºè"},
        "ÈªëÁôΩÂàá(‰∏Ä‰ªΩ)": {"calories": 250, "category": "‰∏≠Âºè"},
        "Êª∑Ëõã(‰∏ÄÈ°Ü)": {"calories": 80, "category": "‰∏≠Âºè"},
        "Êµ∑Â∏∂(‰∏Ä‰ªΩ)": {"calories": 50, "category": "‰∏≠Âºè"},
        "Ë±Ü‰πæ(‰∏Ä‰ªΩ)": {"calories": 60, "category": "‰∏≠Âºè"},
        "Ë±¨Ë°ÄÁ≥ï(‰∏Ä‰ªΩ)": {"calories": 180, "category": "‰∏≠Âºè"},
        "Á≤âËÖ∏(‰∏Ä‰ªΩ)": {"calories": 100, "category": "‰∏≠Âºè"},
        "ËÇùÈÄ£(‰∏Ä‰ªΩ)": {"calories": 120, "category": "‰∏≠Âºè"},
        "Âò¥ÈÇäËÇâ(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "ÈØäÈ≠öÁÖô(‰∏Ä‰ªΩ)": {"calories": 100, "category": "‰∏≠Âºè"},
        "ÈÄèÊäΩ(100g)": {"calories": 90, "category": "‰∏≠Âºè"},
        "Â∞èÂç∑(100g)": {"calories": 80, "category": "‰∏≠Âºè"},
        "‰∏≠Âç∑(100g)": {"calories": 85, "category": "‰∏≠Âºè"},
        "Ëä±Êûù(100g)": {"calories": 95, "category": "‰∏≠Âºè"},
        "Â¢®È≠ö(100g)": {"calories": 80, "category": "‰∏≠Âºè"},
        "È±àÈ≠ö(100g)": {"calories": 105, "category": "‰∏≠Âºè"},
        "ÈØõÈ≠ö(100g)": {"calories": 120, "category": "‰∏≠Âºè"},
        "ÈØñÈ≠ö(100g)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ÁßãÂàÄÈ≠ö(‰∏ÄÊ¢ù)": {"calories": 250, "category": "‰∏≠Âºè"},
        "Êü≥ËëâÈ≠ö(1Ê¢ù)": {"calories": 50, "category": "‰∏≠Âºè"},
        "Ëô±ÁõÆÈ≠ö(100g)": {"calories": 180, "category": "‰∏≠Âºè"},
        "Âê≥ÈÉ≠È≠ö(100g)": {"calories": 120, "category": "‰∏≠Âºè"},
        "ËçâÈ≠ö(100g)": {"calories": 110, "category": "‰∏≠Âºè"},
        "È∞±È≠ö(100g)": {"calories": 120, "category": "‰∏≠Âºè"},
        "Áü≥ÊñëÈ≠ö(100g)": {"calories": 95, "category": "‰∏≠Âºè"},
        "ÂúüÈ≠†È≠öÁæπ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ËÇâÁæπÊπØ(‰∏ÄÁ¢ó)": {"calories": 180, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®ÊπØ(‰∏ÄÁ¢ó)": {"calories": 250, "category": "‰∏≠Âºè"},
        "ÈõûÊπØ(‰∏ÄÁ¢ó)": {"calories": 200, "category": "‰∏≠Âºè"},
        "È¥®ËÇâÁæπ(‰∏ÄÁ¢ó)": {"calories": 350, "category": "‰∏≠Âºè"},
        "ÁæäËÇâÁàê(‰∏Ä‰ªΩ)": {"calories": 500, "category": "‰∏≠Âºè"},
        "ËñëÊØçÈ¥®(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÈÖ∏ËèúÁôΩËÇâÈçã(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "È∫ªËæ£Èçã(‰∏Ä‰ªΩ)": {"calories": 700, "category": "‰∏≠Âºè"},
        "Ëá≠Ëá≠Èçã(‰∏Ä‰ªΩ)": {"calories": 450, "category": "‰∏≠Âºè"},
        "Êµ∑ÈÆÆÈçã(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ÁâõÂ•∂Èçã(‰∏Ä‰ªΩ)": {"calories": 450, "category": "‰∏≠Âºè"},
        "Áï™ËåÑÈçã(‰∏Ä‰ªΩ)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Ëµ∑Âè∏Èçã(‰∏Ä‰ªΩ)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Â£ΩÂñúÁáí(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Áü≥ÈçãÊãåÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÈÉ®ÈöäÈçã(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "ÈüìÂºèÁÉ§ËÇâ(‰∏Ä‰ªΩ)": {"calories": 700, "category": "‰∏≠Âºè"},
        "Ê≥°ËèúÈçã(‰∏Ä‰ªΩ)": {"calories": 450, "category": "‰∏≠Âºè"},
        "‰∫∫ÂèÉÈõûÊπØ(‰∏ÄÁ¢ó)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÁÇ∏ÈÜ¨È∫µ(‰∏ÄÁ¢ó)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Êµ∑ÈÆÆÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "ÂÜ∑È∫µ(‰∏ÄÁ¢ó)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Ë±ÜËÖêÈçã(‰∏Ä‰ªΩ)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÁÇíÂπ¥Á≥ï(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Ëæ£ÁÇíÈõûÊéí(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ÁÉ§ËÇâ‰∏≤(ÈüìÂºè)": {"calories": 180, "category": "‰∏≠Âºè"},
        "ÈüìÂºèÁÇ∏Èõû(‰∏Ä‰ªΩ)": {"calories": 700, "category": "‰∏≠Âºè"},
        "Ë±¨ËÖ≥È£Ø(‰∏Ä‰ªΩ)": {"calories": 700, "category": "‰∏≠Âºè"},
        "ÊéßËÇâÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "ÁÑ¢ËÇâÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "Á≠í‰ªîÁ±≥Á≥ï(‰∏ÄÂÄã)": {"calories": 250, "category": "‰∏≠Âºè"},
        "Á¢óÁ≤ø(‰∏ÄÂÄã)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ÈºéÈÇäË∂ñ(‰∏ÄÁ¢ó)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÈòøÁµ¶(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "È≠ö‰∏∏(‰∏ÄÈ°Ü)": {"calories": 30, "category": "‰∏≠Âºè"},
        "ËÇâÁæπ(‰∏ÄÂ°ä)": {"calories": 40, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®ÈÖ•(‰∏ÄÂ°ä)": {"calories": 60, "category": "‰∏≠Âºè"},
        "Ê≤πË±ÜËÖê(‰∏ÄÂ°ä)": {"calories": 50, "category": "‰∏≠Âºè"},
        "ÊùøË±ÜËÖê(100g)": {"calories": 76, "category": "‰∏≠Âºè"},
        "Â´©Ë±ÜËÖê(100g)": {"calories": 50, "category": "‰∏≠Âºè"},
        "ÈõûËõãË±ÜËÖê(100g)": {"calories": 80, "category": "‰∏≠Âºè"},
        "Ëá≠Ë±ÜËÖê(ÁÇ∏)": {"calories": 350, "category": "‰∏≠Âºè"},
        "Ëá≠Ë±ÜËÖê(ÁÖÆ)": {"calories": 250, "category": "‰∏≠Âºè"},
        "È∫ªËæ£È¥®Ë°Ä(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Êª∑Â§ßËÖ∏(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Êª∑Ë±¨È†≠ÁöÆ(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Êª∑Ëä±Áîü(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Êª∑Ëõã(‰∏ÄÈ°Ü)": {"calories": 80, "category": "‰∏≠Âºè"},
        "Êª∑Ë±ÜÂπ≤(‰∏Ä‰ªΩ)": {"calories": 60, "category": "‰∏≠Âºè"},
        "Êª∑Êµ∑Â∏∂(‰∏Ä‰ªΩ)": {"calories": 50, "category": "‰∏≠Âºè"},
        "Êª∑Á±≥Ë°Ä(‰∏Ä‰ªΩ)": {"calories": 180, "category": "‰∏≠Âºè"},
        "È¥®Ë°ÄÊπØ(‰∏ÄÁ¢ó)": {"calories": 100, "category": "‰∏≠Âºè"},
        "Á∂úÂêàÊª∑Âë≥(‰∏Ä‰ªΩ)": {"calories": 300, "category": "‰∏≠Âºè"},
        "Ë±¨Ë°ÄÊπØ(‰∏ÄÁ¢ó)": {"calories": 120, "category": "‰∏≠Âºè"},
        "Ë±¨ËÇùÊπØ(‰∏ÄÁ¢ó)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Ëöµ‰ªîÊπØ(‰∏ÄÁ¢ó)": {"calories": 100, "category": "‰∏≠Âºè"},
        "Ëõ§ËúäÊπØ(‰∏ÄÁ¢ó)": {"calories": 80, "category": "‰∏≠Âºè"},
        "È±∏È≠öÊπØ(‰∏ÄÁ¢ó)": {"calories": 200, "category": "‰∏≠Âºè"},
        "Âë≥ÂôåÈ≠öÊπØ(‰∏ÄÁ¢ó)": {"calories": 150, "category": "‰∏≠Âºè"},
        "ÈÖ∏Ëæ£ÊπØÈ§É(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "È§õÈ£©È∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "Á¶èÂ∑ûÈ≠ö‰∏∏ÊπØ(‰∏ÄÁ¢ó)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Ëµ§ËÇâÁæπÊπØ(‰∏ÄÁ¢ó)": {"calories": 180, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®È∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "ÁâõËÇâÁá¥È£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÊªëËõãËù¶‰ªÅÁá¥È£Ø(‰∏Ä‰ªΩ)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Âª£Êù±ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 700, "category": "‰∏≠Âºè"},
        "ÊèöÂ∑ûÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "ËõãÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Ëù¶‰ªÅÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ÁâõËÇâÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÈõûËÇâÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "ÂíñÂì©ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "Á¥†ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ÁÅ´ËÖøËõãÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ËáòÂë≥ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 650, "category": "‰∏≠Âºè"},
        "Êµ∑ÈÆÆÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "È≥≥Ê¢®ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ÈππÈ≠öÈõûÁ≤íÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ËÇâÁµ≤ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "‰ªÄÈå¶ÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÂüπÊ†πÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "Ê≥°ËèúÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 550, "category": "‰∏≠Âºè"},
        "ÈÆ≠È≠öÁÇíÈ£Ø(‰∏Ä‰ªΩ)": {"calories": 600, "category": "‰∏≠Âºè"},
        "ÁâõËÇâÊπØ(‰∏ÄÁ¢ó)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ÁæäËÇâÊπØ(‰∏ÄÁ¢ó)": {"calories": 250, "category": "‰∏≠Âºè"},
        "Ë±¨ËÇùÊπØ(‰∏ÄÁ¢ó)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Ëµ§ËÇâÁæπ(‰∏Ä‰ªΩ)": {"calories": 180, "category": "‰∏≠Âºè"},
        "Ëù¶‰ªÅÁæπ(‰∏Ä‰ªΩ)": {"calories": 150, "category": "‰∏≠Âºè"},
        "Ëä±ÊûùÁæπ(‰∏Ä‰ªΩ)": {"calories": 180, "category": "‰∏≠Âºè"},
        "È≠∑È≠öÁæπ(‰∏Ä‰ªΩ)": {"calories": 160, "category": "‰∏≠Âºè"},
        "ÂúüÈ≠†È≠öÁæπ(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ËÇâÁæπ(‰∏Ä‰ªΩ)": {"calories": 180, "category": "‰∏≠Âºè"},
        "Â∞èÂç∑Á±≥Á≤â(‰∏ÄÁ¢ó)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ËÇâÁá•È£Ø(‰∏ÄÁ¢ó)": {"calories": 280, "category": "‰∏≠Âºè"},
        "ÈõûËÇâÈ£Ø(‰∏ÄÁ¢ó)": {"calories": 300, "category": "‰∏≠Âºè"},
        "ÁÅ´ÈõûËÇâÈ£Ø(‰∏ÄÁ¢ó)": {"calories": 320, "category": "‰∏≠Âºè"},
        "Ëù¶‰ªÅÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ËÇâÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 420, "category": "‰∏≠Âºè"},
        "È≠∑È≠öÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Ëä±ÊûùÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "ÂúüÈ≠†È≠öÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 480, "category": "‰∏≠Âºè"},
        "ÊéíÈ™®ÈÖ•È∫µ(‰∏ÄÁ¢ó)": {"calories": 500, "category": "‰∏≠Âºè"},
        "Ëµ§ËÇâÁæπÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "‰πæÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 380, "category": "‰∏≠Âºè"},
        "È∫ªÈÜ¨È∫µ(‰∏ÄÁ¢ó)": {"calories": 450, "category": "‰∏≠Âºè"},
        "ÈÖ∏Ëæ£È∫µ(‰∏ÄÁ¢ó)": {"calories": 420, "category": "‰∏≠Âºè"},
        "ÊπØÈ∫µ(‰∏ÄËà¨)": {"calories": 300, "category": "‰∏≠Âºè"},
        "Êª∑Âë≥È∫µ(‰∏Ä‰ªΩ)": {"calories": 400, "category": "‰∏≠Âºè"},
        "Á±≥ËãîÁõÆ(‰∏ÄÁ¢ó)": {"calories": 300, "category": "‰∏≠Âºè"},
        "Á≤ø‰ªîÊ¢ù(‰∏ÄÁ¢ó)": {"calories": 320, "category": "‰∏≠Âºè"},
        "ÊÑèÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 350, "category": "‰∏≠Âºè"},
        "ÈçãÁáíÊÑèÈ∫µ(‰∏ÄÁ¢ó)": {"calories": 400, "category": "‰∏≠Âºè"},
        "ÁáíÈ§ÖÊ≤πÊ¢ù(‰∏Ä‰ªΩ)": {"calories": 450, "category": "‰∏≠Âºè"},
        "ËòøËîîÁ≥ï(‰∏Ä‰ªΩ)": {"calories": 200, "category": "‰∏≠Âºè"},
        "ÂåÖÂ≠ê(‰∏ÄÂÄã)": {"calories": 150, "category": "‰∏≠Âºè"},
        "È•ÖÈ†≠(‰∏ÄÂÄã)": {"calories": 120, "category": "‰∏≠Âºè"},
        "Á®ÄÈ£Ø(‰∏ÄÁ¢ó)": {"calories": 100, "category": "‰∏≠Âºè"},
        "Ê∞¥ÁÖÆËõã(‰∏ÄÈ°Ü)": {"calories": 78, "category": "‰∏≠Âºè"},
        "Ëí∏Ëõã(‰∏Ä‰ªΩ)": {"calories": 120, "category": "‰∏≠Âºè"},
        "ÁöÆËõãÁò¶ËÇâÁ≤•(‰∏ÄÁ¢ó)": {"calories": 280, "category": "‰∏≠Âºè"},
        # Ë•øÂºè
        "È∫µÂåÖ(‰∏ÄÁâá)": {"calories": 150, "category": "Ë•øÂºè"},
        "ÈõûËÉ∏ËÇâ(100g)": {"calories": 165, "category": "Ë•øÂºè"},
        "ÁâõËÇâ(100g)": {"calories": 250, "category": "Ë•øÂºè"},
        "ÈÆ≠È≠ö(100g)": {"calories": 208, "category": "Ë•øÂºè"},
        "Ëä±Ê§∞Ëèú(100g)": {"calories": 25, "category": "Ë•øÂºè"},
        "ËòãÊûú(‰∏ÄÂÄã)": {"calories": 95, "category": "Ë•øÂºè"},
        "È¶ôËïâ(‰∏ÄÊ†π)": {"calories": 105, "category": "Ë•øÂºè"},
        "ÁâõÂ•∂(250ml)": {"calories": 150, "category": "Ë•øÂºè"},
        "ÂÑ™Ê†º(100g)": {"calories": 60, "category": "Ë•øÂºè"},
        "ÈõûËõã(‰∏ÄÈ°Ü)": {"calories": 78, "category": "Ë•øÂºè"},
        "Ë±¨ËÇâ(100g)": {"calories": 242, "category": "Ë•øÂºè"},
        "Ëù¶‰ªÅ(100g)": {"calories": 85, "category": "Ë•øÂºè"},
        "Á≥ôÁ±≥È£Ø(‰∏ÄÁ¢ó)": {"calories": 250, "category": "Ë•øÂºè"},
        "ÂÖ®È∫•È∫µÂåÖ(‰∏ÄÁâá)": {"calories": 120, "category": "Ë•øÂºè"},
        "Âú∞Áìú(100g)": {"calories": 86, "category": "Ë•øÂºè"},
        "È¶¨Èà¥ËñØ(100g)": {"calories": 77, "category": "Ë•øÂºè"},
        "ÈùíËèú(100g)": {"calories": 20, "category": "Ë•øÂºè"},
        "Êü≥Ê©ô(‰∏ÄÂÄã)": {"calories": 62, "category": "Ë•øÂºè"},
        "Ëë°ËêÑ(100g)": {"calories": 69, "category": "Ë•øÂºè"},
        "ÁáïÈ∫•Áâá(50g)": {"calories": 190, "category": "Ë•øÂºè"},
        "ÈÆ™È≠öÁΩêÈ†≠(100g)": {"calories": 180, "category": "Ë•øÂºè"},
        "Ëµ∑Âè∏(‰∏ÄÁâá)": {"calories": 113, "category": "Ë•øÂºè"},
        "ËñØÊ¢ù(100g)": {"calories": 312, "category": "Ë•øÂºè"},
        "Êä´Ëñ©(‰∏ÄÁâá)": {"calories": 285, "category": "Ë•øÂºè"},
        "Êº¢Â†°(‰∏ÄÂÄã)": {"calories": 300, "category": "Ë•øÂºè"},
        "‰∏âÊòéÊ≤ª(‰∏ÄÂÄã)": {"calories": 250, "category": "Ë•øÂºè"},
        "ÂíñÂï°(ÈªëÂíñÂï°)": {"calories": 5, "category": "Ë•øÂºè"},
        "Áæ©Â§ßÂà©È∫µ(‰∏Ä‰ªΩ)": {"calories": 400, "category": "Ë•øÂºè"},
        "ÁâõÊéí(‰∏Ä‰ªΩ)": {"calories": 600, "category": "Ë•øÂºè"},
        "ÁÉ§Èõû(‰∏Ä‰ªΩ)": {"calories": 450, "category": "Ë•øÂºè"},
        "Ê≤ôÊãâ(‰∏Ä‰ªΩ)": {"calories": 150, "category": "Ë•øÂºè"},
        "ÊøÉÊπØ(‰∏ÄÁ¢ó)": {"calories": 120, "category": "Ë•øÂºè"},
        "Ê≥ïÂºèÂêêÂè∏(‰∏ÄÁâá)": {"calories": 200, "category": "Ë•øÂºè"},
        "ÁæéÂºèÈ¨ÜÈ§Ö(‰∏ÄÁâá)": {"calories": 250, "category": "Ë•øÂºè"},
        "ÂèØÈ†åÈ∫µÂåÖ(‰∏ÄÂÄã)": {"calories": 200, "category": "Ë•øÂºè"},
        "Ê≥ïÂºèÈ∫µÂåÖ(100g)": {"calories": 260, "category": "Ë•øÂºè"},
        "ÂêêÂè∏(‰∏ÄÁâá)": {"calories": 80, "category": "Ë•øÂºè"},
        "ÂÖ®È∫•ÂêêÂè∏(‰∏ÄÁâá)": {"calories": 70, "category": "Ë•øÂºè"},
        "ÁÅ´ËÖøËõã‰∏âÊòéÊ≤ª(‰∏Ä‰ªΩ)": {"calories": 280, "category": "Ë•øÂºè"},
        "Á∏ΩÂåØ‰∏âÊòéÊ≤ª(‰∏Ä‰ªΩ)": {"calories": 400, "category": "Ë•øÂºè"},
        "ÈÆ™È≠ö‰∏âÊòéÊ≤ª(‰∏Ä‰ªΩ)": {"calories": 350, "category": "Ë•øÂºè"},
        "ÈõûÊéí‰∏âÊòéÊ≤ª(‰∏Ä‰ªΩ)": {"calories": 400, "category": "Ë•øÂºè"},
        "Âç°ÊãâÈõûËÖøÂ†°(‰∏ÄÂÄã)": {"calories": 500, "category": "Ë•øÂºè"},
        "ÂãÅËæ£ÈõûËÖøÂ†°(‰∏ÄÂÄã)": {"calories": 550, "category": "Ë•øÂºè"},
        "Â§ßÈ∫•ÂÖã(‰∏ÄÂÄã)": {"calories": 550, "category": "Ë•øÂºè"},
        "È∫•È¶ôÈõû(‰∏ÄÂÄã)": {"calories": 380, "category": "Ë•øÂºè"},
        "È∫•È¶ôÈ≠ö(‰∏ÄÂÄã)": {"calories": 350, "category": "Ë•øÂºè"},
        "ÈõôÂ±§ÁâõËÇâÂêâ‰∫ãÂ†°(‰∏ÄÂÄã)": {"calories": 450, "category": "Ë•øÂºè"},
        "ËñØÈ§Ö(‰∏Ä‰ªΩ)": {"calories": 150, "category": "Ë•øÂºè"},
        "ÈõûÂ°ä(6Â°ä)": {"calories": 280, "category": "Ë•øÂºè"},
        "ÁéâÁ±≥ÊπØ(‰∏Ä‰ªΩ)": {"calories": 100, "category": "Ë•øÂºè"},
        "ÂèØÊ®Ç(‰∏≠ÊùØ)": {"calories": 180, "category": "Ë•øÂºè"},
        "Èõ™Á¢ß(‰∏≠ÊùØ)": {"calories": 160, "category": "Ë•øÂºè"},
        "Á¥ÖËå∂(ÁÑ°Á≥ñ)": {"calories": 0, "category": "Ë•øÂºè"},
        "Á∂†Ëå∂(ÁÑ°Á≥ñ)": {"calories": 0, "category": "Ë•øÂºè"},
        "Â•∂Ëå∂(‰∏≠ÊùØ)": {"calories": 250, "category": "Ë•øÂºè"},
        "ÂíñÂï°ÊãøÈêµ(‰∏≠ÊùØ)": {"calories": 180, "category": "Ë•øÂºè"},
        "Âç°Â∏ÉÂ•áË´æ(‰∏≠ÊùØ)": {"calories": 150, "category": "Ë•øÂºè"},
        "Êë©Âç°(‰∏≠ÊùØ)": {"calories": 300, "category": "Ë•øÂºè"},
        "ÁæéÂºèÂíñÂï°(‰∏≠ÊùØ)": {"calories": 5, "category": "Ë•øÂºè"},
        "ÂÜ∞ÊãøÈêµ(‰∏Ä‰ªΩ)": {"calories": 200, "category": "Ë•øÂºè"},
        # ÁîúÈªû
        "Â∑ßÂÖãÂäõ(100g)": {"calories": 530, "category": "ÁîúÈªû"},
        "ÁîúÁîúÂúà(‰∏ÄÂÄã)": {"calories": 250, "category": "ÁîúÈªû"},
        "ÂÜ∞Ê∑áÊ∑ã(‰∏ÄÁêÉ)": {"calories": 150, "category": "ÁîúÈªû"},
        "Â∏É‰∏Å(‰∏ÄÂÄã)": {"calories": 100, "category": "ÁîúÈªû"},
        "ËõãÁ≥ï(‰∏ÄÁâá)": {"calories": 300, "category": "ÁîúÈªû"},
        "È¶¨Âç°Èæç(‰∏ÄÂÄã)": {"calories": 100, "category": "ÁîúÈªû"},
        "ÊèêÊãâÁ±≥Ëòá(‰∏Ä‰ªΩ)": {"calories": 350, "category": "ÁîúÈªû"},
        "Ê≥°Ëäô(‰∏ÄÂÄã)": {"calories": 200, "category": "ÁîúÈªû"},
        "È¨ÜÈ§Ö(‰∏Ä‰ªΩ)": {"calories": 400, "category": "ÁîúÈªû"},
        "ÈõûËõãÁ≥ï(3ÂÄã)": {"calories": 150, "category": "ÁîúÈªû"},
        "Á¥ÖË±ÜÈ§Ö(‰∏ÄÂÄã)": {"calories": 200, "category": "ÁîúÈªû"},
        "ËªäËº™È§Ö(‰∏ÄÂÄã)": {"calories": 200, "category": "ÁîúÈªû"},
        "‰ªôËçâ(‰∏Ä‰ªΩ)": {"calories": 80, "category": "ÁîúÈªû"},
        "ÊÑõÁéâ(‰∏Ä‰ªΩ)": {"calories": 50, "category": "ÁîúÈªû"},
        "Á≤âÂúì(‰∏Ä‰ªΩ)": {"calories": 150, "category": "ÁîúÈªû"},
        "Ë±ÜËä±(‰∏Ä‰ªΩ)": {"calories": 120, "category": "ÁîúÈªû"},
        "ÊπØÂúì(5È°Ü)": {"calories": 250, "category": "ÁîúÈªû"},
        "Á¥ÖË±ÜÊπØ(‰∏ÄÁ¢ó)": {"calories": 200, "category": "ÁîúÈªû"},
        "Á∂†Ë±ÜÊπØ(‰∏ÄÁ¢ó)": {"calories": 180, "category": "ÁîúÈªû"},
        "Ëµ∑Âè∏ËõãÁ≥ï(‰∏ÄÁâá)": {"calories": 400, "category": "ÁîúÈªû"},
        "ÂçÉÂ±§ËõãÁ≥ï(‰∏ÄÁâá)": {"calories": 450, "category": "ÁîúÈªû"},
        "ÈäÖÈëºÁáí(‰∏ÄÂÄã)": {"calories": 250, "category": "ÁîúÈªû"},
        "ËõãÊç≤(‰∏ÄÊ†π)": {"calories": 80, "category": "ÁîúÈªû"},
        "È≥≥Ê¢®ÈÖ•(‰∏ÄÂÄã)": {"calories": 200, "category": "ÁîúÈªû"},
        "Â§™ÈôΩÈ§Ö(‰∏ÄÂÄã)": {"calories": 250, "category": "ÁîúÈªû"},
        "ËÄÅÂ©ÜÈ§Ö(‰∏ÄÂÄã)": {"calories": 220, "category": "ÁîúÈªû"},
        "Á∂†Ë±ÜÊ§™(‰∏ÄÂÄã)": {"calories": 300, "category": "ÁîúÈªû"},
        "ÊúàÈ§Ö(‰∏ÄÂÄã)": {"calories": 400, "category": "ÁîúÈªû"},
        "È∫ªÁ≥¨(‰∏ÄÂÄã)": {"calories": 100, "category": "ÁîúÈªû"},
        "Á¥ÖÈæúÁ≤ø(‰∏ÄÂÄã)": {"calories": 180, "category": "ÁîúÈªû"},
        "Ëçâ‰ªîÁ≤ø(‰∏ÄÂÄã)": {"calories": 150, "category": "ÁîúÈªû"},
        "Â∑ßÂÖãÂäõÈ§Ö‰πæ(‰∏ÄÁâá)": {"calories": 60, "category": "ÁîúÈªû"},
        "Ê¥ãËäãÁâá(‰∏ÄÂåÖ)": {"calories": 200, "category": "ÁîúÈªû"},
        "ÁàÜÁ±≥Ëä±(‰∏Ä‰ªΩ)": {"calories": 150, "category": "ÁîúÈªû"},
        "ÁâõÂ•∂Á≥ñ(‰∏ÄÈ°Ü)": {"calories": 25, "category": "ÁîúÈªû"},
        "ËªüÁ≥ñ(‰∏Ä‰ªΩ)": {"calories": 100, "category": "ÁîúÈªû"},
        "Ê£íÊ£íÁ≥ñ(‰∏ÄÊ†π)": {"calories": 50, "category": "ÁîúÈªû"},
        "ÈªëÂ∑ßÂÖãÂäõ(100g)": {"calories": 580, "category": "ÁîúÈªû"},
        "ÁèçÁè†Â•∂Ëå∂(Â§ßÊùØ)": {"calories": 400, "category": "ÁîúÈªû"},
        "Âà®ÂÜ∞(‰∏Ä‰ªΩ)": {"calories": 300, "category": "ÁîúÈªû"},
        "Èõ™Ëä±ÂÜ∞(‰∏Ä‰ªΩ)": {"calories": 400, "category": "ÁîúÈªû"},
        "ËäíÊûúÂÜ∞(‰∏Ä‰ªΩ)": {"calories": 500, "category": "ÁîúÈªû"},
        # Ê∞¥Êûú
        "Ë•øÁìú(100g)": {"calories": 30, "category": "Ê∞¥Êûú"}, "È≥≥Ê¢®(100g)": {"calories": 50, "category": "Ê∞¥Êûú"},
        "È¶ôÁìú(100g)": {"calories": 35, "category": "Ê∞¥Êûú"}, "Êú®Áìú(100g)": {"calories": 43, "category": "Ê∞¥Êûú"},
        "Ëä≠Ê®Ç(100g)": {"calories": 68, "category": "Ê∞¥Êûú"}, "ËìÆÈúß(100g)": {"calories": 35, "category": "Ê∞¥Êûú"},
        "ÈáãËø¶(100g)": {"calories": 100, "category": "Ê∞¥Êûú"}, "ËäíÊûú(100g)": {"calories": 60, "category": "Ê∞¥Êûú"},
        "ÈæçÁúº(100g)": {"calories": 60, "category": "Ê∞¥Êûú"}, "ËçîÊûù(100g)": {"calories": 66, "category": "Ê∞¥Êûú"},
        "Ê´ªÊ°É(100g)": {"calories": 50, "category": "Ê∞¥Êûú"}, "ËçâËéì(100g)": {"calories": 32, "category": "Ê∞¥Êûú"},
        "ËóçËéì(100g)": {"calories": 57, "category": "Ê∞¥Êûú"}, "Â•áÁï∞Êûú(‰∏ÄÂÄã)": {"calories": 60, "category": "Ê∞¥Êûú"},
        "ÁÅ´ÈæçÊûú(100g)": {"calories": 50, "category": "Ê∞¥Êûú"}, "ÈÖ™Ê¢®(100g)": {"calories": 160, "category": "Ê∞¥Êûú"},
        "Ê¶¥Êß§(100g)": {"calories": 147, "category": "Ê∞¥Êûú"}, "Â±±Á´π(100g)": {"calories": 73, "category": "Ê∞¥Êûú"},
        "Ëë°ËêÑÊüö(‰∏ÄÂÄã)": {"calories": 52, "category": "Ê∞¥Êûú"}, "Ê™∏Ê™¨(‰∏ÄÂÄã)": {"calories": 29, "category": "Ê∞¥Êûú"},
        "Áï™ËåÑ(100g)": {"calories": 18, "category": "Ê∞¥Êûú"}, "Â∞èÁï™ËåÑ(100g)": {"calories": 18, "category": "Ê∞¥Êûú"},
        # Ëî¨Ëèú
        "Â∞èÈªÉÁìú(100g)": {"calories": 15, "category": "Ëî¨Ëèú"}, "È´òÈ∫óËèú(100g)": {"calories": 25, "category": "Ëî¨Ëèú"},
        "Â§ßÁôΩËèú(100g)": {"calories": 13, "category": "Ëî¨Ëèú"}, "Á©∫ÂøÉËèú(100g)": {"calories": 20, "category": "Ëî¨Ëèú"},
        "Ëè†Ëèú(100g)": {"calories": 23, "category": "Ëî¨Ëèú"}, "Âú∞ÁìúËëâ(100g)": {"calories": 29, "category": "Ëî¨Ëèú"},
        "ÈáëÈáùËèá(100g)": {"calories": 25, "category": "Ëî¨Ëèú"}, "È¶ôËèá(100g)": {"calories": 26, "category": "Ëî¨Ëèú"},
        "ÊùèÈÆëËèá(100g)": {"calories": 34, "category": "Ëî¨Ëèú"}, "Ë±ÜËÖê‰π≥(10g)": {"calories": 20, "category": "Ëî¨Ëèú"},
        "Ê≥°Ëèú(100g)": {"calories": 30, "category": "Ëî¨Ëèú"}, "Êµ∑Â∏∂ËäΩ(100g)": {"calories": 44, "category": "Ëî¨Ëèú"},
        "ÈªëÊú®ËÄ≥(100g)": {"calories": 25, "category": "Ëî¨Ëèú"}, "ÁôΩÊú®ËÄ≥(100g)": {"calories": 20, "category": "Ëî¨Ëèú"},
        "ÈáëÈáùËä±(100g)": {"calories": 30, "category": "Ëî¨Ëèú"}, "ÁéâÁ±≥Á≠ç(100g)": {"calories": 26, "category": "Ëî¨Ëèú"},
        "Á≠äÁôΩÁ≠ç(100g)": {"calories": 22, "category": "Ëî¨Ëèú"}, "ÈùíÊ§í(100g)": {"calories": 20, "category": "Ëî¨Ëèú"},
        "Á¥ÖÊ§í(100g)": {"calories": 26, "category": "Ëî¨Ëèú"}, "ÈªÉÊ§í(100g)": {"calories": 27, "category": "Ëî¨Ëèú"},
        "Ëã¶Áìú(100g)": {"calories": 19, "category": "Ëî¨Ëèú"}, "Áµ≤Áìú(100g)": {"calories": 17, "category": "Ëî¨Ëèú"},
        "ÂÜ¨Áìú(100g)": {"calories": 13, "category": "Ëî¨Ëèú"}, "ÂçóÁìú(100g)": {"calories": 26, "category": "Ëî¨Ëèú"},
        "Â§ßËíú(10g)": {"calories": 15, "category": "Ëî¨Ëèú"}, "Ëñë(10g)": {"calories": 8, "category": "Ëî¨Ëèú"},
        "Ëî•(10g)": {"calories": 5, "category": "Ëî¨Ëèú"}, "Ê¥ãËî•(100g)": {"calories": 40, "category": "Ëî¨Ëèú"},
        # Á©ÄÁâ©ËàáÊæ±Á≤â
        "ÁéâÁ±≥(100g)": {"calories": 86, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"}, "Á∂†Ë±Ü(100g)": {"calories": 340, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        "Á¥ÖË±Ü(100g)": {"calories": 330, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"}, "ËäãÈ†≠(100g)": {"calories": 115, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        "Â±±Ëó•(100g)": {"calories": 108, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"}, "ËìÆËóï(100g)": {"calories": 74, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        "Ëç∏Ëñ∫(100g)": {"calories": 67, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"}, "Ëè±Ëßí(100g)": {"calories": 116, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        # Â†ÖÊûúËàáÁ®ÆÂ≠ê
        "Ëä±Áîü(100g)": {"calories": 567, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"}, "ËÖ∞Êûú(100g)": {"calories": 553, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"},
        "Ê†∏Ê°É(100g)": {"calories": 654, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"}, "Êùè‰ªÅ(100g)": {"calories": 579, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"},
        "ÈñãÂøÉÊûú(100g)": {"calories": 562, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"}, "ÁìúÂ≠ê(100g)": {"calories": 572, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"},
        "ÈªëËäùÈ∫ª(100g)": {"calories": 573, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"}, "ÁôΩËäùÈ∫ª(100g)": {"calories": 597, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"},
        "Â•á‰∫ûÁ±Ω(10g)": {"calories": 48, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"}, "‰∫ûÈ∫ªÁ±Ω(10g)": {"calories": 53, "category": "Â†ÖÊûúËàáÁ®ÆÂ≠ê"},
        "ËïéÈ∫•(100g)": {"calories": 343, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"}, "ËóúÈ∫•(100g)": {"calories": 368, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        "Â∞èÁ±≥(100g)": {"calories": 378, "category": "Á©ÄÁâ©ËàáÊæ±Á≤â"},
        # ËÇâÈ°ûËàáÊµ∑ÈÆÆ
        "ÈõûËÉ∏ËÇâ(100g)": {"calories": 165, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"}, "ÁâõËÇâ(100g)": {"calories": 250, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"},
        "ÈÆ≠È≠ö(100g)": {"calories": 208, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"}, "Ë±¨ËÇâ(100g)": {"calories": 242, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"},
        "Ëù¶‰ªÅ(100g)": {"calories": 85, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"}, "ÈÆ™È≠öÁΩêÈ†≠(100g)": {"calories": 180, "category": "ËÇâÈ°ûËàáÊµ∑ÈÆÆ"},
        # ‰π≥Ë£ΩÂìÅËàáËõã
        "ÁâõÂ•∂(250ml)": {"calories": 150, "category": "‰π≥Ë£ΩÂìÅËàáËõã"}, "ÂÑ™Ê†º(100g)": {"calories": 60, "category": "‰π≥Ë£ΩÂìÅËàáËõã"},
        "ÈõûËõã(‰∏ÄÈ°Ü)": {"calories": 78, "category": "‰π≥Ë£ΩÂìÅËàáËõã"}, "Ëµ∑Âè∏(‰∏ÄÁâá)": {"calories": 113, "category": "‰π≥Ë£ΩÂìÅËàáËõã"},
        # ÂÖ∂‰ªñÈõ∂È£ü
        "È§Ö‰πæ(‰∏ÄÁâá)": {"calories": 50, "category": "ÂÖ∂‰ªñÈõ∂È£ü"}, "Ëä±ÁîüÈÜ¨(10g)": {"calories": 60, "category": "ÂÖ∂‰ªñÈõ∂È£ü"},
        "ÊûúÈÜ¨(10g)": {"calories": 30, "category": "ÂÖ∂‰ªñÈõ∂È£ü"},
    }

# --- ÈÅãÂãïÈ°ûÂûãÂèäÊØèÂàÜÈêòÊ∂àËÄóÂç°Ë∑ØÈáå (ÂèÉËÄÉÂÄº) ---
if 'exercise_calories_per_min' not in st.session_state:
    st.session_state.exercise_calories_per_min = {
        "ÊÖ¢Ë∑ë": 10, "Ê∏∏Ê≥≥": 8, "È®éËá™Ë°åËªä": 7, "Âø´Ëµ∞": 5, "Áëú‰ºΩ": 3,
        "ÈáçË®ì": 6, "Ë∑≥Áπ©": 12, "ÁêÉÈ°ûÈÅãÂãï": 9, "ÊúâÊ∞ßËàûËπà": 7,
        "Ë∑ëÊ≠•Ê©ü": 9, "Ê©¢ÂúìÊ©ü": 7, "ÂàíËàπÊ©ü": 8, "ÈöéÊ¢ØÊ©ü": 10,
        "È£õËº™": 11, "È´òÂº∑Â∫¶ÈñìÊ≠áË®ìÁ∑¥(HIIT)": 15, "Êã≥Êìä/Ë∏¢Êã≥": 13, "Â£ÅÁêÉ": 12,
        "Á±ÉÁêÉ": 10, "Ë∂≥ÁêÉ": 11, "ÊéíÁêÉ": 6, "Á∂≤ÁêÉ": 8,
        "ÁæΩÊØõÁêÉ": 7, "Ê°åÁêÉ": 5, "È´òÁàæÂ§´ÁêÉ(Ê≠•Ë°å)": 5, "ÊªëÈõ™(‰∏ãÂù°)": 7,
        "ÊªëÈõ™(Ë∂äÈáé)": 10, "Ê∫úÂÜ∞": 6, "Áõ¥ÊéíËº™": 7, "ËàûËπà": 6,
        "Â∞äÂ∑¥(Zumba)": 8, "ÊôÆÊãâÊèê(Pilates)": 4, "Â§™Ê•µÊã≥": 3, "ÊüîÈÅì": 10,
        "Ë∑ÜÊã≥ÈÅì": 11, "Á©∫ÊâãÈÅì": 9, "ÊîÄÂ≤©": 9, "Êä±Áü≥": 10,
        "ÂàíÁç®Êú®Ëàü/ÁöÆÂàíËâá": 4, "Á´ãÊß≥Ë°ùÊµ™": 5, "Ë°ùÊµ™": 6, "ÊªëÊùø": 5,
        "ÂæíÊ≠•ÊóÖË°å(Âπ≥Âù¶)": 6, "ÂæíÊ≠•ÊóÖË°å(Â±±Âú∞)": 9, "ËÉåÂåÖÊóÖË°å": 10, "ÂúíËóù": 4,
        "Ââ≤Ëçâ": 5, "ÊâìÊéÉÊàøÂ±ã": 3, "Ê¥óËªä": 4, "Ê¥óÁ¢ó": 2,
        "ÈÅõÁãó": 3, "Ë≥ºÁâ©(Ê≠•Ë°å)": 2, "ÂÅöÈ£Ø": 3, "Áù°Ë¶∫": 1,
        "Èñ±ËÆÄ": 1, "ÁúãÈõªË¶ñ": 1, "Ëæ¶ÂÖ¨ÂÆ§Â∑•‰Ωú": 2, "ÈßïÈßõ": 2,
        "Èá£È≠ö(Á´ôÁ´ã)": 2, "ÊâìÁçµ": 5, "Â∞ÑÁÆ≠": 3, "‰øùÈΩ°ÁêÉ": 3,
        "ÊíûÁêÉ": 3, "È£õÈè¢": 2, "ÈñãÂêàË∑≥": 10, "Ê≥¢ÊØîË∑≥": 15,
        "‰ª∞Ëá•Ëµ∑Âùê": 6, "‰ºèÂú∞Êå∫Ë∫´": 7, "Ê∑±Ëπ≤": 8, "ÂºìÁÆ≠Ê≠•": 7,
        "Âπ≥ÊùøÊîØÊíê": 5, "ÂºïÈ´îÂêë‰∏ä": 12, "ÂñÆÊßìÊá∏ÂûÇ": 4, "ÈõôÊßìÂ±àËáÇ‰º∏": 10,
        "Êà∞Áπ©": 14, "Â£∫Èà¥Êì∫Áõ™": 12, "Ëæ≤Â§´Ëµ∞Ë∑Ø": 8, "Ëº™Ê§ÖÁ±ÉÁêÉ": 8,
        "Ëº™Ê§ÖÁ∂≤ÁêÉ": 7, "ÊâãÊêñËá™Ë°åËªä": 6, "Ê∞¥‰∏≠ÊúâÊ∞ß": 5, "Ê≤ôÁÅòÊéíÁêÉ": 10,
        "ÊîÄÂ≤©Ë®ìÁ∑¥": 11, "Ë∂äÈáéË∑ë": 12, "È¶¨ÊãâÊùæË®ìÁ∑¥": 13, "Èêµ‰∫∫‰∏âÈ†ÖË®ìÁ∑¥": 14,
        "Ë°óËàû": 8, "Ëä≠ËïæËàû": 7, "ÂúãÊ®ôËàû": 6, "ËÇöÁöÆËàû": 5,
        "È´îÊìç": 9, "ËàâÈáç": 10, "Á´∂ÊäÄÈ´îÊìç": 11, "Ë∑≥Ê∞¥": 4,
        "ÈüªÂæãÊìç": 6, "È´îËÇ≤ËàûËπà": 7, "ÊìäÂäç": 8, "ÊëîË∑§": 9,
        "ÂàíËàπ": 8, "Â∏ÜËàπ": 4, "È¢®Â∏Ü": 5, "Ê∞¥‰∏äÊë©ÊâòËªä": 6,
        "Ê∞¥‰∏äÊªëÊùø": 7, "ÊΩõÊ∞¥(ÊµÆÊΩõ)": 3, "ÊΩõÊ∞¥(Ê∑±ÊΩõ)": 6, "È¶¨Ë°ì": 5,
        "Â∞ÑÊìä": 2, "È´òÁ©∫Ë∑≥ÂÇò": 7, "ÊªëÁøîÁøº": 5, "ÊªëÁøîÂÇò": 5,
        "ÊªëÁøîÊ©ü": 4, "ÁÜ±Ê∞£ÁêÉ": 2, "È´òÁ©∫ÂΩàË∑≥": 8, "ÊªëÁ¥¢": 6,
        "Ë∑≥ÂÇò": 7, "Ë∂äÈáéËªä": 8, "Âç°‰∏ÅËªä": 7, "Ê•µÈôêÂñÆËªä": 9,
        "Â±±Âú∞Ëá™Ë°åËªä": 8, "ÂÖ¨Ë∑ØËá™Ë°åËªä": 7, "ÁâπÊäÄËá™Ë°åËªä": 9, "ÂüéÂ∏ÇÈ®éË°å": 6,
        "ÈÅõÁãó(Âø´Ëµ∞)": 4, "Ë∑ëÊ≠•Ê©ü(Âø´Ëµ∞)": 6, "Ë∑ëÊ≠•Ê©ü(Âù°Â∫¶)": 11, "Ê©¢ÂúìÊ©ü(È´òÂº∑Â∫¶)": 9,
        "ÂàíËàπÊ©ü(È´òÂº∑Â∫¶)": 10, "ÂãïÊÑüÂñÆËªä": 12, "ÊîÄÁôª(ÂÆ§ÂÖß)": 9, "ÊîÄÁôª(ÂÆ§Â§ñ)": 10,
        "Êä±Áü≥(ÂÆ§ÂÖß)": 10, "Êä±Áü≥(ÂÆ§Â§ñ)": 11, "Áëú‰ºΩ(ÁÜ±Áëú‰ºΩ)": 5, "ÁöÆÊãâÊèêÊñØ(Âô®Ê¢∞)": 6,
        "È´îËÉΩË®ìÁ∑¥": 10, "Ê†∏ÂøÉË®ìÁ∑¥": 8, "Âπ≥Ë°°Ë®ìÁ∑¥": 4, "ÊüîÈüåË®ìÁ∑¥": 3,
        "Âæ©ÂÅ•ÈÅãÂãï": 3, "‰º∏Â±ïÈÅãÂãï": 2, "ÂÜ•ÊÉ≥": 1, "Ê∑±ÂëºÂê∏Á∑¥Áøí": 1,
        "Êï£Ê≠•(ÊÖ¢)": 2, "Êï£Ê≠•(‰∏≠ÈÄü)": 3, "Êï£Ê≠•(Âø´)": 4, "Áà¨Ê®ìÊ¢Ø": 8,
        "‰∏ä‰∏ãÊ®ìÊ¢Ø": 7, "Á´ôÁ´ãÂ∑•‰Ωú": 2, "Âî±Ê≠å": 2, "ÂΩàÂ•èÊ®ÇÂô®": 3,
        "Áπ™Áï´": 2, "ÂØ´‰Ωú": 2, "ÊâìÂ≠ó": 1, "ÂúíËóù(ÈáçÂ∫¶)": 6,
        "Êê¨ÂÆ∂": 8, "‰øÆËªä": 5, "Ê¥óÊæ°": 1, "Á©øË°£Êúç": 1,
        "ÂêÉÈ£Ø": 1, "ÂñùÊ∞¥": 0, "ÁúãÊõ∏": 1, "Áé©ÈÅäÊà≤(ÂùêËëó)": 1,
        "Áé©ÈÅäÊà≤(Á´ôËëó)": 2, "Ë™™Ë©±": 1, "Â§ßÁ¨ë": 1, "Âì≠Ê≥£": 1,
    }

# Ë®àÁÆó BMI ÂáΩÊï∏
def calculate_bmi(weight, height):
    """Ë®àÁÆóË∫´È´îË≥™ÈáèÊåáÊï∏ (BMI)„ÄÇ"""
    if height > 0:
        return weight / ((height / 100) ** 2)
    return 0

# Ë®àÁÆóÂü∫Á§é‰ª£Ë¨ùÁéá (BMR) ÂíåÊØèÊó•Á∏ΩËÉΩÈáèÊ∂àËÄó (TDEE) ÂáΩÊï∏
def calculate_bmr_tdee(gender, weight, height, age, activity_level):
    """Ë®àÁÆóÂü∫Á§é‰ª£Ë¨ùÁéá (BMR) ÂíåÊØèÊó•Á∏ΩËÉΩÈáèÊ∂àËÄó (TDEE)„ÄÇ"""
    # Ê†πÊìöÊÄßÂà•Ë®àÁÆó BMR (Harris-Benedict Equation)
    if gender == "Áî∑ÊÄß":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else: # Â•≥ÊÄß
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    # ÂÆöÁæ©Ê¥ªÂãïÁ®ãÂ∫¶ÁöÑ‰πòÊï∏ (TDEE ‰ΩøÁî®ÔºåBMR ‰∏çËÆä)
    activity_multipliers = {
        "‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)": 1.2,
        "ËºïÂ∫¶ÈÅãÂãï (ÊØèÈÄ±1-3Â§©)": 1.375,
        "‰∏≠Â∫¶ÈÅãÂãï (ÊØèÈÄ±3-5Â§©)": 1.55,
        "È´òÂ∫¶ÈÅãÂãï (ÊØèÈÄ±6-7Â§©)": 1.725,
        "ÈùûÂ∏∏È´òÂ∫¶ÈÅãÂãï (ÊØèÂ§©Ë®ìÁ∑¥)": 1.9
    }
    tdee = bmr * activity_multipliers.get(activity_level, 1.2) # Áç≤ÂèñÊ¥ªÂãï‰øÇÊï∏ÔºåÂ¶ÇÊûúÊú™ÂÆöÁæ©ÂâáÈªòË™çÁÇ∫‰πÖÂùê
    return bmr, tdee

# Ë®àÁÆóÊØèÈ§êÁÜ±ÈáèÁöÑÂáΩÊï∏
def calculate_meal_calories(selected_foods_list_names, food_db):
    """Ê†πÊìöÈÅ∏ÊìáÁöÑÈ£üÁâ©Ë®àÁÆóÁ∏ΩÁÜ±Èáè„ÄÇ"""
    total_meal_cal = 0
    meal_details = {} # Áî®ÊñºÂÑ≤Â≠òÈ£üÁâ©ÂêçÁ®±ÂíåÂÖ∂Â∞çÊáâÁÜ±Èáè
    for item_name in selected_foods_list_names:
        if item_name in food_db:
            calories = food_db[item_name]["calories"]
            total_meal_cal += calories
            meal_details[item_name] = calories
    return total_meal_cal, meal_details

# Â§©Ê∞£ÈÅãÂãïÂª∫Ë≠∞ÂáΩÊï∏
def get_weather_exercise_suggestion(weather_desc, temperature):
    """Ê†πÊìöÂ§©Ê∞£ÊÉÖÊ≥ÅÁµ¶Âá∫ÈÅãÂãïÂª∫Ë≠∞„ÄÇ"""
    suggestion = "Ê†πÊìöÂ§©Ê∞£ÔºåÂª∫Ë≠∞ÊÇ®"

    weather_desc_lower = weather_desc.lower()

    if "Èõ®" in weather_desc_lower or "‰∏ãÈõ®" in weather_desc_lower or "Èõ∑" in weather_desc_lower:
        suggestion += "Âú®ÂÆ§ÂÖßÈÅãÂãïÔºå‰æãÂ¶ÇÔºöÁëú‰ºΩ„ÄÅË∑ëÊ≠•Ê©ü„ÄÅÈáçË®ì„ÄÅÂÆ§ÂÖßÊ∏∏Ê≥≥„ÄÇ"
    elif temperature < 10:
        suggestion += "Ê≥®ÊÑè‰øùÊöñÔºåÈÄ≤Ë°åÊ∫´ÂíåÁöÑÂÆ§ÂÖßÈÅãÂãïÔºåÂ¶ÇÁëú‰ºΩÊàñËºïÈáèÈáçË®ìÔºåÈÅøÂÖçÊÑüÂÜí„ÄÇ"
    elif temperature > 30 and ("Êô¥" in weather_desc_lower or "ÁÜ±" in weather_desc_lower):
        suggestion += "ÈÅøÂÖçÈ´òÂº∑Â∫¶Êà∂Â§ñÈÅãÂãïÔºåÊàñÈÅ∏ÊìáÊ∏ÖÊô®/ÂÇçÊôöÊôÇÊÆµÔºå‰∏¶Â§öË£úÂÖÖÊ∞¥ÂàÜÔºåÈ†êÈò≤‰∏≠Êöë„ÄÇ"
    elif "Êô¥" in weather_desc_lower or "Â§öÈõ≤" in weather_desc_lower or "Èô∞" in weather_desc_lower:
        suggestion += "ÈÅ©ÂêàÊà∂Â§ñÊ¥ªÂãïÔºÅÂèØ‰ª•ËÄÉÊÖÆÊÖ¢Ë∑ë„ÄÅÈ®éËá™Ë°åËªä„ÄÅÂÅ•Ëµ∞„ÄÅÁêÉÈ°ûÈÅãÂãïÔºå‰∫´ÂèóÂ•ΩÂ§©Ê∞£„ÄÇ"
    else:
        suggestion += "ÈÅ∏ÊìáÊÇ®ÂñúÊ≠°ÁöÑÈÅãÂãïÔºå‰øùÊåÅÊ¥ªÂäõÔºÅ"

    return suggestion

# --- Plotly ÂúñË°®Ê®£ÂºèË®≠ÂÆö (Ëá™ÂÆöÁæ©Âç°ÈÄö/ÊâãÁπ™È¢®Ê†º) ---
def get_cute_plotly_template():
    return go.layout.Template(
        layout=go.Layout(
            font=dict(family="Arial Rounded MT Bold, sans-serif", size=12, color="#5d4037"), # Âç°ÈÄöÂ≠óÈ´îÔºåÊ£ïËâ≤
            title_font_size=18,
            title_font_color="#d81b60", # Ê∑±Á≤âËâ≤Ê®ôÈ°å
            paper_bgcolor='rgba(0,0,0,0)', # ËÉåÊôØÈÄèÊòéÔºåËÆìCSSËÉåÊôØÁîüÊïà
            plot_bgcolor='rgba(0,0,0,0)', # ÂúñË°®ÂçÄËÉåÊôØÈÄèÊòé
            hoverlabel=dict(bgcolor="white", font_size=12, font_family="Arial Rounded MT Bold"),
            xaxis=dict(
                showgrid=False, # ‰∏çÈ°ØÁ§∫Á∂≤Ê†ºÁ∑ö
                showline=True, linecolor="#ffb6c1", linewidth=2, # Á≤âËâ≤Ëª∏Á∑ö
                tickfont=dict(color="#5d4037"),
                title_font_color="#d81b60",
                zeroline=False,
            ),
            yaxis=dict(
                showgrid=False, # ‰∏çÈ°ØÁ§∫Á∂≤Ê†ºÁ∑ö
                showline=True, linecolor="#ffb6c1", linewidth=2, # Á≤âËâ≤Ëª∏Á∑ö
                tickfont=dict(color="#5d4037"),
                title_font_color="#d81b60",
                zeroline=False,
            ),
            legend=dict(
                bgcolor="rgba(255,255,255,0.7)", # ËºïÂæÆÈÄèÊòéÁôΩËâ≤ËÉåÊôØ
                bordercolor="#ffb6c1",
                borderwidth=1,
                font=dict(color="#5d4037"),
                orientation="h", # Ê∞¥Âπ≥Âúñ‰æã
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            margin=dict(l=40, r=40, t=80, b=40), # Ë™øÊï¥ÈÇäË∑ù
        )
    )

px.defaults.template = get_cute_plotly_template() # Â∞áËá™ÂÆöÁæ©Ê®°ÊùøË®≠ÁÇ∫ Plotly Express ÁöÑÈ†êË®≠

# --- È†ÅÈù¢ÂÆöÁæ© ---
def get_greeting():
    """
    Ê†πÊìöÁï∂ÂâçÊôÇÈñìÁîüÊàê‰∏çÂêåÁöÑÂïèÂÄôË™û„ÄÇ
    ÈÄôÂÄãÂáΩÊï∏Â∑≤Á∂ìÈÄ≤Ë°å‰∫ÜÊ∏¨Ë©¶ÂíåÂÑ™ÂåñÔºå‰ΩøÂÖ∂Êõ¥Ê∫ñÁ¢∫Âú∞Âà§Êñ∑ÊôÇÈñìÊÆµ„ÄÇ
    Â¶ÇÊûúÂõ†Áí∞Â¢ÉÂõ†Á¥†Â∞éËá¥‰ªçÊúâË™§Â∑ÆÔºåÂèØËÄÉÊÖÆÁ∞°ÂåñÂïèÂÄôË™ûÁÇ∫Êõ¥ÈÄöÁî®ÂÖßÂÆπ„ÄÇ
    """
    current_hour = datetime.datetime.now().hour

    # Êõ¥Á≤æÁ¢∫ÁöÑÊôÇÈñìÊÆµÂäÉÂàÜ
    if 5 <= current_hour <= 10: # Êó©‰∏ä 5 ÈªûÂà∞‰∏äÂçà 10 Èªû
        return "Êó©ÂÆâÔºÅÊñ∞ÁöÑ‰∏ÄÂ§©ÔºåËÉΩÈáèÊªøÊªøÔºÅ‚òÄÔ∏è"
    elif 11 <= current_hour <= 13: # ‰∏äÂçà 11 ÈªûÂà∞‰∏ãÂçà 1 Èªû
        return "ÂçàÂÆâÔºÅ‰∫´Áî®ÁæéÂë≥ÂçàÈ§ê‰∫ÜÂóéÔºüü•ó"
    else: # ‰∏ãÂçà 2 ÈªûÂà∞ÂáåÊô® 4 Èªû
        return "ÊôöÂÆâÔºÅËæõËã¶‰∏ÄÂ§©‰∫ÜÔºåÊòØÊôÇÂÄôÂõûÈ°ß‰ªäÊó•ÁöÑÂÅ•Â∫∑ÊàêÊûúÔºÅüåô"


def home_page(df_history):
    """
    ÁîüÊàêÊáâÁî®Á®ãÂºèÁöÑÈ¶ñÈ†ÅÂÖßÂÆπÔºåÂåÖÂê´Ê≠°ËøéË™ûÂíåÂÅ•Â∫∑Ê¶ÇË¶Ω„ÄÇ
    ÂèÉÊï∏:
        df_history (pd.DataFrame): ÂåÖÂê´Áî®Êà∂ÂÅ•Â∫∑Ê≠∑Âè≤Á¥ÄÈåÑÁöÑ DataFrame„ÄÇ
    """
    # Removed specific anchor here, using global 'app_top'

    greeting = get_greeting()

    # ÂÅ•Â∫∑Â∞èË™ûÂàóË°®
    health_quotes = [
        "ÊØè‰∏ÄÊ¨°ÁöÑÈÅ∏ÊìáÔºåÈÉΩÂú®Â°ëÈÄ†Êõ¥Â•ΩÁöÑ‰Ω†„ÄÇ",
        "‰øùÊåÅÂÅ•Â∫∑ÔºåÂ∞±ÊòØÂ∞çËá™Â∑±ÊúÄÂ•ΩÁöÑÊäïË≥áÔºÅ",
        "ÈÅãÂãïËÆìË∫´È´îÁôºÂÖâÔºåÂÅ•Â∫∑ËÆìÁîüÊ¥ªÁ≤æÂΩ©ÔºÅ",
        "ÂùáË°°È£≤È£üÊòØÂÅ•Â∫∑‰πãË∑ØÁöÑÂü∫Áü≥„ÄÇ",
        "ËÅÜËÅΩË∫´È´îÁöÑËÅ≤Èü≥ÔºåÂÆÉÊúÉÂëäË®¥‰Ω†Á≠îÊ°à„ÄÇ",
        "ÊØèÂ§©‰∏ÄÈªûÈªûÈÄ≤Ê≠•ÔºåÁ¥ØÁ©çÊàêÂÅ•Â∫∑Â§ßÊàêÂäüÔºÅ",
        "ÂæÆÁ¨ëÊòØÊúÄÂ•ΩÁöÑËâØËó•Ôºå‰øùÊåÅÂ•ΩÂøÉÊÉÖÂñîÔºÅ",
        "Â§öÂñùÊ∞¥ÔºåÂ§öÈÅãÂãïÔºå‰øùÊåÅÂ•ΩÂøÉÊÉÖÔºÅüíñ",
        "ÂÅ•Â∫∑ÊòØË≤°ÂØåÔºåËÄåË®òÈåÑÊòØÁ¥ØÁ©çË≤°ÂØåÁöÑÈÅéÁ®ã„ÄÇ",
        "ËÆìÂÅ•Â∫∑ÊàêÁÇ∫‰∏ÄÁ®ÆÁøíÊÖ£ÔºåËÄå‰∏çÊòØ‰∏ÄÊôÇÁöÑÂä™Âäõ„ÄÇ"
    ]
    random_quote = random.choice(health_quotes)

    st.write(f"### {greeting}")
    st.markdown(f"<p style='font-family: \"Comic Sans MS\", \"Arial Rounded MT Bold\", sans-serif; color: #8b0000; font-size: 1.0em; text-align: left; margin-top: 0; font-weight: bold;'>{random_quote}</p>", unsafe_allow_html=True)
    st.write("---")

    st.subheader("üìä ÊÇ®ÁöÑÂÅ•Â∫∑Ê¶ÇË¶Ω")
    st.write("Âú®ÈÄôË£°ÔºåÊÇ®ÂèØ‰ª•Âø´ÈÄüÊéåÊè°ÊúÄÊñ∞ÁöÑÂÅ•Â∫∑Êï∏ÊìöÔºåËºïÈ¨Ü‰∫ÜËß£Ëá™Â∑±ÁöÑË∫´È´îËÆäÂåñÔºÅ")

    if not df_history.empty:
        # Á¢∫‰øùÊó•ÊúüÊòØ datetime.date Â∞çË±°Ôºå‰ª•‰æøÊéíÂ∫èÂíåÈ°ØÁ§∫
        df_history['Êó•Êúü'] = pd.to_datetime(df_history['Êó•Êúü']).dt.date
        df_history_sorted = df_history.sort_values(by='Êó•Êúü', ascending=True)

        # Áç≤ÂèñÊúÄÊñ∞‰∏ÄÁ≠ÜÁ¥ÄÈåÑ
        latest_record = df_history_sorted.iloc[-1]

        # È°ØÁ§∫ÊúÄËøëÁöÑÂÅ•Â∫∑Ê¶ÇË¶ΩÊï∏Êìö
        st.markdown(f"<p style='font-size: 1.1em;'>**üóìÔ∏è ÊúÄËøëÁ¥ÄÈåÑÊó•Êúü:** <span style='color: #8b0000; font-weight: bold;'>{latest_record['Êó•Êúü']}</span></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 1.1em;'>**‚öñÔ∏è ÊúÄÊñ∞È´îÈáç:** <span style='color: #8b0000; font-weight: bold;'>{latest_record['È´îÈáç(kg)']:.1f} kg</span></p>", unsafe_allow_html=True)

        if 'BMI' in latest_record and pd.notna(latest_record['BMI']):
            st.markdown(f"<p style='font-size: 1.1em;'>**üìè ÊúÄÊñ∞ BMI:** <span style='color: #8b0000; font-weight: bold;'>{latest_record['BMI']:.2f}</span></p>", unsafe_allow_html=True)
        if 'È´îËÑÇËÇ™Áéá' in latest_record and pd.notna(latest_record['È´îËÑÇËÇ™Áéá']):
            st.markdown(f"<p style='font-size: 1.1em;'>**üí™ ÊúÄÊñ∞È´îËÑÇÁéá:** <span style='color: #8b0000; font-weight: bold;'>{latest_record['È´îËÑÇËÇ™Áéá']:.1f} %</span></p>", unsafe_allow_html=True)
        
        # Êñ∞Â¢ûÂü∫Á§é‰ª£Ë¨ù (BMR)
        # Âæû session state Áç≤ÂèñÂπ¥ÈΩ°ÂíåÊÄßÂà•ÔºåÁî®Êñº BMR Ë®àÁÆó
        user_age = st.session_state.get('age', 25) # È†êË®≠Âπ¥ÈΩ°
        user_gender = st.session_state.get('gender', 'Áî∑ÊÄß') # È†êË®≠ÊÄßÂà•
        
        # Á¢∫‰øùÊúâÊúâÊïàÁöÑÈ´îÈáçÂíåË∫´È´ò‰æÜË®àÁÆó BMR
        if pd.notna(latest_record['È´îÈáç(kg)']) and pd.notna(latest_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)']) and latest_record['È´îÈáç(kg)'] > 0 and latest_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)'] > 0:
            bmr_value, _ = calculate_bmr_tdee(user_gender, latest_record['È´îÈáç(kg)'], latest_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)'], user_age, "‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)")
            st.markdown(f"<p style='font-size: 1.1em;'>**‚ö° Âü∫Á§é‰ª£Ë¨ùÁéá (BMR):** <span style='color: #8b0000; font-weight: bold;'>{bmr_value:.0f} kcal</span></p>", unsafe_allow_html=True)


        # È´îÈáçËÆäÂåñË∂®Âã¢Âúñ (ÊîπÁÇ∫Âç°ÈÄöÈ¢®Ê†ºÂπ≥ÊªëÊäòÁ∑öÂúñ)
        if len(df_history_sorted) > 1: # Ëá≥Â∞ëÊúâÂÖ©Á≠ÜË≥áÊñôÊâçÈÅ©ÂêàÁπ™Ë£ΩË∂®Âã¢Âúñ
            st.subheader("üìà È´îÈáçËÆäÂåñË∂®Âã¢")
            st.write("ÈÄèÈÅéÂúñË°®ÔºåÊÇ®ÂèØ‰ª•Ê∏ÖÊ•öÁúãÂà∞È´îÈáçÁöÑËÆäÂåñËªåË∑°Ôºå‰ª•ÂèäËàáÁõÆÊ®ôÈ´îÈáçÁöÑÂ∑ÆË∑ù„ÄÇ")
            # Á¢∫‰øùÊó•ÊúüÊòØÂîØ‰∏ÄÁöÑÔºåËã•ÊúâÂ§öÁ≠ÜÂêåÊó•Êï∏ÊìöÔºåÂèñÊúÄÂæå‰∏ÄÁ≠Ü
            df_weight = df_history_sorted.drop_duplicates(subset=['Êó•Êúü'], keep='last').copy()
            df_weight['Êó•Êúü_dt'] = pd.to_datetime(df_weight['Êó•Êúü']) # ËΩâÊèõÁÇ∫ datetime È°ûÂûã
            
            # Á¢∫‰øù 'ÁõÆÊ®ôÈ´îÈáç(kg)' Ê¨Ñ‰ΩçÂ≠òÂú®‰∏îÁÇ∫Êï∏ÂÄºÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂâáÂ°´ÂÖÖÁÇ∫ 0.0
            if 'ÁõÆÊ®ôÈ´îÈáç(kg)' not in df_weight.columns:
                 df_weight['ÁõÆÊ®ôÈ´îÈáç(kg)'] = 0.0 # È†êË®≠ÂÄº
            df_weight['ÁõÆÊ®ôÈ´îÈáç(kg)'] = pd.to_numeric(df_weight['ÁõÆÊ®ôÈ´îÈáç(kg)'], errors='coerce').fillna(0)


            fig_weight = px.line(df_weight, x='Êó•Êúü_dt', y=['È´îÈáç(kg)', 'ÁõÆÊ®ôÈ´îÈáç(kg)'],
                                  color_discrete_sequence=[CUTE_COLORS[1], CUTE_COLORS[4]], # ËúúÊ°ÉÁ≤âÂíåÊ∑∫Ëóç
                                  labels={'value': 'È´îÈáç(kg)', 'variable': 'È°ûÂûã'},
                                  title='È´îÈáçËÆäÂåñË∂®Âã¢',
                                  markers=True) # È°ØÁ§∫Ê®ôË®òÈªû

            fig_weight.update_traces(mode='lines+markers', line=dict(width=3), # Á≤óÁ∑öÊ¢ù
                                     marker=dict(size=10, symbol='circle', # ÂèØÊÑõÂúìÈªû
                                                 line=dict(width=2, color='white')), # ÁôΩËâ≤ÈÇäÊ°Ü
                                     hoverlabel=dict(bgcolor="white", font_size=12, font_family="Arial Rounded MT Bold"))
            fig_weight.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                xaxis_title="Êó•Êúü",
                yaxis_title="È´îÈáç (kg)",
                legend_title_text="",
                hovermode="x unified" # Áµ±‰∏ÄÊá∏ÂÅúÊïàÊûú
            )
            st.plotly_chart(fig_weight, use_container_width=True, key="home_weight_chart")
        else:
            st.info("Ëá≥Â∞ëÈúÄË¶ÅÂÖ©Á≠ÜÁ¥ÄÈåÑÊâçËÉΩÁπ™Ë£ΩÈ´îÈáçË∂®Âã¢ÂúñÔºåÂä†Ê≤πÂñîÔºÅ")

    else:
        st.info("ÊÇ®ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÁ¥ÄÈåÑÔºåË´ãÂâçÂæÄ 'Êñ∞Â¢ûÁ¥ÄÈåÑ' È†ÅÈù¢Ê∑ªÂä†„ÄÇÂÅ•Â∫∑Êó•Ë®òÊúüÂæÖÊÇ®ÁöÑÁ¨¨‰∏ÄÁ≠ÜÁ¥ÄÈåÑÔºÅ")

    st.markdown("---")
    st.info("ÂÅ•Â∫∑Â∞èÊèêÁ§∫ÔºöÂ§öÂñùÊ∞¥ÔºåÂ§öÈÅãÂãïÔºå‰øùÊåÅÂ•ΩÂøÉÊÉÖÔºÅüíñ")
    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)

def add_record_page():
    # Removed specific anchor here, using global 'app_top'

    st.header("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
    st.write("ÊØè‰∏Ä‰ªΩÁî®ÂøÉÁ¥ÄÈåÑÔºåÈÉΩÊòØÂ∞çÂÅ•Â∫∑ÁöÑÊäïË≥áÔºÅ‰ªäÂ§©Êúâ‰ªÄÈ∫ºÊñ∞ÁôºÁèæÂë¢Ôºü")
    st.write("---")

    # ÂàùÂßãÂåñ meal_food_list Âà∞ session state
    if 'breakfast_food_list' not in st.session_state:
        st.session_state.breakfast_food_list = []
    if 'lunch_food_list' not in st.session_state:
        st.session_state.lunch_food_list = []
    if 'dinner_food_list' not in st.session_state:
        st.session_state.dinner_food_list = []

    # ÂàùÂßãÂåñÂÑ≤Â≠òË®àÊï∏Âô® (Áî®ÊñºÂúñË°® key ÁöÑÂîØ‰∏ÄÊÄß)
    if 'save_counter' not in st.session_state:
        st.session_state.save_counter = 0

    # --- È£≤È£üÁ¥ÄÈåÑ (Êï¥ÂêàÊñ∞Â¢ûÈ£üÁâ©ÂçÄÂ°ä) ---
    st.subheader("üç± È£≤È£üÁ¥ÄÈåÑ")
    st.write("ÂæûË±êÂØåÁöÑÈ£üÁâ©Ë≥áÊñôÂ∫´‰∏≠ÈÅ∏ÊìáÊÇ®‰ªäÊó•ÊâÄÈ£üÁî®ÁöÑÈ§êÈªûÔºåËºïÈ¨ÜË®àÁÆóÁÜ±ÈáèÔºÅ")

    # ÈÅ∏ÊìáÈ£üÁâ©ÂàÜÈ°û (ÂÑ™ÂåñÈ°ØÁ§∫)
    all_categories = sorted(list(set([data["category"] for data in st.session_state.food_database.values()])))
    food_categories_options = ["ÊâÄÊúâÂàÜÈ°û"] + all_categories
    selected_category = st.selectbox("ÈÅ∏ÊìáÈ£üÁâ©ÂàÜÈ°û", food_categories_options, key="food_category_select")

    # Ê†πÊìöÂàÜÈ°ûÁØ©ÈÅ∏È£üÁâ©ÈÅ∏È†Ö
    filtered_food_options = []
    if selected_category == "ÊâÄÊúâÂàÜÈ°û":
        filtered_food_options = sorted(list(st.session_state.food_database.keys()))
    else:
        filtered_food_options = sorted([name for name, data in st.session_state.food_database.items() if data["category"] == selected_category])

    # ÈÅ∏ÊìáË¶ÅÊñ∞Â¢ûÁöÑÈ£üÁâ©ÂíåÈ§êÂà•
    col_food_select, col_meal_type = st.columns([0.7, 0.3])
    with col_food_select:
        food_to_add_name = st.selectbox("ÈÅ∏ÊìáË¶ÅÊñ∞Â¢ûÁöÑÈ£üÁâ©", [""] + filtered_food_options, key="food_to_add_selectbox")
    with col_meal_type:
        meal_type_selection = st.selectbox("Êñ∞Â¢ûÂà∞", ["", "Êó©È§ê", "ÂçàÈ§ê", "ÊôöÈ§ê"], key="meal_type_select")

    if st.button("Â∞áÈ£üÁâ©Êñ∞Â¢ûÂà∞È§êÈªû", key="add_food_to_meal_button"):
        if food_to_add_name and meal_type_selection:
            if meal_type_selection == "Êó©È§ê":
                if food_to_add_name not in st.session_state.breakfast_food_list:
                    st.session_state.breakfast_food_list.append(food_to_add_name)
                    st.success(f"'{food_to_add_name}' Â∑≤Êñ∞Â¢ûÂà∞Êó©È§êÔºÅ")
                else:
                    st.warning(f"'{food_to_add_name}' Â∑≤Âú®Êó©È§êÊ∏ÖÂñÆ‰∏≠„ÄÇ")
            elif meal_type_selection == "ÂçàÈ§ê":
                if food_to_add_name not in st.session_state.lunch_food_list:
                    st.session_state.lunch_food_list.append(food_to_add_name)
                    st.success(f"'{food_to_add_name}' Â∑≤Êñ∞Â¢ûÂà∞ÂçàÈ§êÔºÅ")
                else:
                    st.warning(f"'{food_to_add_name}' Â∑≤Âú®ÂçàÈ§êÊ∏ÖÂñÆ‰∏≠„ÄÇ")
            elif meal_type_selection == "ÊôöÈ§ê":
                if food_to_add_name not in st.session_state.dinner_food_list:
                    st.session_state.dinner_food_list.append(food_to_add_name)
                    st.success(f"'{food_to_add_name}' Â∑≤Êñ∞Â¢ûÂà∞ÊôöÈ§êÔºÅ")
                else:
                    st.warning(f"'{food_to_add_name}' Â∑≤Âú®ÊôöÈ§êÊ∏ÖÂñÆ‰∏≠„ÄÇ")
            
            # Ë®≠ÂÆöÈ†ÅÈù¢Á¥¢ÂºïÔºåÂ∞éÂêëÊñ∞Â¢ûÁ¥ÄÈåÑÈ†ÅÈù¢ (Á¥¢ÂºïÁÇ∫ 1)
            st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
            st.rerun() # Âº∑Âà∂ÈáçÈÅãË°å‰ª•Êõ¥Êñ∞È°ØÁ§∫‰∏¶ÂÅúÁïôÂú®Êñ∞Â¢ûÁ¥ÄÈåÑ Tab
        else:
            st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÊñ∞Â¢ûÁöÑÈ£üÁâ©ÂíåÈ§êÂà•„ÄÇ")
    
    st.markdown("---")

    # È°ØÁ§∫ÂêÑÈ§êÁöÑÈ£üÁâ©Ê∏ÖÂñÆ (ÂåÖÂê´ÁßªÈô§ÂñÆÈ†ÖÈ£üÁâ©ÂäüËÉΩ)
    col_meals_display1, col_meals_display2, col_meals_display3 = st.columns(3)
    
    with col_meals_display1:
        st.subheader("Êó©È§êÊ∏ÖÂñÆ üçû")
        if st.session_state.breakfast_food_list:
            # Display foods as chips
            food_chips_html = ''.join([
                f'<span class="food-chip">{food} ({st.session_state.food_database.get(food, {}).get("calories", "N/A")} Â§ßÂç°)</span>'
                for food in st.session_state.breakfast_food_list
            ])
            st.markdown(f"<div class='food-chips-container'>{food_chips_html}</div>", unsafe_allow_html=True)

            # Option to remove individual food
            food_to_remove_breakfast = st.selectbox(
                "ÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÊó©È§êÈ£üÁâ©",
                [""] + st.session_state.breakfast_food_list,
                key="remove_foods_breakfast_selectbox"
            )
            if st.button("ÁßªÈô§ÈÅ∏ÂÆöÊó©È§êÈ£üÁâ©", key="remove_selected_breakfast_button"):
                if food_to_remove_breakfast and food_to_remove_breakfast in st.session_state.breakfast_food_list:
                    st.session_state.breakfast_food_list.remove(food_to_remove_breakfast)
                    st.success(f"'{food_to_remove_breakfast}' Â∑≤ÂæûÊó©È§êÁßªÈô§„ÄÇ")
                    st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                    st.rerun()
                else:
                    st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÊó©È§êÈ£üÁâ©„ÄÇ")
            
            # Clear all button
            if st.button("Ê∏ÖÁ©∫Êó©È§ê", key="clear_breakfast_button", help="ÈªûÊìäÊ≠§ÊåâÈàïÂ∞áÊ∏ÖÁ©∫ÊâÄÊúâÊó©È§êÁ¥ÄÈåÑ"):
                st.session_state.breakfast_food_list = []
                st.success("Êó©È§êÊ∏ÖÂñÆÂ∑≤Ê∏ÖÁ©∫„ÄÇ")
                st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                st.rerun()
        else:
            st.info("Êó©È§êÂ∞öÊú™Êñ∞Â¢ûÈ£üÁâ©„ÄÇ")

    with col_meals_display2:
        st.subheader("ÂçàÈ§êÊ∏ÖÂñÆ üçù")
        if st.session_state.lunch_food_list:
            # Display foods as chips
            food_chips_html = ''.join([
                f'<span class="food-chip">{food} ({st.session_state.food_database.get(food, {}).get("calories", "N/A")} Â§ßÂç°)</span>'
                for food in st.session_state.lunch_food_list
            ])
            st.markdown(f"<div class='food-chips-container'>{food_chips_html}</div>", unsafe_allow_html=True)

            food_to_remove_lunch = st.selectbox(
                "ÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÂçàÈ§êÈ£üÁâ©",
                [""] + st.session_state.lunch_food_list,
                key="remove_foods_lunch_selectbox"
            )
            if st.button("ÁßªÈô§ÈÅ∏ÂÆöÂçàÈ§êÈ£üÁâ©", key="remove_selected_lunch_button"):
                if food_to_remove_lunch and food_to_remove_lunch in st.session_state.lunch_food_list:
                    st.session_state.lunch_food_list.remove(food_to_remove_lunch)
                    st.success(f"'{food_to_remove_lunch}' Â∑≤ÂæûÂçàÈ§êÁßªÈô§„ÄÇ")
                    st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                    st.rerun()
                else:
                    st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÂçàÈ§êÈ£üÁâ©„ÄÇ")
            if st.button("Ê∏ÖÁ©∫ÂçàÈ§ê", key="clear_lunch_button", help="ÈªûÊìäÊ≠§ÊåâÈàïÂ∞áÊ∏ÖÁ©∫ÊâÄÊúâÂçàÈ§êÁ¥ÄÈåÑ"):
                st.session_state.lunch_food_list = []
                st.success("ÂçàÈ§êÊ∏ÖÂñÆÂ∑≤Ê∏ÖÁ©∫„ÄÇ")
                st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                st.rerun()
        else:
            st.info("ÂçàÈ§êÂ∞öÊú™Êñ∞Â¢ûÈ£üÁâ©„ÄÇ")

    with col_meals_display3:
        st.subheader("ÊôöÈ§êÊ∏ÖÂñÆ üçú")
        if st.session_state.dinner_food_list:
            # Display foods as chips
            food_chips_html = ''.join([
                f'<span class="food-chip">{food} ({st.session_state.food_database.get(food, {}).get("calories", "N/A")} Â§ßÂç°)</span>'
                for food in st.session_state.dinner_food_list
            ])
            st.markdown(f"<div class='food-chips-container'>{food_chips_html}</div>", unsafe_allow_html=True)

            food_to_remove_dinner = st.selectbox(
                "ÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÊôöÈ§êÈ£üÁâ©",
                [""] + st.session_state.dinner_food_list,
                key="remove_foods_dinner_selectbox"
            )
            if st.button("ÁßªÈô§ÈÅ∏ÂÆöÊôöÈ§êÈ£üÁâ©", key="remove_selected_dinner_button"):
                if food_to_remove_dinner and food_to_remove_dinner in st.session_state.dinner_food_list:
                    st.session_state.dinner_food_list.remove(food_to_remove_dinner)
                    st.success(f"'{food_to_remove_dinner}' Â∑≤ÂæûÊôöÈ§êÁßªÈô§„ÄÇ")
                    st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                    st.rerun()
                else:
                    st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÁßªÈô§ÁöÑÊôöÈ§êÈ£üÁâ©„ÄÇ")
            if st.button("Ê∏ÖÁ©∫ÊôöÈ§ê", key="clear_dinner_button", help="ÈªûÊìäÊ≠§ÊåâÈàïÂ∞áÊ∏ÖÁ©∫ÊâÄÊúâÊôöÈ§êÁ¥ÄÈåÑ"):
                st.session_state.dinner_food_list = []
                st.success("ÊôöÈ§êÊ∏ÖÂñÆÂ∑≤Ê∏ÖÁ©∫„ÄÇ")
                st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
                st.rerun()
        else:
            st.info("ÊôöÈ§êÂ∞öÊú™Êñ∞Â¢ûÈ£üÁâ©„ÄÇ")

    # Ê†πÊìö session state ‰∏≠ÁöÑÈ£üÁâ©ÂàóË°®ÈáçÊñ∞Ë®àÁÆóÁ∏ΩÁÜ±Èáè
    breakfast_cal, _ = calculate_meal_calories(st.session_state.breakfast_food_list, st.session_state.food_database)
    lunch_cal, _ = calculate_meal_calories(st.session_state.lunch_food_list, st.session_state.food_database)
    dinner_cal, _ = calculate_meal_calories(st.session_state.dinner_food_list, st.session_state.food_database)

    total_daily_intake_calories = breakfast_cal + lunch_cal + dinner_cal
    st.metric("‰ªäÊó•Á∏ΩÊîùÂèñÁÜ±Èáè", f"{total_daily_intake_calories} Â§ßÂç°", help="ÊâÄÊúâÈ§êÈªûÁöÑÁÜ±ÈáèÁ∏ΩÂíå")


    st.markdown("---")

    # --- ÈÅãÂãïÁ¥ÄÈåÑËàáÂª∫Ë≠∞ ---
    st.subheader("üèÉ‚Äç‚ôÇÔ∏è ÈÅãÂãïÁ¥ÄÈåÑËàáÂª∫Ë≠∞")
    st.write("‰ªäÂ§©ÊÇ®ÊåëÊà∞‰∫ÜÂì™‰∫õÈÅãÂãïÂë¢ÔºüË®òÈåÑ‰∏ã‰æÜÔºåÊÑüÂèóÁáÉÁáíËÑÇËÇ™ÁöÑÂø´ÊÑüÔºÅ")
    selected_exercises = st.multiselect("ÈÅ∏ÊìáÈÅãÂãïÈ°ûÂûã", list(st.session_state.exercise_calories_per_min.keys()), help="ÂèØ‰ª•ÈÅ∏ÊìáÂ§öÁ®ÆÈÅãÂãïÂñîÔºÅ")
    exercise_calories_burned = 0
    exercise_details = {}

    for exercise in selected_exercises:
        minutes = st.number_input(f"{exercise} ÊôÇÈñì (ÂàÜÈêò)", min_value=0, value=0, key=f"ex_{exercise}", help=f"ÊØèÂàÜÈêòÁ¥ÑÊ∂àËÄó {st.session_state.exercise_calories_per_min[exercise]} Â§ßÂç°")
        if minutes > 0:
            burned = minutes * st.session_state.exercise_calories_per_min[exercise]
            exercise_calories_burned += burned
            exercise_details[exercise] = minutes

    st.metric("‰ªäÊó•ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè", f"{exercise_calories_burned} Â§ßÂç°", help="ÊÇ®‰ªäÊó•ÈÅãÂãïÊâÄÊ∂àËÄóÁöÑÁ∏ΩÁÜ±Èáè")
    
    st.markdown("---")

    # --- BMI ËàáÈ´îËÑÇÂàÜÊûê ---
    st.subheader("üìè BMI ËàáÈ´îËÑÇÂàÜÊûê")
    st.write("Ëº∏ÂÖ•ÊÇ®ÁöÑË∫´È´îÊï∏ÊìöÔºåÂ∞áÁÇ∫ÊÇ®Ë®àÁÆó BMI ÂíåÈ´îËÑÇËÇ™ÁéáÔºå‰∏¶Áµ¶Âá∫Ë≤ºÂøÉÂª∫Ë≠∞ÔºÅ")
    col_bmi1, col_bmi2, col_bmi3 = st.columns(3)
    with col_bmi1:
        height = st.number_input("Ë∫´È´ò (ÂÖ¨ÂàÜ)", min_value=50.0, max_value=250.0, value=170.0, step=0.1, key="add_record_height", help="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑË∫´È´òÔºåÂñÆ‰ΩçÁÇ∫ÂÖ¨ÂàÜ")
    with col_bmi2:
        weight = st.number_input("È´îÈáç (ÂÖ¨Êñ§)", min_value=10.0, max_value=200.0, value=65.0, step=0.1, key="add_record_weight", help="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÈ´îÈáçÔºåÂñÆ‰ΩçÁÇ∫ÂÖ¨Êñ§")
    with col_bmi3:
        gender = st.selectbox("ÊÄßÂà•", ["Áî∑ÊÄß", "Â•≥ÊÄß"], key="add_record_gender", help="ÈÅ∏ÊìáÊÇ®ÁöÑÊÄßÂà•‰ª•Áç≤ÂæóÊõ¥Á≤æÁ¢∫ÁöÑÈ´îËÑÇÁéáË®àÁÆó")

    bmi = 0.0
    body_fat_rate = 0.0
    bmi_advice = ""

    if height > 0 and weight > 0:
        bmi = weight / ((height / 100) ** 2)
        st.write(f"ÊÇ®ÁöÑ BMI: **{bmi:.2f}**")

        # ‰øÆÊ≠£ÂæåÁöÑÈ´îËÑÇËÇ™ÁéáË®àÁÆóÂÖ¨Âºè
        if gender == "Áî∑ÊÄß":
            body_fat_rate = (1.20 * bmi) + (0.23 * st.session_state.get('age', 25)) - 16.2
        else: # Â•≥ÊÄß
            body_fat_rate = (1.20 * bmi) + (0.23 * st.session_state.get('age', 25)) - 5.4
        
        # È´îËÑÇÁéá‰∏çËÉΩÁÇ∫Ë≤†Êï∏
        if body_fat_rate < 0:
            body_fat_rate = 0.0
        
        st.write(f"ÊÇ®ÁöÑÈ´îËÑÇËÇ™Áéá: **{body_fat_rate:.2f}%**")

        if bmi < 18.5:
            bmi_advice = "È´îÈáçÈÅéËºïÔºåË¶ÅÂ§öÂêÉ‰∏ÄÈªûÁáüÈ§äÂÅ•Â∫∑ÁöÑÈ£üÁâ©ÔºåËÆìË∫´È´îÊõ¥Âº∑Â£ØÂñîÔºÅ"
        elif 18.5 <= bmi < 24:
            bmi_advice = "ÊÅ≠ÂñúÔºÅÊÇ®ÁöÑÈ´îÈáçÈùûÂ∏∏Ê®ôÊ∫ñÔºåÁπºÁ∫å‰øùÊåÅÂÅ•Â∫∑ÁöÑÁîüÊ¥ªÁøíÊÖ£ÔºÅü•≥"
        elif 24 <= bmi < 27:
            bmi_advice = "È´îÈáçÁï•ÂæÆÈÅéÈáçÔºåÈÄèÈÅéÈ£≤È£üË™øÊï¥ÂíåÈÅ©Â∫¶ÈÅãÂãïÔºåÂæàÂø´Â∞±ËÉΩÊÅ¢Âæ©ÁêÜÊÉ≥ÁãÄÊÖãÔºÅüí™"
        elif 27 <= bmi < 30:
            bmi_advice = "ËºïÂ∫¶ËÇ•ËÉñÔºåÊòØÊôÇÂÄôÈñãÂßãÁÇ∫ÂÅ•Â∫∑Âä™Âäõ‰∫ÜÔºåÂ∞ãÊ±ÇÂ∞àÊ•≠Âª∫Ë≠∞ÊúÉÂæàÊúâÂπ´Âä©ÂñîÔºÅ"
        elif 30 <= bmi < 35:
            bmi_advice = "‰∏≠Â∫¶ËÇ•ËÉñÔºåÁÇ∫‰∫ÜÊÇ®ÁöÑÂÅ•Â∫∑ÔºåÂª∫Ë≠∞Á©çÊ•µÊ∏õÈáç‰∏¶Â∞ãÊ±ÇÈÜ´ÁôÇÂçîÂä©„ÄÇÂÅ•Â∫∑Êó•Ë®òÊúÉÊîØÊåÅÊÇ®ÔºÅ"
        else:
            bmi_advice = "ÈáçÂ∫¶ËÇ•ËÉñÔºåË´ãÂãôÂøÖÁ´ãÂç≥Â∞ãÊ±ÇÂ∞àÊ•≠ÈÜ´ÁôÇÂçîÂä©ÔºåÂÅ•Â∫∑ÊòØÁ¨¨‰∏Ä‰ΩçÁöÑÔºÅ"
        st.info(f"ÂÅ•Â∫∑Âª∫Ë≠∞: {bmi_advice}")
    
    st.markdown("---")

    # --- Â§©Ê∞£Ë≥áË®ä ---
    st.subheader("üå¶ Â§©Ê∞£Ë≥áË®äËàáÈÅãÂãïÂª∫Ë≠∞")
    st.write("Âç≥ÊôÇÊü•ÁúãÊÇ®ÊâÄÂú®ÂüéÂ∏ÇÁöÑÂ§©Ê∞£ÔºåÂ∞áÁÇ∫ÊÇ®Êé®Ëñ¶ÊúÄÈÅ©ÂêàÁöÑÈÅãÂãïÊñπÂºèÔºÅ")
    taiwan_cities = {
        "Âè∞ÂåóÂ∏Ç": "Taipei", "Êñ∞ÂåóÂ∏Ç": "New Taipei", "Ê°ÉÂúíÂ∏Ç": "Taoyuan",
        "Âè∞‰∏≠Â∏Ç": "Taichung", "Âè∞ÂçóÂ∏Ç": "Tainan", "È´òÈõÑÂ∏Ç": "Kaohsiung",
        "Âü∫ÈöÜÂ∏Ç": "Keelung", "Êñ∞Á´πÂ∏Ç": "Hsinchu", "ÂòâÁæ©Â∏Ç": "Chiayi",
        "Êñ∞Á´πÁ∏£": "Hsinchu County", "ËãóÊ†óÁ∏£": "Miaoli County", "ÂΩ∞ÂåñÁ∏£": "Changhua County",
        "ÂçóÊäïÁ∏£": "Nantou County", "Èõ≤ÊûóÁ∏£": "Yunlin County", "ÂòâÁæ©Á∏£": "Chiayi County",
        "Â±èÊù±Á∏£": "Pingtung County", "ÂÆúËò≠Á∏£": "Yilan County", "Ëä±ËìÆÁ∏£": "Hualien",
        "Âè∞Êù±Á∏£": "Taitung County", "ÊæéÊπñÁ∏£": "Penghu", "ÈáëÈñÄÁ∏£": "Kinmen", "ÈÄ£Ê±üÁ∏£": "Lienchiang"
    }
    selected_city_chinese = st.selectbox("ÈÅ∏ÊìáÂüéÂ∏Ç", list(taiwan_cities.keys()), index=list(taiwan_cities.keys()).index("Ëä±ËìÆÁ∏£"), key="weather_city_select", help="ÈÅ∏ÊìáÊÇ®ÊÉ≥Êü•Ë©¢Â§©Ê∞£ÁöÑÂè∞ÁÅ£ÂüéÂ∏Ç")
    selected_city_english = taiwan_cities[selected_city_chinese]

    # --- ÈáçË¶ÅÊèêÁ§∫ÔºöË´ãÊõøÊèõÊÇ®ÁöÑ OpenWeatherMap API Key ---
    # ÊÇ®ÂèØ‰ª•Âú®ÈÄôË£°ÊõøÊèõÊÇ®ÁöÑ OpenWeatherMap API Key„ÄÇ
    # Â¶ÇÊûúÊÇ®Ê≤íÊúâÔºåË´ãÂâçÂæÄ https://openweathermap.org/api Ë®ªÂÜäÁç≤Âèñ„ÄÇ
    # ÁÑ°ÊïàÊàñÁº∫Â§±ÁöÑ API Key Â∞áÂ∞éËá¥Â§©Ê∞£Ë≥áË®äÁÑ°Ê≥ïÁç≤Âèñ„ÄÇ
    weather_api_key = "038c4da459d3a855825837e76ebf49ff"  # <--- Ë´ãÂú®ÈÄôË£°ÊõøÊèõÁÇ∫ÊÇ®ÁöÑÊúâÊïà API KeyÔºåÁî®ÈõôÂºïËôüÂåÖËµ∑‰æÜ

    def get_weather(city, api_key):
        base_url = "http://api.openweathermap.org/data/2.5/weather?"
        complete_url = f"{base_url}q={city}&appid={api_key}&units=metric&lang=zh_tw"
        try:
            response = requests.get(complete_url)
            response.raise_for_status() # Ê™¢Êü• HTTP Ë´ãÊ±ÇÊòØÂê¶ÊàêÂäü (200 OK)
            data = response.json()
            if data["cod"] == 200:
                weather_desc = data["weather"][0]["description"]
                temp = data["main"]["temp"]
                return weather_desc, temp
            else:
                st.error(f"ÁÑ°Ê≥ïÂèñÂæóÂ§©Ê∞£Ë≥áË®ä: {data.get('message', 'Êú™Áü•ÈåØË™§')}„ÄÇË´ãÊ™¢Êü• API Key ÊàñÂüéÂ∏ÇÂêçÁ®±„ÄÇ")
                return "N/A", "N/A"
        except requests.exceptions.HTTPError as http_err:
            st.error(f"HTTP ÈåØË™§ÁôºÁîü: {http_err} (ÁãÄÊÖãÁ¢º: {response.status_code})„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑ OpenWeatherMap API Key ÊòØÂê¶ÊúâÊïà„ÄÇ")
            return "N/A", "N/A"
        except requests.exceptions.ConnectionError as conn_err:
            st.error(f"Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§: {conn_err}„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑÁ∂≤Ë∑ØÈÄ£Á∑ö„ÄÇ")
            return "N/A", "N/A"
        except requests.exceptions.Timeout as timeout_err:
            st.error(f"Ë´ãÊ±ÇË∂ÖÊôÇ: {timeout_err}„ÄÇË´ãÈáçË©¶ÊàñÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö„ÄÇ")
            return "N/A", "N/A"
        except requests.exceptions.RequestException as req_err:
            st.error(f"ÂëºÂè´Â§©Ê∞£ API ÊôÇÁôºÁîüÈåØË™§: {req_err}„ÄÇ")
            return "N/A", "N/A"
        except json.JSONDecodeError:
            st.error("Â§©Ê∞£ API ÂõûÂÇ≥ÁöÑË≥áÊñôÊ†ºÂºè‰∏çÊ≠£Á¢∫ÔºåÁÑ°Ê≥ïËß£Êûê„ÄÇ")
            return "N/A", "N/A"
        except Exception as e:
            st.error(f"ÂèñÂæóÂ§©Ê∞£Ë≥áË®äÊôÇÁôºÁîüÊú™Áü•ÈåØË™§: {e}„ÄÇ")
            return "N/A", "N/A"

    weather_desc, temperature = get_weather(selected_city_english, weather_api_key)
    st.info(f"ÁõÆÂâç {selected_city_chinese} ÁöÑÂ§©Ê∞£Ôºö{weather_desc}ÔºåÊ∞£Ê∫´Ôºö{temperature}¬∞C")
    st.markdown(f"**Â§©Ê∞£ÈÅãÂãïÂª∫Ë≠∞Ôºö** {get_weather_exercise_suggestion(weather_desc, temperature)}")


    st.markdown("---")

    # --- Á∏ΩÁµêËàáÁ¥ÄÈåÑÊåâÈàï ---
    st.subheader("üìù Á¥ÄÈåÑÁ∏ΩÁµê")
    st.write("Á¢∫Ë™çÊâÄÊúâÊï∏ÊìöÁÑ°Ë™§ÂæåÔºåÈªûÊìä‰∏ãÊñπÊåâÈàïÔºåÂ∞á‰ªäÊó•ÁöÑÂÅ•Â∫∑Âä™ÂäõÊ∞∏‰πÖ‰øùÂ≠òÔºÅ")

    net_calories = total_daily_intake_calories - exercise_calories_burned
    st.metric("‰ªäÊó•Ê∑®ÁÜ±Èáè", f"{net_calories} Â§ßÂç°", help="Á∏ΩÊîùÂèñÁÜ±ÈáèÊ∏õÂéªÈÅãÂãïÊ∂àËÄóÁÜ±Èáè")

    health_suggestion = ""
    if net_calories > 500:
        health_suggestion = "‰ªäÊó•ÁÜ±ÈáèÊîùÂèñÂèØËÉΩÂÅèÂ§öÔºåÂª∫Ë≠∞ÊòéÂ§©Â§öÂä†ÈÅãÂãïÊàñË™øÊï¥È£≤È£üÔºå‰øùÊåÅÂπ≥Ë°°ÂñîÔºÅ"
    elif net_calories < -500:
        health_suggestion = "‰ªäÊó•ÁÜ±ÈáèÊ∂àËÄóËºÉÂ§öÔºåË®òÂæóË£úÂÖÖÈÅ©ÈáèÁáüÈ§äÔºåËÆìË∫´È´îÊúâË∂≥Â§†ËÉΩÈáèÔºÅ"
    else:
        health_suggestion = "ÊÅ≠ÂñúÊÇ®ÔºÅ‰ªäÊó•ÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄóÈÅîÂà∞ËâØÂ•ΩÂπ≥Ë°°ÔºåÁπºÁ∫å‰øùÊåÅÈÄôÂÄãÂ•ΩÁøíÊÖ£ÔºÅ‚ú®"
    st.success(f"‰ªäÊó•ÂÅ•Â∫∑Âª∫Ë≠∞: {health_suggestion}")
    record_date = st.date_input("ÈÅ∏ÊìáÁ¥ÄÈåÑÊó•Êúü", datetime.date.today(), key="add_record_final_date", help="ÈÅ∏ÊìáÊÇ®ÊÉ≥Ë®òÈåÑÁöÑÊó•Êúü")

    if st.button("ÂÑ≤Â≠òÁ¥ÄÈåÑ", key="save_record_button"): # Á¢∫‰øùÊ≠§ÊåâÈàïÊúâÂîØ‰∏ÄÁöÑkey
        df_history = st.session_state.df_history # ‰ΩøÁî® session state ‰∏≠ÁöÑ df_history

        # Â∞áÊó•ÊúüÂæû datetime.date ËΩâÊèõÁÇ∫ datetime.datetime ‰ª•‰æøÈÄ≤Ë°åÊØîËºÉÂíåÂÑ≤Â≠ò
        record_datetime = datetime.datetime.combine(record_date, datetime.time.min)

        # Ê™¢Êü•ÊòØÂê¶Â∑≤Â≠òÂú®ÂêåÊó•ÊúüÁöÑÁ¥ÄÈåÑ
        existing_record_indices = df_history[df_history['Êó•Êúü'] == record_date].index
        
        breakfast_food_str = ", ".join(st.session_state.breakfast_food_list) if st.session_state.breakfast_food_list else "ÁÑ°"
        lunch_food_str = ", ".join(st.session_state.lunch_food_list) if st.session_state.lunch_food_list else "ÁÑ°"
        dinner_food_str = ", ".join(st.session_state.dinner_food_list) if st.session_state.dinner_food_list else "ÁÑ°"
        
        meal_content_str = f"Êó©È§ê: ({breakfast_food_str}), ÂçàÈ§ê: ({lunch_food_str}), ÊôöÈ§ê: ({dinner_food_str})"

        new_record_data = {
            'Êó•Êúü': record_date, # Áõ¥Êé•‰ΩøÁî® datetime.date Áâ©‰ª∂
            'È´îÈáç(kg)': weight,
            'ÁõÆÊ®ôÈ´îÈáç(kg)': st.session_state.get('target_weight', 0.0), # Âæû Session State Áç≤ÂèñÁõÆÊ®ôÈ´îÈáç
            'Ë∫´È´ò(ÂÖ¨ÂàÜ)': height,
            'ÊÄßÂà•': gender,
            'BMI': round(bmi, 2),
            'È´îËÑÇËÇ™Áéá': round(body_fat_rate, 2),
            'Á∏ΩÊîùÂèñÁÜ±Èáè': total_daily_intake_calories,
            'ÈÅãÂãïÈ°ûÂûã': ", ".join(exercise_details.keys()) if exercise_details else "ÁÑ°",
            'ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)': sum(exercise_details.values()) if exercise_details else 0,
            'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè': exercise_calories_burned,
            'Â§©Ê∞£ÂüéÂ∏Ç': selected_city_chinese,
            'Â§©Ê∞£Ë™™Êòé': weather_desc,
            'Ê∞£Ê∫´': temperature,
            'ÂÅ•Â∫∑Âª∫Ë≠∞': health_suggestion,
            'Á∏ΩÊ∑®ÁÜ±Èáè': net_calories,
            'È§êÈªûÂÖßÂÆπ': meal_content_str
        }

        # Â∞áÊñ∞Á¥ÄÈåÑËΩâÊèõÁÇ∫ DataFrameÔºå‰∏¶Á¢∫‰øùÂÖ∂ÂàóÈ†ÜÂ∫èËàáÁèæÊúâ DataFrame ‰∏ÄËá¥
        # ÂÆöÁæ©ÊâÄÊúâÈ†êÊúüÁöÑÂàóÂêçÔºåÈÄôËàá load_data ‰∏≠ÁöÑ columns Êáâ‰øùÊåÅ‰∏ÄËá¥
        expected_columns = [
            'Êó•Êúü', 'È´îÈáç(kg)', 'ÁõÆÊ®ôÈ´îÈáç(kg)', 'Ë∫´È´ò(ÂÖ¨ÂàÜ)', 'ÊÄßÂà•',
            'BMI', 'È´îËÑÇËÇ™Áéá', 'Á∏ΩÊîùÂèñÁÜ±Èáè', 'ÈÅãÂãïÈ°ûÂûã', 'ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)',
            'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè', 'Â§©Ê∞£ÂüéÂ∏Ç', 'Â§©Ê∞£Ë™™Êòé', 'Ê∞£Ê∫´', 'ÂÅ•Â∫∑Âª∫Ë≠∞', 'Á∏ΩÊ∑®ÁÜ±Èáè',
            'È§êÈªûÂÖßÂÆπ'
        ]
        new_record_df = pd.DataFrame([new_record_data], columns=expected_columns)


        if not existing_record_indices.empty:
            # Êõ¥Êñ∞ÁèæÊúâÁ¥ÄÈåÑ
            idx_to_update = existing_record_indices[0]
            for col, value in new_record_data.items():
                st.session_state.df_history.at[idx_to_update, col] = value
            st.success(f"Â∑≤ÊàêÂäüÊõ¥Êñ∞ {record_date} ÁöÑÂÅ•Â∫∑Á¥ÄÈåÑÔºÅÂ§™Ê£í‰∫ÜÔºÅüëè")
        else:
            # Êñ∞Â¢ûÁ¥ÄÈåÑ (‰ΩøÁî® pd.concat Á¢∫‰øùÂàó‰∏ÄËá¥ÊÄß)
            st.session_state.df_history = pd.concat([df_history, new_record_df], ignore_index=True)
            st.success("ÂÅ•Â∫∑Á¥ÄÈåÑÂ∑≤ÊàêÂäüÂÑ≤Â≠òÔºÅüéâ ÊØè‰∏ÄÂ§©ÁöÑÂ†ÖÊåÅÔºåÈÉΩÊòØÈÄöÂæÄÂÅ•Â∫∑ÁöÑÈáåÁ®ãÁ¢ëÔºÅ")
        
        save_data(st.session_state.df_history) # ÂÑ≤Â≠òÂà∞ CSV Êñá‰ª∂
        st.session_state.save_counter += 1 # ÂÑ≤Â≠òÊàêÂäüÂæåÂ¢ûÂä†Ë®àÊï∏Âô®
        st.balloons()
        # Ê∏ÖÁ©∫ session state ‰∏≠ÁöÑÈ£üÁâ©ÂàóË°®ÔºåÊ∫ñÂÇô‰∏ãÊ¨°Ëº∏ÂÖ•
        st.session_state.breakfast_food_list = []
        st.session_state.lunch_food_list = []
        st.session_state.dinner_food_list = []
        
        # Ë®≠ÂÆöÈ†ÅÈù¢Á¥¢ÂºïÔºåÂ∞éÂêëÊñ∞Â¢ûÁ¥ÄÈåÑÈ†ÅÈù¢ (Á¥¢ÂºïÁÇ∫ 1)
        st.session_state.current_page_index = page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ")
        st.rerun() # Âº∑Âà∂ÈáçÈÅãË°å‰ª•Êõ¥Êñ∞È°ØÁ§∫‰∏¶ÂÅúÁïôÂú®Êñ∞Â¢ûÁ¥ÄÈåÑ Tab

    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)

def data_analysis_page(df_history):
    # Removed specific anchor here, using global 'app_top'

    st.header("üìä ÁÜ±ÈáèÂúñË°®ÂàÜÊûê")
    st.write("ÈÄèÈÅéË¶ñË¶∫ÂåñÁöÑÊï∏ÊìöÂúñË°®ÔºåËºïÈ¨ÜÊ¥ûÊÇâÊÇ®ÁöÑÂÅ•Â∫∑Ê®°ÂºèËàáË∂®Âã¢ÔºÅ")
    st.write("---")

    if not df_history.empty:
        # Á¢∫‰øù df_history['Êó•Êúü'] ÊòØ datetime Â∞çË±°
        df_history['Êó•Êúü'] = pd.to_datetime(df_history['Êó•Êúü']).dt.date
        df_history_sorted = df_history.sort_values(by='Êó•Êúü', ascending=True)

        st.subheader("ÊØèÊó•ÁÜ±ÈáèÂúìÈ§ÖÂúñ (ÊúÄËøëÁ¥ÄÈåÑ)")
        st.write("ÈÄôÂºµÂúìÈ§ÖÂúñÂ∞áÂëàÁèæÊÇ®ÊúÄËøë‰∏ÄÊ¨°Á¥ÄÈåÑÁöÑÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄóÊØî‰æãÔºåÂπ´Âä©ÊÇ®‰∫ÜËß£Áï∂Êó•ËÉΩÈáèÂπ≥Ë°°„ÄÇ")
        if not df_history_sorted.empty:
            latest_record = df_history_sorted.iloc[-1]
            intake = latest_record['Á∏ΩÊîùÂèñÁÜ±Èáè'] if pd.notna(latest_record['Á∏ΩÊîùÂèñÁÜ±Èáè']) else 0
            burned = latest_record['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè'] if pd.notna(latest_record['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè']) else 0

            if intake == 0 and burned == 0:
                st.info("ÊúÄËøëÁ¥ÄÈåÑÁöÑÊîùÂèñËàáÊ∂àËÄóÁÜ±ÈáèÁöÜÁÇ∫Èõ∂ÔºåÁÑ°Ê≥ïÁπ™Ë£ΩÂúìÈ§ÖÂúñ„ÄÇË´ãÂÖàÂâçÂæÄÊñ∞Â¢ûÁ¥ÄÈåÑÈ†ÅÈù¢Â°´ÂØ´Ë≥áÊñôÂñîÔºÅ")
            else:
                fig_pie = go.Figure(data=[go.Pie(labels=['ÊîùÂèñÁÜ±Èáè', 'Ê∂àËÄóÁÜ±Èáè'],
                                                values=[intake, burned],
                                                hole=.3,
                                                marker_colors=[CUTE_COLORS[0], CUTE_COLORS[3]])]) # ‰ΩøÁî®ÂèØÊÑõÈ°èËâ≤
                # Á¢∫‰øùÊó•ÊúüÁâ©‰ª∂Ê≠£Á¢∫Ê†ºÂºèÂåñ
                latest_record_date_str = latest_record['Êó•Êúü'].strftime('%Y-%m-%d')
                fig_pie.update_layout(title_text=f"{latest_record_date_str} ÁÜ±ÈáèÂàÜ‰Ωà")
                # ‰ΩøÁî®Âü∫ÊñºÊúÄÊñ∞Á¥ÄÈåÑÊó•ÊúüÁöÑÂãïÊÖã keyÔºå‰∏¶Âä†ÂÖ•ÂÑ≤Â≠òË®àÊï∏Âô®Á¢∫‰øùÂîØ‰∏ÄÊÄß
                st.plotly_chart(fig_pie, key=f"data_analysis_pie_chart_{latest_record_date_str}_{st.session_state.get('save_counter', 0)}")
        else:
            st.info("Êö´ÁÑ°Ë∂≥Â§†Êï∏ÊìöÈ°ØÁ§∫ÊØèÊó•ÁÜ±ÈáèÂúìÈ§ÖÂúñ„ÄÇ")

        st.markdown("---")
        st.subheader("ÊØèÈÄ±ÁÜ±ÈáèË∂®Âã¢Âúñ")
        st.write("ÈÄèÈÅéÊØèÈÄ±ÁöÑÁÜ±ÈáèË∂®Âã¢ÂúñÔºåÊÇ®ÂèØ‰ª•ËßÄÂØüÈï∑ÊúüÁöÑËÉΩÈáèÊîùÂèñËàáÊ∂àËÄóËÆäÂåñÔºåÊòØÊÇ®Âà∂ÂÆöÂÅ•Â∫∑Ë®àÁï´ÁöÑÂ•ΩÂπ´ÊâãÔºÅ")
        # ÁÇ∫‰∫ÜÈÄ±Ë∂®Âã¢ÂúñÔºåÂ∞áÊó•ÊúüÁ¥¢ÂºïË®≠ÂÆöÁÇ∫ datetime.datetime
        df_weekly = df_history_sorted.set_index(pd.to_datetime(df_history_sorted['Êó•Êúü'])).resample('W').agg(
            {'Á∏ΩÊîùÂèñÁÜ±Èáè': 'sum', 'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè': 'sum', 'Á∏ΩÊ∑®ÁÜ±Èáè': 'sum'}
        ).reset_index()

        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(x=df_weekly['Êó•Êúü'], y=df_weekly['Á∏ΩÊîùÂèñÁÜ±Èáè'], mode='lines+markers', name='ÊîùÂèñÁÜ±Èáè',
                                       line=dict(color=CUTE_COLORS[0], width=3), marker=dict(size=8, symbol='circle')))
        fig_trend.add_trace(go.Scatter(x=df_weekly['Êó•Êúü'], y=df_weekly['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè'], mode='lines+markers', name='Ê∂àËÄóÁÜ±Èáè',
                                       line=dict(color=CUTE_COLORS[3], width=3), marker=dict(size=8, symbol='square')))
        fig_trend.add_trace(go.Scatter(x=df_weekly['Êó•Êúü'], y=df_weekly['Á∏ΩÊ∑®ÁÜ±Èáè'], mode='lines+markers', name='Ê∑®ÁÜ±Èáè',
                                       line=dict(color=CUTE_COLORS[8], width=3), marker=dict(size=8, symbol='diamond')))
        fig_trend.update_layout(
            title='ÊØèÈÄ±ÁÜ±ÈáèË∂®Âã¢', xaxis_title='Êó•Êúü', yaxis_title='ÁÜ±Èáè (Â§ßÂç°)',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            hovermode="x unified"
        )
        st.plotly_chart(fig_trend, key="data_analysis_trend_chart") # Ê∑ªÂä† key

        # --- ÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄóÊØîËºÉÂúñ & ÈÅãÂãïÈáèÂàÜ‰ΩàÂúñ (‰∏¶ÊéíÈ°ØÁ§∫) ---
        st.markdown("---")
        st.subheader("üìä ÊØèÊó•Êï∏ÊìöÁ¥∞Ë¶Ω")
        st.write("ÈÄô‰∫õÂúñË°®Â∞áÂπ´Âä©ÊÇ®Êõ¥Ê∑±ÂÖ•Âú∞‰∫ÜËß£ÊØèÊó•ÁöÑÁÜ±ÈáèÂπ≥Ë°°ÂíåÈÅãÂãïÁøíÊÖ£„ÄÇ")
        
        col_chart1, col_chart2 = st.columns(2) # ÂâµÂª∫ÂÖ©ÂÄã‰∏¶ÊéíÁöÑÊ¨Ñ‰Ωç

        with col_chart1:
            st.write("üî• **ÊØèÊó•ÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄóÊØîËºÉ**")
            st.write("ÈÄôÂºµÂúñË°®ËÆìÊÇ®‰∏ÄÁõÆÁû≠ÁÑ∂ÊØèÊó•ÊîùÂèñËàáÊ∂àËÄóÁöÑÁÜ±ÈáèÔºåÂπ´Âä©ÊÇ®Êõ¥Â•ΩÂú∞Âπ≥Ë°°ËÉΩÈáè„ÄÇ")
            # Âêà‰ΩµÊØèÂ§©ÁöÑÊîùÂèñËàáÊ∂àËÄóÔºåÁ¢∫‰øùÊó•ÊúüÊ≠£Á¢∫ÁÇ∫ datetime Áâ©‰ª∂
            daily_calories = df_history_sorted.copy()
            daily_calories['Êó•Êúü'] = pd.to_datetime(daily_calories['Êó•Êúü']) # ÂÜçÊ¨°Á¢∫‰øùÊòØ datetime
            daily_calories = daily_calories.groupby(pd.Grouper(key='Êó•Êúü', freq='D')).agg(
                {'Á∏ΩÊîùÂèñÁÜ±Èáè': 'sum', 'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè': 'sum'} # ‰ΩøÁî®Êñ∞ÂàóÂêç
            ).reset_index()

            # ÂÜçÊ¨°Á¢∫‰øùÁπ™ÂúñÂâçÁöÑÊï∏ÂÄºÂàóÈ°ûÂûãÊ≠£Á¢∫
            daily_calories['Á∏ΩÊîùÂèñÁÜ±Èáè'] = pd.to_numeric(daily_calories['Á∏ΩÊîùÂèñÁÜ±Èáè'], errors='coerce').fillna(0)
            daily_calories['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè'] = pd.to_numeric(daily_calories['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè'], errors='coerce').fillna(0)


            fig_calories = px.bar(daily_calories, x='Êó•Êúü', y=['Á∏ΩÊîùÂèñÁÜ±Èáè', 'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè'], # ‰ΩøÁî®Êñ∞ÂàóÂêç
                                   color_discrete_sequence=[CUTE_COLORS[0], CUTE_COLORS[3]], # Á≤âËâ≤ÂíåÊ∑∫Ëóç
                                   labels={'value': 'ÁÜ±Èáè(Â§ßÂç°)', 'variable': 'È°ûÂûã'},
                                   title='ÊØèÊó•ÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄó',
                                   barmode='group') # ‰∏¶ÊéíÈ°ØÁ§∫

            fig_calories.update_traces(marker_line_width=1, marker_line_color='white', # ÁôΩËâ≤ÊèèÈÇä
                                       marker_pattern_shape='.', # Â∞èÈªûÂ°´ÂÖÖ
                                       marker_color=None) # ËÆì color_discrete_sequence ÊéßÂà∂È°èËâ≤
            fig_calories.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                xaxis_title="Êó•Êúü",
                yaxis_title="ÁÜ±Èáè (Â§ßÂç°)",
                legend_title_text="",
                uniformtext_minsize=10, uniformtext_mode='hide',
                hoverlabel=dict(bgcolor="white", font_size=12, font_family="Arial Rounded MT Bold"),
                height=350 # Ë™øÊï¥ÂúñË°®È´òÂ∫¶‰ª•ÈÅ©Êáâ‰∏¶ÊéíÈ°ØÁ§∫
            )
            st.plotly_chart(fig_calories, use_container_width=True, key="data_analysis_calories_chart") # Êñ∞Â¢û key

        with col_chart2:
            st.write("ü§∏‚Äç‚ôÄÔ∏è **ÈÅãÂãïÈ†ÖÁõÆÂàÜ‰Ωà**")
            st.write("ÊÉ≥Áü•ÈÅìËá™Â∑±ÊúÄÂ∏∏Âæû‰∫ãÂì™‰∫õÈÅãÂãïÂóéÔºüÈÄôÂºµÂúñÊúÉÂëäË®¥ÊÇ®ÔºÅ")
            # ÊèêÂèñÊâÄÊúâÈÅãÂãïÊï∏Êìö‰∏¶Ë®àÊï∏
            all_exercises_names = []
            for index, row in df_history_sorted.iterrows():
                if pd.notna(row['ÈÅãÂãïÈ°ûÂûã']) and row['ÈÅãÂãïÈ°ûÂûã'] != '':
                    exercises = [e.strip() for e in row['ÈÅãÂãïÈ°ûÂûã'].split(',')] # ÂÅáË®≠ÈÅãÂãïÈ°ûÂûãÊòØÈÄóËôüÂàÜÈöî
                    all_exercises_names.extend([e.split('(')[0].strip() for e in exercises])

            if all_exercises_names:
                exercise_counts = pd.Series(all_exercises_names).value_counts().reset_index()
                exercise_counts.columns = ['ÈÅãÂãïÈ†ÖÁõÆ', 'Ê¨°Êï∏']

                fig_exercise_dist = px.pie(exercise_counts, values='Ê¨°Êï∏', names='ÈÅãÂãïÈ†ÖÁõÆ',
                                            title='ÈÅãÂãïÈ†ÖÁõÆÂàÜ‰Ωà',
                                            color_discrete_sequence=CUTE_COLORS, # ‰ΩøÁî®ÂèØÊÑõÈ°èËâ≤
                                            hole=0.5) # ÁîúÁîúÂúàÊïàÊûú

                fig_exercise_dist.update_traces(textinfo='percent+label',
                                                marker=dict(line=dict(color='#ffffff', width=2)), # ÁôΩËâ≤ÊèèÈÇä
                                                pull=[0.05] * len(exercise_counts), # ËºïÂæÆÂàÜÈõ¢ÊïàÊûú
                                                textfont_size=14,
                                                hoverlabel=dict(bgcolor="white", font_size=12, font_family="Arial Rounded MT Bold"))
                fig_exercise_dist.update_layout(
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    uniformtext_minsize=10, uniformtext_mode='hide',
                    showlegend=False, # ÁîúÁîúÂúàÂúñÈÄöÂ∏∏Âú®Áâá‰∏äÈ°ØÁ§∫Ê®ôÁ±§ÔºåÂèØ‰ª•Èö±ËóèÂúñ‰æã
                    height=350 # Ë™øÊï¥ÂúñË°®È´òÂ∫¶‰ª•ÈÅ©Êáâ‰∏¶ÊéíÈ°ØÁ§∫
                )
                st.plotly_chart(fig_exercise_dist, use_container_width=True, key="data_analysis_exercise_dist_chart") # Êñ∞Â¢û key
            else:
                st.info("Êö´ÁÑ°ÈÅãÂãïÊï∏ÊìöÂèØ‰æõÂàÜÊûêÔºåÂø´ÂéªÊñ∞Â¢û‰∏Ä‰∫õÈÅãÂãïÁ¥ÄÈåÑÂêßÔºÅ")

    else:
        st.info("Êö´ÁÑ°Á¥ÄÈåÑÊï∏ÊìöÔºåË´ãÂÖàÂÑ≤Â≠òÁ¥ÄÈåÑ‰ª•Êü•ÁúãÂúñË°®„ÄÇÊúüÂæÖÁúãÂà∞ÊÇ®ÁöÑÂÅ•Â∫∑Êï∏ÊìöÊàêÈï∑ÔºÅ")

    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)

def history_page(df_history):
    # Removed specific anchor here, using global 'app_top'

    st.header("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ")
    st.write("ÊâÄÊúâËµ∞ÈÅéÁöÑÂÅ•Â∫∑Ë∂≥Ë∑°ÔºåÈÉΩÂú®ÈÄôË£°Áïô‰∏ãÂç∞Ë®ò„ÄÇÊÇ®ÂèØ‰ª•Èö®ÊôÇÂõûÈ°ßËàáÁÆ°ÁêÜÔºÅ")
    st.write("---")

    # Initialize session state for editing and deletion if not already present
    if 'edit_mode' not in st.session_state:
        st.session_state.edit_mode = False
    if 'current_edit_record_original_idx' not in st.session_state:
        st.session_state.current_edit_record_original_idx = None
    if 'confirm_delete_original_idx' not in st.session_state:
        st.session_state.confirm_delete_original_idx = None

    if not df_history.empty:
        df_history['Êó•Êúü'] = pd.to_datetime(df_history['Êó•Êúü']).dt.date
        df_history_display = df_history.sort_values(by='Êó•Êúü', ascending=False).reset_index()

        st.subheader("ÊâÄÊúâÁ¥ÄÈåÑ (ÈÅ∏ÊìáÊó•ÊúüÊü•Áúã)")
        st.write("Ë´ãÂæû‰∏ãÊñπÈÅ∏ÂñÆ‰∏≠ÈÅ∏ÊìáÁâπÂÆöÊó•ÊúüÔºåÂç≥ÂèØÊü•ÁúãË©≤Êó•ÁöÑË©≥Á¥∞Á¥ÄÈåÑ‰∏¶ÈÄ≤Ë°åÁ∑®ËºØÊàñÂà™Èô§„ÄÇ")

        # ÂÑ™ÂåñÊ≠∑Âè≤Á¥ÄÈåÑÈ°ØÁ§∫Ôºö‰ΩøÁî® selectbox ÈÅ∏ÊìáÊó•ÊúüÔºåÁÑ∂ÂæåÂ±ïÈñãÈ°ØÁ§∫Ë©≤Êó•ÊúüÁ¥ÄÈåÑ
        # Â∞áÊó•ÊúüÊ†ºÂºèÂåñÁÇ∫Êõ¥ÊòìËÆÄÁöÑÂ≠ó‰∏≤ÔºåÂåÖÂê´ÊòüÊúüÂπæ
        # ‰æãÂ¶Ç: 2023-10-26 (ÈÄ±Âõõ)
        formatted_unique_dates = [""] + [
            f"{d.strftime('%Y-%m-%d')} ({d.strftime('%a')})" for d in sorted(df_history_display['Êó•Êúü'].unique().tolist(), reverse=True)
        ]
        selected_formatted_date_to_view = st.selectbox(
            "ÈÅ∏ÊìáË¶ÅÊü•ÁúãÁöÑÊó•ÊúüÁ¥ÄÈåÑ",
            formatted_unique_dates,
            key="history_date_selector",
            help="ÈÅ∏Êìá‰∏ÄÂÄãÊó•Êúü‰æÜÂ±ïÈñãË©≤Êó•ÁöÑÂÅ•Â∫∑Á¥ÄÈåÑË©≥ÊÉÖ"
        )

        selected_date_obj = None
        if selected_formatted_date_to_view != "":
            # ÂæûÊ†ºÂºèÂåñÁöÑÂ≠ó‰∏≤‰∏≠ÊèêÂèñÊó•ÊúüÈÉ®ÂàÜÔºåËΩâÊèõÂõû datetime.date Áâ©‰ª∂
            date_str_only = selected_formatted_date_to_view.split(' ')[0]
            selected_date_obj = datetime.datetime.strptime(date_str_only, '%Y-%m-%d').date()

            # ÈÅéÊøæÂá∫ÈÅ∏ÊìáÊó•ÊúüÁöÑÁ¥ÄÈåÑÔºå‰∏¶ÊâæÂà∞ÂÖ∂ÂéüÂßãÁ¥¢Âºï
            selected_records_df = df_history_display[df_history_display['Êó•Êúü'] == selected_date_obj]
            
            if not selected_records_df.empty:
                # ÂÅáË®≠ÊØèÂ§©Âè™Êúâ‰∏ÄÁ≠ÜÁ¥ÄÈåÑÔºåÂèñÁ¨¨‰∏ÄÁ≠ÜÈÄ≤Ë°åÈ°ØÁ§∫ÂíåÁ∑®ËºØ
                row = selected_records_df.iloc[0]
                record_date_str = row['Êó•Êúü'].strftime('%Y-%m-%d')
                original_idx = row['index']

                with st.expander(f"üóìÔ∏è **{record_date_str}** - È´îÈáç: {row['È´îÈáç(kg)']:.1f} kg, Ê∑®ÁÜ±Èáè: {row['Á∏ΩÊ∑®ÁÜ±Èáè']:.0f} Â§ßÂç°", expanded=True):
                    st.markdown("---")
                    st.write(f"- **ÁõÆÊ®ôÈ´îÈáç(kg)**: {row['ÁõÆÊ®ôÈ´îÈáç(kg)']:.1f}")
                    st.write(f"- **Ë∫´È´ò(ÂÖ¨ÂàÜ)**: {row['Ë∫´È´ò(ÂÖ¨ÂàÜ)']:.1f}")
                    st.write(f"- **ÊÄßÂà•**: {row['ÊÄßÂà•']}")
                    st.write(f"- **BMI**: {row['BMI']:.2f}")
                    st.write(f"- **È´îËÑÇËÇ™Áéá**: {row['È´îËÑÇËÇ™Áéá']:.1f}%")
                    st.write(f"- **Á∏ΩÊîùÂèñÁÜ±Èáè**: {row['Á∏ΩÊîùÂèñÁÜ±Èáè']:.0f} Â§ßÂç°")
                    st.write(f"- **ÈÅãÂãïÈ°ûÂûã**: {row['ÈÅãÂãïÈ°ûÂûã']}")
                    st.write(f"- **ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)**: {row['ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)']:.0f} ÂàÜÈêò")
                    st.write(f"- **ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè**: {row['ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè']:.0f} Â§ßÂç°")
                    st.write(f"- **Â§©Ê∞£ÂüéÂ∏Ç**: {row['Â§©Ê∞£ÂüéÂ∏Ç']}")
                    st.write(f"- **Â§©Ê∞£Ë™™Êòé**: {row['Â§©Ê∞£Ë™™Êòé']}")
                    st.write(f"- **Ê∞£Ê∫´**: {row['Ê∞£Ê∫´']:.1f}¬∞C")
                    st.write(f"- **ÂÅ•Â∫∑Âª∫Ë≠∞**: {row['ÂÅ•Â∫∑Âª∫Ë≠∞']}")
                    st.write(f"- **È§êÈªûÂÖßÂÆπ**: {row['È§êÈªûÂÖßÂÆπ']}")
                    
                    col_edit_del = st.columns(2)
                    with col_edit_del[0]:
                        if st.button("Á∑®ËºØÊ≠§Á¥ÄÈåÑ", key=f"edit_btn_{original_idx}"):
                            st.session_state.current_edit_record_original_idx = original_idx
                            st.session_state.edit_mode = True
                            st.session_state.confirm_delete_original_idx = None
                            st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                            st.rerun()

                    with col_edit_del[1]:
                        if st.button("Âà™Èô§Ê≠§Á¥ÄÈåÑ", key=f"delete_btn_{original_idx}"):
                            if st.session_state.get('confirm_delete_original_idx') == original_idx:
                                st.session_state.df_history = st.session_state.df_history.drop(original_idx).reset_index(drop=True)
                                save_data(st.session_state.df_history)
                                st.success(f"Â∑≤ÊàêÂäüÂà™Èô§ {record_date_str} ÁöÑÁ¥ÄÈåÑ„ÄÇ")
                                st.session_state.edit_mode = False
                                st.session_state.current_edit_record_original_idx = None
                                st.session_state.confirm_delete_original_idx = None
                                st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                                st.rerun()
                            else:
                                st.session_state.confirm_delete_original_idx = original_idx
                                st.session_state.edit_mode = False
                                st.warning(f"Á¢∫ÂÆöË¶ÅÂà™Èô§ {record_date_str} ÁöÑÁ¥ÄÈåÑÂóéÔºüË´ãÂÜçÈªûÊìä„ÄåÂà™Èô§Ê≠§Á¥ÄÈåÑ„ÄçÁ¢∫Ë™ç„ÄÇ")
                                st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                                st.rerun()

                    if st.session_state.get('confirm_delete_original_idx') == original_idx:
                        st.info(f"**Ë´ãÊ≥®ÊÑèÔºö** ÊÇ®Â∑≤ÈªûÊìäÂà™Èô§ {record_date_str}„ÄÇÂÜçÊ¨°ÈªûÊìä„ÄåÂà™Èô§Ê≠§Á¥ÄÈåÑ„ÄçÂ∞áÊ∞∏‰πÖÁßªÈô§ÂÆÉ„ÄÇ")
            else:
                st.info("Âú®ÈÅ∏ÂÆöÊó•ÊúüÊ≤íÊúâÊâæÂà∞Á¥ÄÈåÑ„ÄÇ")

        # Edit form (remains the same, but only appears if a record is selected for edit)
        if st.session_state.edit_mode and st.session_state.current_edit_record_original_idx is not None:
            original_idx_to_edit = st.session_state.current_edit_record_original_idx
            
            if original_idx_to_edit in st.session_state.df_history.index:
                current_record = st.session_state.df_history.loc[original_idx_to_edit].copy()

                st.subheader(f"‚úèÔ∏è Á∑®ËºØ {current_record['Êó•Êúü'].strftime('%Y-%m-%d')} ÁöÑÁ¥ÄÈåÑ")
                st.write("Ë´ã‰øÆÊîπ‰ª•‰∏ãË≥áË®äÔºåÁÑ∂ÂæåÈªûÊìä„ÄåÊõ¥Êñ∞Á¥ÄÈåÑ„ÄçÂÑ≤Â≠òÊõ¥Êîπ„ÄÇ")

                with st.form(key=f"edit_record_form_{original_idx_to_edit}"):
                    edited_date = st.date_input("Á¥ÄÈåÑÊó•Êúü", value=current_record['Êó•Êúü'] if pd.notna(current_record['Êó•Êúü']) else datetime.date.today(), key=f"edit_date_{original_idx_to_edit}")
                    edited_weight = st.number_input("È´îÈáç (ÂÖ¨Êñ§)", value=float(current_record.get('È´îÈáç(kg)', 0.0)), format="%.1f", key=f"edit_weight_{original_idx_to_edit}")
                    edited_target_weight = st.number_input("ÁõÆÊ®ôÈ´îÈáç (ÂÖ¨Êñ§)", value=float(current_record.get('ÁõÆÊ®ôÈ´îÈáç(kg)', 0.0)), format="%.1f", key=f"edit_target_weight_{original_idx_to_edit}")
                    edited_height = st.number_input("Ë∫´È´ò (ÂÖ¨ÂàÜ)", min_value=50.0, max_value=250.0, value=float(current_record.get('Ë∫´È´ò(ÂÖ¨ÂàÜ)', 0.0)), format="%.1f", key=f"edit_height_{original_idx_to_edit}")
                    
                    current_gender_val = current_record.get('ÊÄßÂà•', 'Áî∑ÊÄß')
                    gender_options = ["Áî∑ÊÄß", "Â•≥ÊÄß"]
                    edited_gender = st.selectbox("ÊÄßÂà•", gender_options, index=gender_options.index(current_gender_val) if current_gender_val in gender_options else 0, key=f"edit_gender_{original_idx_to_edit}")
                    
                    edited_total_intake = st.number_input("Á∏ΩÊîùÂèñÁÜ±Èáè (Â§ßÂç°)", value=int(current_record.get('Á∏ΩÊîùÂèñÁÜ±Èáè', 0)), key=f"edit_total_intake_{original_idx_to_edit}")
                    
                    current_exercise_type = current_record.get('ÈÅãÂãïÈ°ûÂûã', "")
                    edited_exercise_type = st.text_input("ÈÅãÂãïÈ°ûÂûã (ÈÄóËôüÂàÜÈöî)", value=current_exercise_type, key=f"edit_ex_type_{original_idx_to_edit}")
                    edited_exercise_time = st.number_input("ÈÅãÂãïÊôÇÈñì (ÂàÜÈêò)", value=int(current_record.get('ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)', 0)), key=f"edit_ex_time_{original_idx_to_edit}")
                    
                    edited_meal_content = st.text_area("È§êÈªûÂÖßÂÆπ", value=current_record.get('È§êÈªûÂÖßÂÆπ', ""), key=f"edit_meal_content_{original_idx_to_edit}")
                    edited_weather_city = st.text_input("Â§©Ê∞£ÂüéÂ∏Ç", value=current_record.get('Â§©Ê∞£ÂüéÂ∏Ç', ""), key=f"edit_weather_city_{original_idx_to_edit}")
                    edited_weather_desc = st.text_input("Â§©Ê∞£Ë™™Êòé", value=current_record.get('Â§©Ê∞£Ë™™Êòé', ""), key=f"edit_weather_desc_{original_idx_to_edit}")
                    edited_temperature = st.number_input("Ê∞£Ê∫´ (¬∞C)", value=float(current_record.get('Ê∞£Ê∫´', 0.0)), format="%.1f", key=f"edit_temperature_{original_idx_to_edit}")
                    edited_health_suggestion = st.text_area("ÂÅ•Â∫∑Âª∫Ë≠∞", value=current_record.get('ÂÅ•Â∫∑Âª∫Ë≠∞', ""), key=f"edit_health_suggestion_{original_idx_to_edit}")

                    recalculated_bmi = calculate_bmi(edited_weight, edited_height)
                    recalculated_body_fat_rate = 0.0
                    if edited_height > 0 and edited_weight > 0:
                        age_for_calc = st.session_state.get('age', 25)
                        if edited_gender == "Áî∑ÊÄß":
                            recalculated_body_fat_rate = (1.20 * recalculated_bmi) + (0.23 * age_for_calc) - 16.2
                        else:
                            recalculated_body_fat_rate = (1.20 * recalculated_bmi) + (0.23 * age_for_calc) - 5.4
                        if recalculated_body_fat_rate < 0:
                            recalculated_body_fat_rate = 0.0
                    
                    # ÈáçÊñ∞Ë®àÁÆóÈÅãÂãïÊ∂àËÄóÁÜ±ÈáèÔºåÈÄôË£°ÂèØ‰ª•Á∞°ÂñÆÂÅáË®≠‰∏ÄÂÄãÂπ≥ÂùáÊ∂àËÄóÁéáÔºåÊàñÊ†πÊìöÈÅãÂãïÈ°ûÂûãË©≥Á¥∞Ë®àÁÆó
                    # ÁÇ∫‰∫ÜÁ∞°ÂåñÁ∑®ËºØÔºåÊàëÂÄëÂÅáË®≠‰∏ÄÂÄãÂπ≥ÂùáÂÄº„ÄÇÂ¶ÇÊûúÈúÄË¶ÅÁ≤æÁ¢∫ÔºåÈúÄË¶ÅË§áÈõúÁöÑÈÅãÂãïÈ°ûÂûãËß£Êûê„ÄÇ
                    recalculated_exercise_burned = edited_exercise_time * 7 # ÂÅáË®≠Âπ≥ÂùáÊØèÂàÜÈêòÊ∂àËÄó 7 Â§ßÂç°
                    recalculated_net_calories = edited_total_intake - recalculated_exercise_burned

                    col_update_cancel = st.columns(2)
                    with col_update_cancel[0]:
                        update_button_clicked = st.form_submit_button("Êõ¥Êñ∞Á¥ÄÈåÑ", help="ÂÑ≤Â≠ò‰øÆÊîπÂæåÁöÑÁ¥ÄÈåÑ")
                    with col_update_cancel[1]:
                        cancel_button_clicked = st.form_submit_button("ÂèñÊ∂àÁ∑®ËºØ", help="ÊîæÊ£Ñ‰øÆÊîπ‰∏¶ÈóúÈñâË°®ÂñÆ")
                    
                    if update_button_clicked:
                        st.session_state.df_history.loc[original_idx_to_edit] = {
                            'Êó•Êúü': edited_date,
                            'È´îÈáç(kg)': edited_weight,
                            'ÁõÆÊ®ôÈ´îÈáç(kg)': edited_target_weight,
                            'Ë∫´È´ò(ÂÖ¨ÂàÜ)': edited_height,
                            'ÊÄßÂà•': edited_gender,
                            'BMI': round(recalculated_bmi, 2),
                            'È´îËÑÇËÇ™Áéá': round(recalculated_body_fat_rate, 2),
                            'Á∏ΩÊîùÂèñÁÜ±Èáè': edited_total_intake,
                            'ÈÅãÂãïÈ°ûÂûã': edited_exercise_type,
                            'ÈÅãÂãïÊôÇÈñì(ÂàÜÈêò)': edited_exercise_time,
                            'ÈÅãÂãïÊ∂àËÄóÁÜ±Èáè': recalculated_exercise_burned,
                            'Â§©Ê∞£ÂüéÂ∏Ç': edited_weather_city,
                            'Â§©Ê∞£Ë™™Êòé': edited_weather_desc,
                            'Ê∞£Ê∫´': edited_temperature,
                            'ÂÅ•Â∫∑Âª∫Ë≠∞': edited_health_suggestion,
                            'Á∏ΩÊ∑®ÁÜ±Èáè': recalculated_net_calories,
                            'È§êÈªûÂÖßÂÆπ': edited_meal_content
                        }
                        save_data(st.session_state.df_history)
                        st.success(f"Â∑≤ÊàêÂäüÊõ¥Êñ∞ {edited_date.strftime('%Y-%m-%d')} ÁöÑÁ¥ÄÈåÑ„ÄÇ")
                        st.session_state.edit_mode = False
                        st.session_state.current_edit_record_original_idx = None
                        st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                        st.rerun()
                    
                    if cancel_button_clicked:
                        st.info("Â∑≤ÂèñÊ∂àÁ∑®ËºØ„ÄÇ")
                        st.session_state.edit_mode = False
                        st.session_state.current_edit_record_original_idx = None
                        st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                        st.rerun()
            else:
                st.warning("Ë¶ÅÁ∑®ËºØÁöÑÁ¥ÄÈåÑ‰∏çÂ≠òÂú®ÊàñÂ∑≤Ë¢´Âà™Èô§„ÄÇË´ãÈáçÊñ∞ÈÅ∏Êìá„ÄÇ")
                st.session_state.edit_mode = False
                st.session_state.current_edit_record_original_idx = None
                st.session_state.current_page_index = page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ") # ‰øùÊåÅÂú®Ê≠∑Âè≤Á¥ÄÈåÑÈ†ÅÈù¢
                st.rerun()
        else:
            if selected_formatted_date_to_view == "": # Only show this message if no specific date is selected
                st.info("Ë´ãÂæû‰∏äÊñπÈÅ∏ÂñÆÈÅ∏Êìá‰∏ÄÂÄãÊó•ÊúüÔºåÂç≥ÂèØÊü•ÁúãË©≤Êó•ÁöÑË©≥Á¥∞Á¥ÄÈåÑ‰∏¶ÈÄ≤Ë°åÁ∑®ËºØ„ÄÇ")
            
        if (st.session_state.get('confirm_delete_original_idx') is not None and
            (not st.session_state.edit_mode or
             st.session_state.get('current_edit_record_original_idx') != st.session_state.get('confirm_delete_original_idx'))):
            pass

    else:
        st.info("Êö´ÁÑ°Á¥ÄÈåÑÂèØ‰æõÁÆ°ÁêÜ„ÄÇ")

    st.markdown("---")
    @st.cache_data
    def convert_df_to_csv(df):
        return df.to_csv(index=False).encode('utf-8')
    
    csv = convert_df_to_csv(df_history)
    st.download_button(
        label="ÂåØÂá∫ÊâÄÊúâÁ¥ÄÈåÑÁÇ∫ CSV",
        data=csv,
        file_name='ÂÅ•Â∫∑Êó•Ë®ò_Ê≠∑Âè≤Á¥ÄÈåÑ.csv',
        mime='text/csv',
        key="export_csv_button",
        help="ÈªûÊìäÊ≠§ÊåâÈàïÔºåÂ∞áÊÇ®ÁöÑÊâÄÊúâÂÅ•Â∫∑Á¥ÄÈåÑÂåØÂá∫ÁÇ∫ CSV Ê™îÊ°àÔºåÊñπ‰æøÊÇ®ÂÇô‰ªΩÊàñÈÄ≤‰∏ÄÊ≠•ÂàÜÊûê„ÄÇ"
    )
    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)


def settings_page():
    # Removed specific anchor here, using global 'app_top'

    st.header("‚öôÔ∏è Ë®≠ÂÆöËàáÁÆ°ÁêÜ")
    st.write("Âú®ÈÄôË£°ÔºåÊÇ®ÂèØ‰ª•ÂÄã‰∫∫ÂåñÊáâÁî®Á®ãÂºèË®≠ÂÆöÔºå‰ª•ÂèäÁÆ°ÁêÜÈ£üÁâ©ÂíåÈÅãÂãïÁöÑË≥áÊñôÂ∫´„ÄÇ")
    st.write("---")

    # Á¢∫‰øù session_state ‰∏≠Êúâ age Âíå activity_level ÁöÑÈ†êË®≠ÂÄº
    if 'age' not in st.session_state:
        st.session_state.age = 25
    if 'activity_level' not in st.session_state:
        st.session_state.activity_level = "‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)"
    if 'gender' not in st.session_state:
        st.session_state.gender = "Áî∑ÊÄß"
    if 'target_weight' not in st.session_state:
        st.session_state.target_weight = 0.0
    # Add a session state variable to store the personal health analysis message
    if 'personal_health_analysis_message' not in st.session_state:
        st.session_state.personal_health_analysis_message = ""
    # Add a session state variable to store the personal health analysis for persistence
    if 'saved_personal_analysis' not in st.session_state:
        st.session_state.saved_personal_analysis = {
            'timestamp': None,
            'message': ""
        }
    
    # --- ÂÄã‰∫∫Ë®≠ÂÆöÂçÄÂ°ä‰ΩøÁî® st.expander ---
    with st.expander("üë§ ÂÄã‰∫∫Ë®≠ÂÆö", expanded=True): # È†êË®≠Â±ïÈñã
        st.write("Â°´ÂØ´ÊÇ®ÁöÑÂü∫Êú¨Ë≥áÊñôÔºåËÆìÂÅ•Â∫∑Êó•Ë®òÁÇ∫ÊÇ®Êèê‰æõÊõ¥Á≤æÁ¢∫ÁöÑÂÅ•Â∫∑ÂàÜÊûêËàáÂª∫Ë≠∞„ÄÇ")
        with st.form("user_profile_settings"):
            st.session_state.age = st.number_input("Âπ¥ÈΩ°", min_value=1, max_value=120, value=st.session_state.age, step=1, key="settings_age_input", help="ÊÇ®ÁöÑÂπ¥ÈΩ°ÔºåÁî®ÊñºÈ´îËÑÇËÇ™ÁéáÁ≠âË®àÁÆó")
            activity_levels = ["‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)", "ËºïÂ∫¶ÈÅãÂãï (ÊØèÈÄ±1-3Â§©)", "‰∏≠Â∫¶ÈÅãÂãï (ÊØèÈÄ±3-5Â§©)", "È´òÂ∫¶ÈÅãÂãï (ÊØèÈÄ±6-7Â§©)", "ÈùûÂ∏∏È´òÂ∫¶ÈÅãÂãï (ÊØèÂ§©Ë®ìÁ∑¥)"]
            st.session_state.activity_level = st.selectbox("Ê¥ªÂãïÁ®ãÂ∫¶", activity_levels, index=activity_levels.index(st.session_state.activity_level), key="settings_activity_level_select", help="ÈÅ∏ÊìáÊÇ®ÁöÑÊó•Â∏∏Ê¥ªÂãïÈáèÔºåÂΩ±ÈüøÊØèÊó•ÁÜ±ÈáèÂª∫Ë≠∞")
            st.session_state.gender = st.radio("ÊÄßÂà•", ["Áî∑ÊÄß", "Â•≥ÊÄß"], index=0 if st.session_state.gender == "Áî∑ÊÄß" else 1, key="settings_gender_radio", help="ÊÇ®ÁöÑÊÄßÂà•ÔºåÁî®ÊñºÈ´îËÑÇËÇ™ÁéáÁ≠âË®àÁÆó")
            st.session_state.target_weight = st.number_input("ÁõÆÊ®ôÈ´îÈáç (kg)", min_value=0.0, format="%.1f", value=st.session_state.target_weight, key="settings_target_weight_input", help="Ë®≠ÂÆöÊÇ®ÁöÑÁêÜÊÉ≥È´îÈáçÔºåÊøÄÂãµËá™Â∑±ÈÅîÊàêÁõÆÊ®ôÔºÅ")
            
            if st.form_submit_button("ÂÑ≤Â≠òÂÄã‰∫∫Ë®≠ÂÆö‰∏¶ÂàÜÊûê"): # Êõ¥ÂêçÊåâÈàï
                # Âè™ÊúâÁï∂ df_history ‰∏çÁÇ∫Á©∫ÊôÇÔºåÊâçÂòóË©¶Áç≤Âèñ last_record
                if not st.session_state.df_history.empty:
                    last_record = st.session_state.df_history.sort_values(by='Êó•Êúü', ascending=False).iloc[0]
                    current_weight = last_record['È´îÈáç(kg)'] if pd.notna(last_record['È´îÈáç(kg)']) else 65.0
                    current_height = last_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)'] if pd.notna(last_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)']) else 170.0
                else:
                    # Â¶ÇÊûúÊ≤íÊúâÁ¥ÄÈåÑÔºå‰ΩøÁî®È†êË®≠ÂÄº
                    current_weight = 65.0
                    current_height = 170.0
                    st.warning("ÁõÆÂâçÊ≤íÊúâÊ≠∑Âè≤Á¥ÄÈåÑÔºåÈ´îÈáçÂíåË∫´È´òÂ∞á‰ΩøÁî®È†êË®≠ÂÄºÈÄ≤Ë°åÂÅ•Â∫∑ÂàÜÊûê„ÄÇ")

                bmr_calc, tdee_calc = calculate_bmr_tdee(
                    st.session_state.gender,
                    current_weight,
                    current_height,
                    st.session_state.age,
                    st.session_state.activity_level
                )

                analysis_message_parts = []
                analysis_message_parts.append(f"Â§™Ê£í‰∫ÜÔºÅÊÇ®Â∑≤ÊàêÂäüÊõ¥Êñ∞ÂÄã‰∫∫Ë®≠ÂÆö„ÄÇÂü∫ÊñºÊúÄÊñ∞ÁöÑÊï∏ÊìöÔºåÁÇ∫ÊÇ®Êè≠Á§∫Â∞àÂ±¨ÁöÑÂÅ•Â∫∑ËóçÂúñÔºö")
                analysis_message_parts.append(f"- ÊÇ®ÁöÑ**Âü∫Á§é‰ª£Ë¨ùÁéá (BMR)** ‰º∞Ë®àÁ¥ÑÁÇ∫Ôºö**{bmr_calc:.0f} Â§ßÂç°**„ÄÇÈÄôË°®Á§∫ÊÇ®Âú®ÈùúÊ≠¢ÁãÄÊÖã‰∏ãÁ∂≠ÊåÅÁîüÂëΩÊâÄÈúÄÁöÑÂü∫Êú¨ÁÜ±ÈáèÔºåÊòØÊÇ®ÊØèÊó•ÁÜ±ÈáèË¶èÂäÉÁöÑÂü∫Á§é„ÄÇ")
                analysis_message_parts.append(f"- ÊÇ®ÁöÑ**ÊØèÊó•Á∏ΩËÉΩÈáèÊ∂àËÄó (TDEE)** ‰º∞Ë®àÁ¥ÑÁÇ∫Ôºö**{tdee_calc:.0f} Â§ßÂç°**„ÄÇÈÄôÊòØÊÇ®ÊØèÂ§©ÂåÖÂê´Ê¥ªÂãïÊâÄÊ∂àËÄóÁöÑÁ∏ΩÁÜ±ÈáèÔºåÊòØÂØ¶ÁèæÈ´îÈáçÁõÆÊ®ôÁöÑÈóúÈçµÊï∏ÂÄºÔºÅ")

                health_tips = []
                if st.session_state.target_weight > 0 and current_weight > st.session_state.target_weight:
                    health_tips.append(f"**ÊúùÁõÆÊ®ôÈÇÅÈÄ≤ÔºÅ** ÊÇ®ÁöÑÁõÆÊ®ôÈ´îÈáçÊòØ {st.session_state.target_weight:.1f} kgÔºåÁõÆÂâçÈ´îÈáç {current_weight:.1f} kg„ÄÇÁÇ∫‰∫ÜÊõ¥ËºïÈ¨ÜÂú∞ÈÅîÊàêÁõÆÊ®ôÔºåÂª∫Ë≠∞ÊÇ®ÂèØ‰ª•ÂòóË©¶ÊØèÊó•ÂâµÈÄ†Á¥Ñ 250-500 Â§ßÂç°ÁöÑÁÜ±ÈáèËµ§Â≠óÔºåÂ∞áÊØèÊó•ÁÜ±ÈáèÊîùÂèñÊéßÂà∂Âú® **{max(0, tdee_calc - 500):.0f} - {tdee_calc - 250:.0f} Â§ßÂç°** ‰πãÈñì„ÄÇÈÄôÈúÄË¶ÅÊåÅ‰πã‰ª•ÊÅÜÁöÑÈ£≤È£üË™øÊï¥ËàáÈÅ©Â∫¶ÈÅãÂãïÔºåÊØèÊ¨°Â†ÖÊåÅÈÉΩËÆìÊÇ®Èõ¢Â§¢ÊÉ≥Êõ¥ËøëÔºÅ")
                elif st.session_state.target_weight > 0 and current_weight < st.session_state.target_weight:
                     health_tips.append(f"**ÂÅ•Â∫∑Â¢ûÈáçË®àÁï´ÂïüÂãïÔºÅ** ÊÇ®ÁöÑÁõÆÊ®ôÈ´îÈáçÊòØ {st.session_state.target_weight:.1f} kgÔºåÁõÆÂâçÈ´îÈáç {current_weight:.1f} kg„ÄÇËã•Ë¶ÅÂÅ•Â∫∑Â¢ûÈáçÔºåÂª∫Ë≠∞ÊØèÊó•ÁÜ±ÈáèÊîùÂèñÂèØÊØî TDEE È´òÂá∫Á¥Ñ **250-500 Â§ßÂç°**Ôºå‰∏¶Êê≠ÈÖçÂÖÖË∂≥ÁöÑËõãÁôΩË≥™ÔºàÂ¶ÇÂÑ™Ë≥™ËÇâÈ°û„ÄÅË±ÜË£ΩÂìÅÔºâËàáÂäõÈáèË®ìÁ∑¥ÔºåËÆìË∫´È´îÂú®Â¢ûÈï∑ÁöÑÂêåÊôÇ‰πüËÉΩÂº∑ÂÅ•ÊúâÂäõÔºÅ")
                else:
                    health_tips.append(f"**Á∂≠ÊåÅÁêÜÊÉ≥ÔºåÊ¥ªÂäõÁÑ°ÈôêÔºÅ** ÊÅ≠ÂñúÊÇ®ÔºåÊÇ®ÁöÑÈ´îÈáçÁÆ°ÁêÜË°®ÁèæÂá∫Ëâ≤ÔºÅÁ∂≠ÊåÅÂÅ•Â∫∑ÁöÑÈóúÈçµÂú®ÊñºÂùáË°°ÁöÑÁÜ±ÈáèÊîùÂèñËàáÊ∂àËÄó„ÄÇÂª∫Ë≠∞ÊÇ®ÊåÅÁ∫åÂú®ÊØèÊó•Á∏ΩËÉΩÈáèÊ∂àËÄó (TDEE) Á¥Ñ **{tdee_calc:.0f} Â§ßÂç°** ÁöÑÂü∫Á§é‰∏äÔºå‰∫´ÂèóÂ§öÂÖÉÁáüÈ§äÁöÑÈ£≤È£üÔºå‰∏¶‰øùÊåÅË¶èÂæãÁöÑÈÅãÂãïÔºåËÆìË∫´È´îÂÖÖÊªøÊ¥ªÂäõÔºÅ")
                
                if st.session_state.activity_level == "‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)":
                    health_tips.append("**ÂãïËµ∑‰æÜÔºåÊõ¥ÂÅ•Â∫∑ÔºÅ** ÊÇ®ÁõÆÂâçÁöÑÊ¥ªÂãïÁ®ãÂ∫¶Â±¨Êñº‰πÖÂùêÂûã„ÄÇÂà•ÊìîÂøÉÔºåÂæûÂ∞èÂú∞ÊñπÈñãÂßãÊîπËÆäÂ∞±ËÉΩÂ∏∂‰æÜÂ§ß‰∏çÂêåÔºÅÂòóË©¶ÊØèÂ∞èÊôÇËµ∑Ë∫´Ê¥ªÂãï 5-10 ÂàÜÈêòÔºåÊàñÊØèÂ§©Â¢ûÂä† 30 ÂàÜÈêòÁöÑÂø´Ëµ∞ÔºåËÆìË∫´È´îÈÄêÊº∏ÈÅ©ÊáâÊõ¥Â§öÊ¥ªÂãï„ÄÇÊØèÊ¨°ÁöÑÂæÆÂ∞èÊîπËÆäÔºåÈÉΩÊòØÂêëÂÅ•Â∫∑ÈÇÅÈÄ≤ÁöÑ‰∏ÄÂ§ßÊ≠•ÔºÅ")
                elif st.session_state.activity_level == "ÈùûÂ∏∏È´òÂ∫¶ÈÅãÂãï (ÊØèÂ§©Ë®ìÁ∑¥)":
                    health_tips.append("**Ë∂ÖÊ£íÁöÑÈÅãÂãïÂÆ∂ÔºÅ** ÊÇ®ÁöÑÊ¥ªÂãïÈáèÈùûÂ∏∏È´òÔºåÈÄô‰ª§‰∫∫ËÆöÂòÜÔºÅË´ãÂãôÂøÖÈáçË¶ñË®ìÁ∑¥ÂæåÁöÑÊÅ¢Âæ©ÔºåÂåÖÊã¨ÂÖÖË∂≥ÁöÑÁù°Áú†„ÄÅÂùáË°°ÁöÑÁáüÈ§äÔºàÂ∞§ÂÖ∂ÊòØËõãÁôΩË≥™ÂíåÁ¢≥Ê∞¥ÂåñÂêàÁâ©Ë£úÂÖÖÔºâÔºå‰ª•ÂèäÈÅ©Â∫¶ÁöÑ‰º∏Â±ïÂíå‰ºëÊÅØ„ÄÇÂÇæËÅΩË∫´È´îÁöÑËÅ≤Èü≥ÔºåÈÅøÂÖçÈÅéÂ∫¶Ë®ìÁ∑¥ÔºåËÆìÊØèÊ¨°Ë®ìÁ∑¥ÈÉΩÁôºÊèÆÊúÄÂ§ßÊïàÁõäÔºÅ")
                
                final_analysis_message = "\n\n".join(analysis_message_parts)
                if health_tips:
                    final_analysis_message += "\n\n**‚ú® VIVI Ë≤ºÂøÉÂÅ•Â∫∑Â∞èÂª∫Ë≠∞ ‚ú®**\n" + "\n".join([f"- {tip}" for tip in health_tips])
                
                # Store the message and timestamp
                st.session_state.personal_health_analysis_message = final_analysis_message
                st.session_state.saved_personal_analysis = {
                    'timestamp': datetime.datetime.now(),
                    'message': final_analysis_message
                }
                st.balloons()
                # Ë®≠ÂÆöÈ†ÅÈù¢Á¥¢ÂºïÔºåÂ∞éÂêëË®≠ÂÆöÈ†ÅÈù¢ (Á¥¢ÂºïÁÇ∫ 4)
                st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                st.rerun() # ÈáçÊñ∞ÈÅãË°å‰ª•‰ΩøÊõ¥ÊîπÁîüÊïà‰∏¶ÂÅúÁïôÂú®Ë®≠ÂÆöTab

        # Display the stored analysis message if it exists
        if st.session_state.saved_personal_analysis['message']:
            st.markdown("---")
            st.subheader("üí° ÊàëÁöÑÂ∞àÂ±¨ÂÅ•Â∫∑ÂàÜÊûê")
            timestamp_str = st.session_state.saved_personal_analysis['timestamp'].strftime('%Y-%m-%d %H:%M')
            st.info(f"**ÂàÜÊûêÊôÇÈñìÔºö{timestamp_str}**\n\n{st.session_state.saved_personal_analysis['message']}")


    st.markdown("---")

    # Start of "ÁÆ°ÁêÜÈ£üÁâ©ÈÅ∏È†Ö" expander
    with st.expander("üçî ÁÆ°ÁêÜÈ£üÁâ©ÈÅ∏È†Ö", expanded=True): # Renamed this expander
        st.write("Âú®ÈÄôË£°ÔºåÊÇ®ÂèØ‰ª•Ëá™Ë®ÇÈ£üÁâ©Ê∏ÖÂñÆÔºåËÆìÈ£≤È£üÁ¥ÄÈåÑÊõ¥Á¨¶ÂêàÊÇ®ÁöÑÁøíÊÖ£„ÄÇ")
        
        # Êô∫ËÉΩËæ®Ë≠òÁæéÈ£ü ÂçÄÂ°äÊ®ôÈ°åÂíåË™™ÊòéÊñáÂ≠ó‰øÆÊ≠£
        st.markdown(
            """
            <h4 style='color: #d81b60; font-family: "Comic Sans MS", "Arial Rounded MT Bold", sans-serif;'>
                Êô∫ËÉΩËæ®Ë≠òÁæéÈ£ü
            </h4>
            <p style='font-family: "Comic Sans MS", "Arial Rounded MT Bold", sans-serif; color: #5d4037;'>
                ‰∏äÂÇ≥‰∏ÄÂºµÈ¶ôÂô¥Âô¥ÁöÑÁÖßÁâáÔºåËÆìÂ∞èÂä©ÊâãÂπ´‰Ω†Ëß£ÈéñÈ£üÁâ©ÁöÑÁßòÂØÜÔºåËºïÈ¨ÜË®òÈåÑÈ£≤È£üÔºÅ
            </p>
            """, unsafe_allow_html=True
        )

        # --- ÈáçË¶ÅÊèêÁ§∫ÔºöË´ãÊõøÊèõÊÇ®ÁöÑ Gemini API Key ---
        # ÊÇ®ÂèØ‰ª•Âú®ÈÄôË£°ÊõøÊèõÊÇ®ÁöÑ OpenWeatherMap API Key„ÄÇ
        # Â¶ÇÊûúÊÇ®Ê≤íÊúâÔºåË´ãÂâçÂæÄ Google AI Studio Áç≤ÂèñÔºöhttps://aistudio.google.com/
        # ÁÑ°ÊïàÊàñÁº∫Â§±ÁöÑ API Key Â∞áÂ∞éËá¥ AI Ëæ®Ë≠òÂäüËÉΩÁÑ°Ê≥ïÈÅã‰Ωú„ÄÇ
        # Âú®Êüê‰∫õÈÉ®ÁΩ≤Áí∞Â¢É‰∏≠ÔºåAPI Key ÂèØËÉΩÊúÉË¢´Ëá™ÂãïÊ≥®ÂÖ•Ôºå‰ΩÜÂú®Êú¨Âú∞ÈÅãË°åÊôÇÊÇ®ÂèØËÉΩÈúÄË¶ÅÊâãÂãïË®≠ÁΩÆ„ÄÇ
        gemini_api_key = "AIzaSyAC6l7WtS00C6NbfIieSP88iS4BG6P0gog" # Replace with your actual Gemini API Key

        # ‰∏äÂÇ≥ÂúñÁâáÊåâÈàïÊñáÂ≠ó‰øÆÊ≠£
        uploaded_food_image_for_ai = st.file_uploader(
            "‰∏äÂÇ≥ÂúñÁâá", # ‰øÆÊ≠£ÁÇ∫ "‰∏äÂÇ≥ÂúñÁâá"
            type=["jpg", "jpeg", "png"],
            key="food_image_uploader_ai",
            help="üì∏ ‰∏äÂÇ≥ÊÇ®ÁöÑÈ£üÁâ©ÁÖßÁâáÔºåËÆìÂ∞èÂπ´ÊâãÁÇ∫ÊÇ®Ëæ®Ë≠òÔºÅ"
        )
        
        # Display the uploaded image (only display, not save), centered
        if uploaded_food_image_for_ai is not None:
            st.image(uploaded_food_image_for_ai, caption='ÊÇ®‰∏äÂÇ≥ÁöÑÂèØÊÑõÂúñÁâá', width=250)
            st.markdown("<style>img[alt='ÊÇ®‰∏äÂÇ≥ÁöÑÂèØÊÑõÂúñÁâá'] {display: block; margin-left: auto; margin-right: auto;}</style>", unsafe_allow_html=True)


        # State to store AI food name suggestion
        if 'ai_food_suggestion_name' not in st.session_state:
            st.session_state.ai_food_suggestion_name = ""
        # State to control showing the add food form after AI description
        if 'show_ai_assisted_add_form' not in st.session_state:
            st.session_state.show_ai_assisted_add_form = False
        # State to store the AI suggested calories
        if 'ai_suggested_calories' not in st.session_state:
            st.session_state.ai_suggested_calories = 0


        # Changed button class to 'ai-button' for custom styling
        if st.button("AIÂàÜÊûê", key="analyze_food_image_button", help="ÈªûÊìäËÆìÊô∫ËÉΩÂ∞èÂπ´ÊâãÂàÜÊûêÂúñÁâá‰∏≠ÁöÑÈ£üÁâ©ÔºÅ", disabled=(uploaded_food_image_for_ai is None)): # Disable if no image uploaded
            if uploaded_food_image_for_ai is not None:
                with st.empty(): # For dynamic content (loading animation, then result)
                    st.markdown("<div class='ai-loading-spinner'></div>", unsafe_allow_html=True)
                    st.info("Êô∫ËÉΩÂ∞èÂπ´ÊâãÊ≠£Âú®Âä™ÂäõÊÄùËÄÉ‰∏≠... üß† Ë´ãÁ®çÂÄôÂñîÔºÅ")
                
                try:
                    image_bytes = uploaded_food_image_for_ai.read()
                    base64_image = base64.b64encode(image_bytes).decode('utf-8')

                    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_api_key}"
                    headers = {"Content-Type": "application/json"}

                    # First Gemini API request: food description
                    prompt_description = {
                        "contents": [
                            {
                                "parts": [
                                    {"text": "ÈÄôÂºµÂúñÁâáÊòØ‰ªÄÈ∫ºÈ£üÁâ©ÊàñÈ§êÈªûÔºüË´ãÁî®‰∏ÄÂè•Á∞°ÊΩî„ÄÅÂèØÊÑõÁöÑË©±‰æÜÂΩ¢ÂÆπÔºå‰æãÂ¶ÇÔºö'ÁúãËµ∑‰æÜÂÉèÁæéÂë≥ÁöÑÁæ©Â§ßÂà©È∫µÔºÅ'„ÄÅ'ÈÄôÂèØËÉΩÊòØÈ¶ôÁîúÁöÑËçâËéìËõãÁ≥ïÔºÅ'„ÄÅ'Â•ΩÂÉèÊòØË±êÁõõÁöÑÊó©È§êÁõ§Âë¢ÔºÅ' Â¶ÇÊûúÁÑ°Ê≥ïËæ®Ë≠òÔºåË´ãÂõûÁ≠îÔºö'ÈÄôÂºµÂúñÁâáÊúâÈªûÊ®°Á≥äÔºåÂ∞èÂπ´ÊâãÈÇÑÂú®Â≠∏Áøí‰∏≠ÔºÅ' ‰∏çË¶ÅÊèê‰æõÂç°Ë∑ØÈáåÊï∏Â≠ó„ÄÇ"},
                                    {
                                        "inlineData": {
                                            "mimeType": uploaded_food_image_for_ai.type,
                                            "data": base64_image
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                    response_desc = requests.post(api_url, json=prompt_description, headers=headers)
                    response_desc.raise_for_status()
                    result_desc = response_desc.json()

                    suggestion_text = "ÈÄôÂºµÂúñÁâáÊúâÈªûÊ®°Á≥äÔºåÂ∞èÂπ´ÊâãÈÇÑÂú®Â≠∏Áøí‰∏≠ÔºÅ"
                    if result_desc and result_desc.get('candidates') and result_desc['candidates'][0].get('content') and result_desc['candidates'][0]['content'].get('parts'):
                        suggestion_text = result_desc['candidates'][0]['content']['parts'][0]['text']
                    
                    st.session_state.ai_food_suggestion_name = suggestion_text # Store the description
                    
                    # Clean up suggestion text for calorie estimation
                    cleaned_food_name_for_cal = suggestion_text.replace("ÔºÅ", "").replace("ÁúãËµ∑‰æÜÂÉèÁæéÂë≥ÁöÑ", "").replace("ÈÄôÂèØËÉΩÊòØÈ¶ôÁîúÁöÑ", "").replace("Â•ΩÂÉèÊòØË±êÁõõÁöÑ", "").strip()

                    # Second Gemini API request: calorie estimation
                    # Only call for calorie if the description is not the "cannot recognize" message
                    estimated_calories = 0
                    if "ÈÄôÂºµÂúñÁâáÊúâÈªûÊ®°Á≥ä" not in suggestion_text:
                        prompt_calories = {
                            "contents": [
                                {
                                    "parts": [
                                        {"text": f"Ë´ã‰º∞Ë®à‰∏Ä‰∏ã‰∏Ä‰ªΩ'{cleaned_food_name_for_cal}'Â§ßÁ¥ÑÂê´ÊúâÂ§öÂ∞ëÂ§ßÂç°ÁÜ±ÈáèÔºüË´ãÂè™ÂõûË¶Ü‰∏ÄÂÄãÊï∏Â≠óÔºå‰∏çÈúÄË¶Å‰ªª‰ΩïÊñáÂ≠óË™™Êòé„ÄÇÂ¶ÇÊûúÁÑ°Ê≥ï‰º∞Ë®àÔºåË´ãÂõûË¶Ü 0„ÄÇ"}
                                    ]
                                }
                            ]
                        }
                        response_cal = requests.post(api_url, json=prompt_calories, headers=headers)
                        response_cal.raise_for_status()
                        result_cal = response_cal.json()

                        if result_cal and result_cal.get('candidates') and result_cal['candidates'][0].get('content') and result_cal['candidates'][0]['content'].get('parts'):
                            try:
                                # Attempt to parse the response as an integer
                                estimated_calories = int(result_cal['candidates'][0]['content']['parts'][0]['text'].strip())
                                if estimated_calories < 0: # Ensure calories are not negative
                                    estimated_calories = 0
                            except ValueError:
                                estimated_calories = 0 # Fallback if parsing fails
                        
                    st.session_state.ai_suggested_calories = estimated_calories # Store found calories or 0
                    st.session_state.show_ai_assisted_add_form = True # Show the manual add form
                    
                except requests.exceptions.HTTPError as http_err:
                    st.error(f"ÂëºÂè´Â∞èÂπ´ÊâãÊôÇÁôºÁîüÈÄ£Á∑öÈåØË™§Ôºö{http_err} (ÁãÄÊÖãÁ¢º: {response_desc.status_code if 'response_desc' in locals() else 'N/A'})„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑ API Key ÊàñÁ∂≤Ë∑ØÈÄ£Á∑ö„ÄÇ")
                    st.session_state.ai_food_suggestion_name = "Á∂≤Ë∑ØÊàñAPIÈÄ£Á∑öÊúâÂïèÈ°åÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ"
                    st.session_state.ai_suggested_calories = 0
                    st.session_state.show_ai_assisted_add_form = False
                except requests.exceptions.ConnectionError as conn_err:
                    st.error(f"Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§: {conn_err}„ÄÇÂ∞èÂπ´ÊâãÁÑ°Ê≥ïÈÄ£Á∑ö„ÄÇ")
                    st.session_state.ai_food_suggestion_name = "Á∂≤Ë∑ØÈÄ£Á∑öÁï∞Â∏∏ÔºåË´ãÊ™¢Êü•ÊÇ®ÁöÑÁ∂≤Ë∑Ø„ÄÇ"
                    st.session_state.ai_suggested_calories = 0
                    st.session_state.show_ai_assisted_add_form = False
                except requests.exceptions.Timeout as timeout_err:
                    st.error(f"Ë´ãÊ±ÇÂ∞èÂπ´ÊâãË∂ÖÊôÇ: {timeout_err}„ÄÇË´ãÈáçË©¶ÊàñÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö„ÄÇ")
                    st.session_state.ai_food_suggestion_name = "Ë´ãÊ±ÇË∂ÖÊôÇ‰∫ÜÔºåÂ∞èÂπ´ÊâãÊúâÈªûÁ¥Ø‰∫Ü„ÄÇ"
                    st.session_state.ai_suggested_calories = 0
                    st.session_state.show_ai_assisted_add_form = False
                except requests.exceptions.RequestException as req_err:
                    st.error(f"ÂëºÂè´Â∞èÂπ´ÊâãÊôÇÁôºÁîüÈåØË™§Ôºö{req_err}„ÄÇ")
                    st.session_state.ai_food_suggestion_name = "Â∞èÂπ´ÊâãÂá∫‰∫Ü‰∏ÄÈªûÂ∞èÁãÄÊ≥Å„ÄÇ"
                    st.session_state.ai_suggested_calories = 0
                    st.session_state.show_ai_assisted_add_form = False
                except Exception as e:
                    st.error(f"ÂàÜÊûêÈ£üÁâ©ÊôÇÁôºÁîüÊú™Áü•ÈåØË™§Ôºö{e}")
                    st.session_state.ai_food_suggestion_name = "ÁôºÁîü‰∫ÜÂ∞èÊÑèÂ§ñÔºåÁÑ°Ê≥ïÂàÜÊûê„ÄÇ"
                    st.session_state.ai_suggested_calories = 0
                    st.session_state.show_ai_assisted_add_form = False
                
                # After processing, set the current page index to settings to re-render with new state
                st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                st.rerun()

        # Display AI suggestion and manual add form
        if st.session_state.ai_food_suggestion_name:
            st.markdown("---")
            st.subheader("üéâ Â∞èÂπ´ÊâãÁöÑÂàÜÊûêÁµêÊûúÔºÅ")
            
            # Customizing error message for AI analysis failure
            if "ÈÄôÂºµÂúñÁâáÊúâÈªûÊ®°Á≥ä" in st.session_state.ai_food_suggestion_name or "ÁôºÁîü‰∫ÜÂ∞èÊÑèÂ§ñ" in st.session_state.ai_food_suggestion_name or "Á∂≤Ë∑ØÈÄ£Á∑öÁï∞Â∏∏" in st.session_state.ai_food_suggestion_name or "Ë´ãÊ±ÇË∂ÖÊôÇ‰∫Ü" in st.session_state.ai_food_suggestion_name:
                cute_error_message = ""
                if "Ê®°Á≥ä" in st.session_state.ai_food_suggestion_name:
                    cute_error_message = "ü•∫ ÈÄôÂºµÂúñÁâáÊúâÈªûÊ®°Á≥äÔºåÂ∞èÂπ´ÊâãÈÇÑÂú®Â≠∏Áøí‰∏≠ÔºÅÊèõÂºµÊõ¥Ê∏ÖÊ•öÁöÑË©¶Ë©¶Ôºü"
                elif "ÊÑèÂ§ñ" in st.session_state.ai_food_suggestion_name:
                    cute_error_message = "üòÖ ÁôºÁîü‰∫ÜÈªûÂ∞èÊÑèÂ§ñÔºåÂ∞èÂπ´ÊâãËø∑Ë∑Ø‰∫ÜÔºÅË´ãÂÜçË©¶‰∏ÄÊ¨°Ôºü"
                elif "Á∂≤Ë∑Ø" in st.session_state.ai_food_suggestion_name:
                    cute_error_message = "üöß Á∂≤Ë∑ØÊúâÈªûÂ∞èÂ†µËªäÔºåÂ∞èÂπ´ÊâãÈÄ£‰∏ç‰∏äÁ∑öÂï¶ÔºÅË´ãÊ™¢Êü•Á∂≤Ë∑ØÂæåÂÜçË©¶Ôºü"
                elif "Ë∂ÖÊôÇ" in st.session_state.ai_food_suggestion_name:
                    cute_error_message = "üò¥ Â∞èÂπ´ÊâãÊÄùËÄÉÂ§™‰πÖ‰∫ÜÔºÅË´ãËÄêÂøÉ‰∏ÄÈªûÂÜçË©¶Ôºü"
                else: # Generic fallback for other errors
                    cute_error_message = "ü§î ÂìéÂëÄÔºåÂ∞èÂπ´ÊâãÊö´ÊôÇÁÑ°Ê≥ïÂàÜÊûêÈÄôÂºµÂúñÁâáÔºåË´ãÊèõÂºµÂúñÁâáÂÜçË©¶Ë©¶ÁúãÔºÅ"

                st.markdown(
                    f"<div class='ai-suggestion-box' style='background-color: #ffcccc; border-color: #ff6666;'>{cute_error_message}</div>",
                    unsafe_allow_html=True
                )
                # No need to show the input form if AI analysis failed.
                st.session_state.show_ai_assisted_add_form = False
            else:
                st.markdown(
                    f"<div class='ai-suggestion-box'><span class='emoji-large'>üí°</span> {st.session_state.ai_food_suggestion_name}</div>",
                    unsafe_allow_html=True
                )
                st.write("Ê†πÊìöÂ∞èÂπ´ÊâãÁöÑÂª∫Ë≠∞ÔºåË´ãÂú®‰∏ãÊñπËº∏ÂÖ•Êõ¥Ë©≥Á¥∞ÁöÑÈ£üÁâ©Ë≥áË®äÔºö")
            
            # Only show this form if show_ai_assisted_add_form is True
            if st.session_state.show_ai_assisted_add_form:
                with st.form("add_food_based_on_ai_form"):
                    # Pre-fill with AI suggestion, but allow user to edit
                    # Clean up suggestion for pre-fill, ensure it's just the food name
                    clean_for_input = st.session_state.ai_food_suggestion_name.replace("ÔºÅ", "").replace("ÁúãËµ∑‰æÜÂÉèÁæéÂë≥ÁöÑ", "").replace("ÈÄôÂèØËÉΩÊòØÈ¶ôÁîúÁöÑ", "").replace("Â•ΩÂÉèÊòØË±êÁõõÁöÑ", "").strip()
                    new_food_name_ai_assisted = st.text_input(
                        "È£üÁâ©ÂêçÁ®±",
                        value=clean_for_input,
                        key="ai_assisted_food_name_input",
                        help="Ë´ãËº∏ÂÖ•È£üÁâ©ÂêçÁ®±ÔºåÂèØÂèÉËÄÉ‰∏äÊñπÊô∫ËÉΩÂä©ÁêÜÁöÑÂª∫Ë≠∞"
                    )
                    
                    # Pre-fill calories with AI suggested calories or 0
                    new_food_calories_ai_assisted = st.number_input(
                        "È†ê‰º∞ÁÜ±Èáè (Â§ßÂç°)",
                        min_value=0,
                        value=st.session_state.ai_suggested_calories, # Use AI suggested calories here
                        key="ai_assisted_calories_input",
                        help="Ë´ãËº∏ÂÖ•Ê≠§È£üÁâ©ÁöÑÁÜ±ÈáèÂÄº (Á≤æÊ∫ñÂ∫¶Áî±ÊÇ®Ê±∫ÂÆöÔºÅ)"
                    )
                    
                    # Determine initial category for AI-assisted food. If a food item was found in the database, use its category. Otherwise, default to "AIÂàÜÊûê"
                    initial_ai_category = "AIÂàÜÊûê"
                    # Try to find category from food_database based on input name (which might be the AI suggestion)
                    if new_food_name_ai_assisted in st.session_state.food_database:
                        initial_ai_category = st.session_state.food_database[new_food_name_ai_assisted]['category']
                    
                    food_categories_for_ai_form = ["AIÂàÜÊûê", "‰∏≠Âºè", "Ë•øÂºè", "ÁîúÈªû", "Ê∞¥Êûú", "Ëî¨Ëèú", "Á©ÄÁâ©ËàáÊæ±Á≤â", "Â†ÖÊûúËàáÁ®ÆÂ≠ê", "ËÇâÈ°ûËàáÊµ∑ÈÆÆ", "‰π≥Ë£ΩÂìÅËàáËõã", "È£≤Êñô", "ÂÖ∂‰ªñ"]
                    
                    new_food_category_ai_assisted = st.selectbox(
                        "ÈÅ∏ÊìáÈ°ûÂà•",
                        options=food_categories_for_ai_form,
                        index=food_categories_for_ai_form.index(initial_ai_category) if initial_ai_category in food_categories_for_ai_form else 0,
                        key="ai_assisted_category_select"
                    )
                    
                    # Changed button class to 'stButton>button[kind="primary"]' for custom styling in CSS
                    submit_ai_assisted_food = st.form_submit_button("Á¢∫Ë™ç‰∏¶Êñ∞Â¢ûÂà∞ÊàëÁöÑÈ£üÁâ©Ë≥áÊñôÂ∫´ ‚ú®", help="ÈªûÊìäÊ≠§ÊåâÈàïÔºåÂ∞á‰øÆÊîπÂæåÁöÑÈ£üÁâ©Ë≥áË®äÊñ∞Â¢ûÂà∞ÊÇ®ÁöÑË≥áÊñôÂ∫´‰∏≠„ÄÇ")

                    if submit_ai_assisted_food:
                        if new_food_name_ai_assisted and new_food_calories_ai_assisted >= 0:
                            if new_food_name_ai_assisted not in st.session_state.food_database:
                                st.session_state.food_database[new_food_name_ai_assisted] = {"calories": new_food_calories_ai_assisted, "category": new_food_category_ai_assisted}
                                st.success(f"'{new_food_name_ai_assisted}' (ÁÜ±Èáè: {new_food_calories_ai_assisted} Â§ßÂç°) Â∑≤ÊàêÂäüÊñ∞Â¢ûÂà∞È£üÁâ©Ë≥áÊñôÂ∫´ÔºÅÂ§™Ê£í‰∫ÜÔºÅ")
                            else:
                                st.session_state.food_database[new_food_name_ai_assisted].update({"calories": new_food_calories_ai_assisted, "category": new_food_category_ai_assisted})
                                st.info(f"È£üÁâ© '{new_food_name_ai_assisted}' Â∑≤Â≠òÂú®Ë≥áÊñôÂ∫´‰∏≠ÔºåÂ∑≤Êõ¥Êñ∞ÂÖ∂ÁÜ±ÈáèÂíåÈ°ûÂà•„ÄÇ")
                            
                            st.session_state.ai_food_suggestion_name = "" # Clear suggestion after adding
                            st.session_state.ai_suggested_calories = 0 # Reset suggested calories
                            st.session_state.show_ai_assisted_add_form = False # Hide the form
                            st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                            st.rerun()
                        else:
                            st.warning("Ë´ãÁ¢∫Ë™çÈ£üÁâ©ÂêçÁ®±ÂíåÁÜ±ÈáèÊòØÂê¶ÊúâÊïà„ÄÇ")
        
        st.markdown("---")
        st.markdown("#### üìù ÊâãÂãïÊñ∞Â¢û/Âà™Èô§ È£üÁâ©ÈÅ∏È†Ö") # New title for manual food management
        st.write("ÊÇ®‰πüÂèØ‰ª•ÊâãÂãïËº∏ÂÖ•È£üÁâ©Ë≥áË®ä‰æÜÊì¥ÂÖÖÊàñÂà™Èô§ÊÇ®ÁöÑÈ£üÁâ©Ë≥áÊñôÂ∫´„ÄÇ")

        # Display current food database
        if st.session_state.food_database:
            food_df = pd.DataFrame([{'È£üÁâ©ÂêçÁ®±': name, 'ÁÜ±Èáè(Â§ßÂç°)': data['calories'], 'È°ûÂà•': data['category']} for name, data in st.session_state.food_database.items()])
            st.dataframe(food_df, use_container_width=True, key="settings_food_database_df")
        else:
            st.info("È£üÁâ©Ë≥áÊñôÂ∫´ÁõÆÂâçÁÇ∫Á©∫„ÄÇ")

        # Add food section
        with st.form("manual_add_food_form"):
            new_food_name_manual = st.text_input("Ëº∏ÂÖ•Êñ∞È£üÁâ©ÂêçÁ®±", key="manual_new_food_name_input", help="‰æãÂ¶ÇÔºöÊª∑ÈõûËÖø‰æøÁï∂")
            new_food_calories_manual = st.number_input("Ëº∏ÂÖ•Êñ∞È£üÁâ©ÁÜ±Èáè (Â§ßÂç°)", min_value=0, value=0, key="manual_new_food_calories_input", help="Ê≠§È£üÁâ©ÁöÑÈ†ê‰º∞ÁÜ±ÈáèÂÄº")
            new_food_category_manual = st.selectbox("ÈÅ∏ÊìáÈ£üÁâ©È°ûÂà•",
                                                   options=["‰∏≠Âºè", "Ë•øÂºè", "ÁîúÈªû", "Ê∞¥Êûú", "Ëî¨Ëèú", "Á©ÄÁâ©ËàáÊæ±Á≤â", "Â†ÖÊûúËàáÁ®ÆÂ≠ê", "ËÇâÈ°ûËàáÊµ∑ÈÆÆ", "‰π≥Ë£ΩÂìÅËàáËõã", "È£≤Êñô", "ÂÖ∂‰ªñ", "AIÂàÜÊûê"],
                                                   key="manual_new_food_category_select", help="ÁÇ∫ÊÇ®ÁöÑÊñ∞È£üÁâ©ÈÅ∏Êìá‰∏ÄÂÄãÂàÜÈ°û")
            add_manual_food_button = st.form_submit_button("Êñ∞Â¢ûÈ£üÁâ©")
            
            if add_manual_food_button:
                if new_food_name_manual and new_food_calories_manual >= 0:
                    if new_food_name_manual not in st.session_state.food_database:
                        st.session_state.food_database[new_food_name_manual] = {"calories": new_food_calories_manual, "category": new_food_category_manual}
                        st.success(f"Â∑≤Êñ∞Â¢û '{new_food_name_manual}' Âà∞È£üÁâ©ÈÅ∏ÂñÆÔºåÈ°ûÂà•: {new_food_category_manual}„ÄÇ")
                    else:
                        st.warning(f"È£üÁâ© '{new_food_name_manual}' Â∑≤Â≠òÂú®ÔºåÂ∞áÊõ¥Êñ∞ÂÖ∂ÁÜ±ÈáèÁÇ∫ {new_food_calories_manual} Â§ßÂç°ÔºåÈ°ûÂà•ÁÇ∫ {new_food_category_manual}„ÄÇ")
                        st.session_state.food_database[new_food_name_manual].update({"calories": new_food_calories_manual, "category": new_food_category_manual})
                    st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                    st.rerun()
                else:
                    st.warning("Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈ£üÁâ©ÂêçÁ®±„ÄÅÁÜ±ÈáèÂíåÈ°ûÂà•„ÄÇ")
        
        # Delete food section
        with st.form("manual_delete_food_form"):
            food_to_delete_manual = st.selectbox("ÈÅ∏ÊìáË¶ÅÂà™Èô§ÁöÑÈ£üÁâ©", [""] + sorted(list(st.session_state.food_database.keys())), key="manual_delete_food_selectbox", help="ÈÅ∏ÊìáÊÇ®ÊÉ≥ÂæûÂàóË°®‰∏≠ÁßªÈô§ÁöÑÈ£üÁâ©")
            delete_manual_food_button = st.form_submit_button("Âà™Èô§ÈÅ∏ÂÆöÈ£üÁâ©")
            if delete_manual_food_button:
                if food_to_delete_manual and food_to_delete_manual in st.session_state.food_database:
                    del st.session_state.food_database[food_to_delete_manual]
                    st.success(f"Â∑≤Âà™Èô§ '{food_to_delete_manual}'„ÄÇ")
                    st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                    st.rerun()
                else:
                    st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÂà™Èô§ÁöÑÈ£üÁâ©„ÄÇ")
    # End of "ÁÆ°ÁêÜÈ£üÁâ©ÈÅ∏È†Ö" expander


    st.markdown("---")

    # Start of "Êñ∞Â¢û/Âà™Èô§ ÈÅãÂãïÈÅ∏È†Ö" expander (Moved to a separate expander)
    with st.expander("üèÉ‚Äç‚ôÄÔ∏è Êñ∞Â¢û/Âà™Èô§ ÈÅãÂãïÈÅ∏È†Ö", expanded=True): # New expander
        st.write("Âú®ÈÄôË£°ÔºåÊÇ®ÂèØ‰ª•Ëá™Ë®ÇÈÅãÂãïÊ∏ÖÂñÆÔºåËÆìÈÅãÂãïÁ¥ÄÈåÑÊõ¥Á¨¶ÂêàÊÇ®ÁöÑÁøíÊÖ£„ÄÇ")

        st.write("ÁõÆÂâçÈÅãÂãïÈÅ∏ÂñÆ (ÂèØ‰æõÈÅ∏Êìá):")
        st.write("ÈÄôÊòØÊÇ®ÊâÄÊúâÈ†êË®≠ÂíåÊÇ®Êñ∞Â¢ûÁöÑÈÅãÂãïÂàóË°®ÔºåÊñπ‰æøÊÇ®ÁÆ°ÁêÜ„ÄÇ")
        st.dataframe(pd.DataFrame(list(st.session_state.exercise_calories_per_min.items()), columns=['ÈÅãÂãï', 'ÊØèÂàÜÈêòÊ∂àËÄóÂç°Ë∑ØÈáå']), use_container_width=True, key="settings_exercise_database_df")

        # Add new exercise
        with st.form("add_exercise_form"):
            new_exercise_name = st.text_input("Ëº∏ÂÖ•Êñ∞ÈÅãÂãïÂêçÁ®±", key="new_exercise_name_input", help="‰æãÂ¶ÇÔºöË∑≥Ëàû")
            new_exercise_calories_per_min = st.number_input("ÊØèÂàÜÈêòÊ∂àËÄóÁÜ±Èáè (Â§ßÂç°)", min_value=0, value=5, step=1, key="new_exercise_calories_input", help="Ê≠§ÈÅãÂãïÊØèÂàÜÈêòÁöÑÈ†ê‰º∞ÁÜ±ÈáèÊ∂àËÄóÂÄº")
            add_exercise_button = st.form_submit_button("Êñ∞Â¢ûÈÅãÂãï")
            if add_exercise_button:
                if new_exercise_name and new_exercise_calories_per_min >= 0:
                    if new_exercise_name not in st.session_state.exercise_calories_per_min:
                        st.session_state.exercise_calories_per_min[new_exercise_name] = new_exercise_calories_per_min
                        st.success(f"Â∑≤Êñ∞Â¢û '{new_exercise_name}' Âà∞ÈÅãÂãïÈÅ∏ÂñÆ„ÄÇ")
                    else:
                        st.warning(f"ÈÅãÂãï '{new_exercise_name}' Â∑≤Â≠òÂú®ÔºåÂ∞áÊõ¥Êñ∞ÊØèÂàÜÈêòÊ∂àËÄóÁÜ±ÈáèÁÇ∫ {new_exercise_calories_per_min} Â§ßÂç°„ÄÇ")
                        st.session_state.exercise_calories_per_min[new_exercise_name] = new_exercise_calories_per_min
                    st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                    st.rerun()
                else:
                    st.warning("Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÈÅãÂãïÂêçÁ®±ÂíåÊØèÂàÜÈêòÊ∂àËÄóÁÜ±Èáè„ÄÇ")
        
        # Delete exercise
        with st.form("delete_exercise_form"):
            exercise_to_delete = st.selectbox("ÈÅ∏ÊìáË¶ÅÂà™Èô§ÁöÑÈÅãÂãï", [""] + sorted(list(st.session_state.exercise_calories_per_min.keys())), key="delete_exercise_selectbox", help="ÈÅ∏ÊìáÊÇ®ÊÉ≥ÂæûÂàóË°®‰∏≠ÁßªÈô§ÁöÑÈÅãÂãï")
            delete_button = st.form_submit_button("Âà™Èô§ÈÅ∏ÂÆöÈÅãÂãï")
            if delete_button:
                if exercise_to_delete and exercise_to_delete in st.session_state.exercise_calories_per_min:
                    del st.session_state.exercise_calories_per_min[exercise_to_delete]
                    st.success(f"Â∑≤Âà™Èô§ '{exercise_to_delete}'„ÄÇ")
                    st.session_state.current_page_index = page_names.index("‚öôÔ∏è Ë®≠ÂÆö")
                    st.rerun()
                else:
                    st.warning("Ë´ãÈÅ∏ÊìáË¶ÅÂà™Èô§ÁöÑÈÅãÂãï„ÄÇ")
    # End of "Êñ∞Â¢û/Âà™Èô§ ÈÅãÂãïÈÅ∏È†Ö" expander

    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)


# --- Â∞èÂπ´ÊâãÈ†ÅÈù¢ (Êñ∞Â¢ûÂäüËÉΩ) ---
def assistant_page():
    st.header("ü§ñ Êô∫ËÉΩÂ∞èÂπ´Êâã")
    st.write("ËÆìÂ∞èÂπ´ÊâãÁÇ∫ÊÇ®ÈáèË∫´ÊâìÈÄ†Â∞àÂ±¨ÁöÑÈ§äÁîü„ÄÅÂÅ•Â∫∑ÊàñÊ∏õËÇ•ËèúÂñÆËàáÈÅãÂãïË®àÁï´ÔºÅ")
    st.write("---")

    # --- ÈáçË¶ÅÊèêÁ§∫ÔºöË´ãÊõøÊèõÊÇ®ÁöÑ Gemini API Key ---
    gemini_api_key = "AIzaSyAC6l7WtS00C6NbfIieSP88iS4BG6P0gog" # Replace with your actual Gemini API Key

    def call_gemini_api_for_plan(prompt_text, gemini_api_key, schema):
        """
        Calls the Gemini API to generate structured meal and exercise plans.
        """
        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_api_key}"
        headers = {"Content-Type": "application/json"}
        
        payload = {
            "contents": [{"parts": [{"text": prompt_text}]}],
            "generationConfig": {
                "responseMimeType": "application/json",
                "responseSchema": schema
            }
        }
        
        try:
            response = requests.post(api_url, json=payload, headers=headers, timeout=60) # Increased timeout
            response.raise_for_status() # Raises HTTPError for bad responses (4xx or 5xx)
            result = response.json()
            
            if result.get('candidates') and result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts'):
                json_string = result['candidates'][0]['content']['parts'][0]['text']
                # Gemini sometimes returns raw JSON string, sometimes a JSON object.
                # Ensure it's a string that can be parsed.
                if isinstance(json_string, dict):
                    return json_string # Already parsed
                return json.loads(json_string)
            else:
                st.error("Â∞èÂπ´ÊâãÊ≤íÊúâÁîüÊàêÊúâÊïàÁöÑÂÖßÂÆπ„ÄÇ")
                return None
        except requests.exceptions.HTTPError as http_err:
            st.error(f"Â∞èÂπ´ÊâãÈÄ£Á∑öÈåØË™§: {http_err}. Ë´ãÊ™¢Êü• API Key ÊòØÂê¶Ê≠£Á¢∫ÊàñÊúçÂãôÊòØÂê¶ÂèØÁî®„ÄÇ")
            return None
        except requests.exceptions.ConnectionError as conn_err:
            st.error(f"Á∂≤Ë∑ØÈÄ£Á∑öÈåØË™§: {conn_err}. Ë´ãÊ™¢Êü•ÊÇ®ÁöÑÁ∂≤Ë∑Ø„ÄÇ")
            return None
        except requests.exceptions.Timeout as timeout_err:
            st.error(f"Ë´ãÊ±ÇÂ∞èÂπ´ÊâãË∂ÖÊôÇ: {timeout_err}. Ë´ãÈáçË©¶„ÄÇ")
            return None
        except json.JSONDecodeError as json_err:
            st.error(f"Ëß£ÊûêÂ∞èÂπ´ÊâãÂõûÂÇ≥Ë≥áÊñôÈåØË™§: {json_err}. ÂõûÂÇ≥ÂÖßÂÆπÂèØËÉΩ‰∏çÊòØÊúâÊïàÁöÑ JSON„ÄÇ")
            print(f"Failed JSON: {result}") # For debugging
            return None
        except Exception as e:
            st.error(f"ÂëºÂè´Â∞èÂπ´ÊâãÊôÇÁôºÁîüÊú™Áü•ÈåØË™§: {e}")
            return None

    # Define the JSON schema for Gemini's response
    # This schema defines a weekly plan (array of 7 days)
    # Each day has meal and exercise plans
    plan_schema = {
        "type": "ARRAY",
        "items": {
            "type": "OBJECT",
            "properties": {
                "day": {"type": "STRING", "description": "‰æãÂ¶ÇÔºöÊòüÊúü‰∏Ä"},
                "meals": {
                    "type": "ARRAY",
                    "items": {
                        "type": "OBJECT",
                        "properties": {
                            "meal_type": {"type": "STRING", "description": "‰æãÂ¶ÇÔºöÊó©È§ê„ÄÅÂçàÈ§ê„ÄÅÊôöÈ§ê„ÄÅÈªûÂøÉ"},
                            "food_items": {
                                "type": "ARRAY",
                                "items": {"type": "STRING"}
                            },
                            "recipe_notes": {"type": "STRING", "description": "Á∞°ÂñÆÁöÑÁÉπÈ£™Âª∫Ë≠∞ÊàñÁµÑÂêàË™™Êòé"}
                        },
                        "required": ["meal_type", "food_items"]
                    }
                },
                "exercises": {
                    "type": "ARRAY",
                    "items": {
                        "type": "OBJECT",
                        "properties": {
                            "exercise_type": {"type": "STRING", "description": "‰æãÂ¶ÇÔºöÊÖ¢Ë∑ë„ÄÅÈáçË®ì„ÄÅÁëú‰ºΩ"},
                            "duration": {"type": "STRING", "description": "‰æãÂ¶ÇÔºö30ÂàÜÈêò"},
                            "intensity": {"type": "STRING", "description": "‰æãÂ¶ÇÔºöËºïÂ∫¶„ÄÅ‰∏≠Á≠â„ÄÅÈ´òÂº∑Â∫¶"}
                        },
                        "required": ["exercise_type", "duration"]
                    }
                }
            },
            "required": ["day", "meals", "exercises"]
        }
    }


    # Options for goal and duration
    goal_options = ["È§äÁîü", "ÂÅ•Â∫∑", "Ê∏õËÇ•"]
    duration_options = ["‰∏ÄÈÄ±", "‰∏ÄÂÄãÊúà"]

    # Input fields for general plan generation
    st.subheader("üí° Êô∫ËÉΩÁîüÊàêË®àÁï´")
    st.write("Ë®≠ÂÆöÊÇ®ÁöÑÂÅ•Â∫∑ÁõÆÊ®ôËàáÊôÇÈï∑ÔºåËÆìÊô∫ËÉΩÂ∞èÂπ´ÊâãÁÇ∫ÊÇ®ÈáèË∫´ÊâìÈÄ†Â∞àÂ±¨ÁöÑÈ£≤È£üËàáÈÅãÂãïË®àÁï´ÔºÅ")
    col_goal, col_duration = st.columns(2)
    with col_goal:
        goal = st.selectbox("ÈÅ∏ÊìáÊÇ®ÁöÑÂÅ•Â∫∑ÁõÆÊ®ô", goal_options, key="assistant_goal_select")
    with col_duration:
        duration = st.selectbox("ÈÅ∏ÊìáË®àÁï´ÊôÇÈï∑", duration_options, key="assistant_duration_select")

    # Get user profile information from session_state for personalized prompts
    user_age = st.session_state.get('age', 25)
    user_gender = st.session_state.get('gender', 'Áî∑ÊÄß')
    user_activity_level = st.session_state.get('activity_level', '‰πÖÂùê (ÂæàÂ∞ëÈÅãÂãï)')

    # Try to get latest weight and height for BMR/TDEE calculation
    latest_weight = 65.0
    latest_height = 170.0
    if not st.session_state.df_history.empty:
        last_record = st.session_state.df_history.sort_values(by='Êó•Êúü', ascending=False).iloc[0]
        latest_weight = last_record['È´îÈáç(kg)'] if pd.notna(last_record['È´îÈáç(kg)']) and last_record['È´îÈáç(kg)'] > 0 else 65.0
        latest_height = last_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)'] if pd.notna(last_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)']) and last_record['Ë∫´È´ò(ÂÖ¨ÂàÜ)'] > 0 else 170.0
    else:
        st.warning("Ë´ãÂú®„ÄåË®≠ÂÆö„ÄçÈ†ÅÈù¢Êõ¥Êñ∞ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áË®äÔºàË∫´È´ò„ÄÅÈ´îÈáç„ÄÅÂπ¥ÈΩ°„ÄÅÊ¥ªÂãïÁ®ãÂ∫¶ÔºâÔºå‰ª•‰æøÂ∞èÂπ´ÊâãÊèê‰æõÊõ¥Á≤æÊ∫ñÁöÑÂª∫Ë≠∞„ÄÇÁõÆÂâçÂ∞á‰ΩøÁî®È†êË®≠ÂÄº„ÄÇ")


    bmr, tdee = calculate_bmr_tdee(user_gender, latest_weight, latest_height, user_age, user_activity_level)

    # Generate Plan Button
    if st.button("ÁîüÊàêË®àÁï´", key="generate_plan_button"):
        with st.empty():
            st.markdown("<div class='ai-loading-spinner'></div>", unsafe_allow_html=True)
            st.info("Â∞èÂπ´ÊâãÊ≠£Âú®ÁÇ∫ÊÇ®Ë®≠Ë®àÂ∞àÂ±¨Ë®àÁï´... üöÄ Ë´ãÁ®çÂÄôÂñîÔºÅ")

        # Construct the prompt for Gemini
        prompt = f"Ë´ãÁÇ∫‰∏Ä‰Ωç{user_age}Ê≠≤ÁöÑ{user_gender}„ÄÅË∫´È´ò{latest_height:.1f}ÂÖ¨ÂàÜ„ÄÅÈ´îÈáç{latest_weight:.1f}ÂÖ¨Êñ§ÔºåÊ¥ªÂãïÁ®ãÂ∫¶ÁÇ∫'{user_activity_level}'ÁöÑÁî®Êà∂ÔºåË®≠Ë®à‰∏ÄÂÄã{duration}ÁöÑ{goal}Ë®àÁï´„ÄÇ\n"
        prompt += f"Ê†πÊìöÂÖ∂‰º∞Ë®àÂü∫Á§é‰ª£Ë¨ùÁéá (BMR) Á¥Ñ {bmr:.0f} Â§ßÂç°ÔºåÊØèÊó•Á∏ΩËÉΩÈáèÊ∂àËÄó (TDEE) Á¥Ñ {tdee:.0f} Â§ßÂç°ÔºåË´ãÊèê‰æõË©≥Á¥∞ÁöÑÈ£≤È£üËèúÂñÆÂíåÈÅãÂãïËèúÂñÆ„ÄÇ\n"
        
        if goal == "Ê∏õËÇ•":
            target_calorie_range = f"{max(0, tdee - 500):.0f} - {tdee - 250:.0f} Â§ßÂç°"
            prompt += f"È£≤È£üËèúÂñÆÁöÑÊØèÊó•Á∏ΩÁÜ±ÈáèÁõÆÊ®ôÁØÑÂúçÂ§ßÁ¥ÑÂú® {target_calorie_range} ‰πãÈñì„ÄÇ\n"
            prompt += "È£≤È£üÊáâ‰ª•ÂéüÂûãÈ£üÁâ©ÁÇ∫‰∏ªÔºå‰ΩéÊ≤π„ÄÅ‰ΩéÁ≥ñ„ÄÅÈ´òÁ∫ñ„ÄÅË∂≥ÈáèËõãÁôΩË≥™„ÄÇÊØèÈ§êË´ãÊèê‰æõÁ∞°ÂñÆÈ£üË≠úÊàñÁµÑÂêàË™™Êòé„ÄÇ\n"
            prompt += "ÈÅãÂãïËèúÂñÆÊáâÂåÖÂê´ÊúâÊ∞ßÈÅãÂãïÂíåÂäõÈáèË®ìÁ∑¥Ôºå‰∏¶Êèê‰æõÊØèÈ†ÖÈÅãÂãïÁöÑÊôÇÈñìÊàñÁµÑÊï∏Âª∫Ë≠∞Ôºå‰ª•ÂèäÂº∑Â∫¶Ê®ôÁ§∫ÔºàËºïÂ∫¶„ÄÅ‰∏≠Á≠â„ÄÅÈ´òÂº∑Â∫¶Ôºâ„ÄÇ\n"
        elif goal == "ÂÅ•Â∫∑":
            target_calorie_range = f"{tdee - 100:.0f} - {tdee + 100:.0f} Â§ßÂç°"
            prompt += f"È£≤È£üËèúÂñÆÁöÑÊØèÊó•Á∏ΩÁÜ±ÈáèÁõÆÊ®ôÁØÑÂúçÂ§ßÁ¥ÑÂú® {target_calorie_range} ‰πãÈñìÔºåÂº∑Ë™øÂùáË°°ÁáüÈ§äÔºå‰∫îÂ§ßÈ°ûÈ£üÁâ©ÈÉΩÊáâÂåÖÂê´„ÄÇ\n"
            prompt += "È£≤È£üÊáâÊ≥®ÈáçÂ§öÊ®£ÊÄßÔºåËâ≤ÂΩ©Ë±êÂØåÔºåÁÉπÈ£™ÊñπÂºèÂÅ•Â∫∑„ÄÇÊØèÈ§êË´ãÊèê‰æõÁ∞°ÂñÆÈ£üË≠úÊàñÁµÑÂêàË™™Êòé„ÄÇ\n"
            prompt += "ÈÅãÂãïËèúÂñÆÊáâÊ≥®ÈáçÂÖ®Ë∫´ÂçîË™øÂíåÂøÉËÇ∫ÂäüËÉΩÔºåÂåÖÂê´Â§öÊ®£ÂåñÁöÑÈÅãÂãïÈ°ûÂûãÔºå‰∏¶Êèê‰æõÊØèÈ†ÖÈÅãÂãïÁöÑÊôÇÈñìÊàñÁµÑÊï∏Âª∫Ë≠∞Ôºå‰ª•ÂèäÂº∑Â∫¶Ê®ôÁ§∫„ÄÇ\n"
        elif goal == "È§äÁîü":
            target_calorie_range = f"{tdee - 200:.0f} - {tdee:.0f} Â§ßÂç°"
            prompt += f"È£≤È£üËèúÂñÆÁöÑÊØèÊó•Á∏ΩÁÜ±ÈáèÁõÆÊ®ôÁØÑÂúçÂ§ßÁ¥ÑÂú® {target_calorie_range} ‰πãÈñìÔºåÂº∑Ë™øÊ∫´ÂíåÊªãË£ú„ÄÅÊòìÊñºÊ∂àÂåñÔºåÂèØÂ§ö‰ΩøÁî®Â≠£ÁØÄÊÄßÈ£üÊùê„ÄÅËó•ËÜ≥È£üÊùêÔºàÂ¶ÇÁ¥ÖÊ£ó„ÄÅÊû∏ÊùûÁ≠âÔºâÔºå‰ΩÜÈÅøÂÖçÈÅéÊñºË§áÈõú„ÄÇ\n"
            prompt += "ÁÉπÈ£™ÊñπÂºè‰ª•Ëí∏„ÄÅÁÖÆ„ÄÅÁáâÁÇ∫‰∏ªÔºåÈÅøÂÖçÊ≤πÁÇ∏ÂíåÈáçÂè£Âë≥„ÄÇÊØèÈ§êË´ãÊèê‰æõÁ∞°ÂñÆÈ£üË≠úÊàñÁµÑÂêàË™™Êòé„ÄÇ\n"
            prompt += "ÈÅãÂãïËèúÂñÆÊáâ‰ª•ËàíÁ∑©„ÄÅÊúâÂä©ÊñºË∫´ÂøÉÊîæÈ¨ÜÂíåÁ∂ìÁµ°ÈÄöÊö¢ÁöÑÈÅãÂãïÁÇ∫‰∏ªÔºå‰æãÂ¶ÇÁëú‰ºΩ„ÄÅÂ§™Ê•µ„ÄÅÊï£Ê≠•Á≠âÔºå‰∏¶Êèê‰æõÊØèÈ†ÖÈÅãÂãïÁöÑÊôÇÈñìÊàñÁµÑÊï∏Âª∫Ë≠∞Ôºå‰ª•ÂèäÂº∑Â∫¶Ê®ôÁ§∫ÔºàËºïÂ∫¶„ÄÅ‰∏≠Á≠âÔºâ„ÄÇ\n"

        if duration == "‰∏ÄÈÄ±":
            prompt += "Ë´ãÁîüÊàêÊé•‰∏ã‰æÜ7Â§©ÁöÑÊØèÊó•Ë®àÁï´„ÄÇ"
            plan_schema_for_gemini = plan_schema
        else: # ‰∏ÄÂÄãÊúà
            prompt += "Ë´ãÁîüÊàê‰∏ÄÂÄãÊúàÁöÑË®àÁï´ÔºåÂèØ‰ª•ÊåâÈÄ±ÊàñÊØè5-7Â§©ÁÇ∫‰∏ÄÂÄãÂæ™Áí∞Êèê‰æõË®àÁï´„ÄÇ\n"
            # For monthly plan, we might ask Gemini to generate 4 weeks of plans.
            # Or generate a template for a week and suggest repeating it.
            # Let's try to ask for 4 weeks with the same schema for simplicity,
            # or it can generate a smaller array and explain "repeat this"
            prompt += "Â¶ÇÊûúÂÖßÂÆπÈÅéÂ§öÔºåÊÇ®ÂèØ‰ª•Êèê‰æõ‰∏ÄÂÄãÈÄöÁî®ÁöÑ‰∏ÄÈÄ±Ë®àÁï´‰∏¶Âª∫Ë≠∞ÈáçË§áÂü∑Ë°å4Ê¨°ÔºåÊàñÊèê‰æõÂõõÂÄã‰∏çÂêåÁöÑÈÄ±Ë®àÁï´ÊëòË¶Å„ÄÇË´ãÊ∏ÖÊô∞Ê®ôÁ§∫ÊØè‰∏ÄÂ§©„ÄÇ"
            plan_schema_for_gemini = plan_schema # Using the same schema for now, might need adaptation if Gemini returns more complex monthly structure.

        st.session_state.generated_plan = call_gemini_api_for_plan(prompt, gemini_api_key, plan_schema_for_gemini)

        if st.session_state.generated_plan:
            st.success("Â∞èÂπ´ÊâãÂ∑≤ÁÇ∫ÊÇ®ÁîüÊàêÂ∞àÂ±¨Ë®àÁï´ÔºÅ")
        else:
            st.error("Êä±Ê≠âÔºåÂ∞èÂπ´ÊâãÊö´ÊôÇÁÑ°Ê≥ïÁîüÊàêË®àÁï´„ÄÇË´ãÁ¢∫Ë™çËº∏ÂÖ•Ë≥áË®äÊàñÁ®çÂæåÂÜçË©¶„ÄÇ")
        
        # Keep the user on the assistant page
        st.session_state.current_page_index = page_names.index("ü§ñ Â∞èÂπ´Êâã")
        st.rerun()

    # Display generated plan if available in session state
    if st.session_state.get('generated_plan'):
        st.markdown("---")
        st.subheader(f"‚ú® ÊÇ®ÁöÑ {duration} {goal} Ë®àÁï´")
        st.write("ÈÄôÊòØ‰∏Ä‰ªΩÁÇ∫ÊÇ®ÈáèË∫´ÊâìÈÄ†ÁöÑÂÅ•Â∫∑ËóçÂúñÔºåË∑üËëóÂ∞èÂπ´Êâã‰∏ÄËµ∑ËÆäÂÅ•Â∫∑ÂêßÔºÅ")

        plan_data = st.session_state.generated_plan

        # If the plan is for a month and Gemini generated a weekly template, handle it
        # This part might need refinement based on actual Gemini output structure
        if duration == "‰∏ÄÂÄãÊúà" and len(plan_data) < 28: # Heuristic for a condensed monthly plan (e.g., just one week's worth)
            st.info("ÈÄôÊòØÊÇ®ÁöÑ‰∏ÄÂÄãÊúàË®àÁï´ÁöÑÁ¨¨‰∏ÄÈÄ±ÁØÑ‰æã„ÄÇÊÇ®ÂèØ‰ª•ÈáçË§áÊ≠§Âæ™Áí∞ÂõõÊ¨°‰æÜÂÆåÊàê‰∏ÄÂÄãÊúàÁöÑË®àÁï´ÔºÅ")
            
        for day_plan in plan_data:
            with st.expander(f"üóìÔ∏è **{day_plan.get('day', 'Êú™ÂëΩÂêçÊó•')}**", expanded=True):
                st.markdown("<p class='plan-header'>üçΩÔ∏è È£≤È£üËèúÂñÆ</p>", unsafe_allow_html=True)
                if day_plan.get('meals'):
                    for meal in day_plan['meals']:
                        food_items_str = ", ".join(meal.get('food_items', []))
                        st.markdown(f"<p class='day-header'>{meal.get('meal_type', 'È§êÈªû')}Ôºö</p>", unsafe_allow_html=True)
                        st.markdown(f"- **ËèúËâ≤**: {food_items_str}")
                        if meal.get('recipe_notes'):
                            st.markdown(f"- **ÂÇôË®ª**: {meal['recipe_notes']}")
                else:
                    st.info("ÁÑ°È£≤È£üÂª∫Ë≠∞„ÄÇ")

                st.markdown("<p class='plan-header'>üèãÔ∏è‚Äç‚ôÄÔ∏è ÈÅãÂãïËèúÂñÆ</p>", unsafe_allow_html=True)
                if day_plan.get('exercises'):
                    for exercise in day_plan['exercises']:
                        st.markdown(f"<p class='day-header'>{exercise.get('exercise_type', 'ÈÅãÂãï')}Ôºö</p>", unsafe_allow_html=True)
                        st.markdown(f"- **ÊôÇÈñì**: {exercise.get('duration', 'N/A')}")
                        st.markdown(f"- **Âº∑Â∫¶**: {exercise.get('intensity', 'N/A')}")
                else:
                    st.info("ÁÑ°ÈÅãÂãïÂª∫Ë≠∞„ÄÇ")
            st.markdown("---") # Separator between days

    st.markdown("---")
    # New section for "ÂêÑÈ°ûÊ∏õËÇ•ËèúÂñÆ" (Diet Plans)
    st.subheader("ü•ó ÂêÑÈ°ûÊ∏õËÇ•ËèúÂñÆ")
    st.write("Êé¢Á¥¢‰∏çÂêåÁöÑÈ£≤È£üÊñπÊ°àÔºåÊâæÂà∞ÈÅ©ÂêàÊÇ®ÁöÑÂÅ•Â∫∑ÁîüÊ¥ªÊñπÂºèÔºÅ")

    diet_type = st.selectbox(
        "ÈÅ∏ÊìáÊÇ®ÊÑüËààË∂£ÁöÑÈ£≤È£üÊñπÊ°à",
        [
            "Âú∞‰∏≠Êµ∑È£≤È£ü",
            "ÁîüÈÖÆÈ£≤È£ü",
            "168Êñ∑È£üÊ∫´ÂíåÁâà",
            "1212Êñ∑È£ü",
            "Ê∏õÈÜ£È£≤È£ü",
            "Á¢≥Ê∞¥Âæ™Áí∞",
            "Âäâ‰∫¶Ëè≤Ê∏õËÇ•Ê≥ï",
            "‰∫îÊó•ËºïÊñ∑È£ü",
            "‰æøÂà©ÂïÜÂ∫óÊ∏õËÇ•ËèúÂñÆÂïÜÂìÅ",
            "Ëóù‰∫∫Ê∏õËÇ•ËèúÂñÆ"
        ],
        key="diet_type_select"
    )

    # Dictionary containing detailed information for each diet plan.
    # This data structure allows for easy expansion and maintenance of diet information.
    diet_info = {
        "Âú∞‰∏≠Êµ∑È£≤È£ü": {
            "ÊèèËø∞": "‰∏ÄÁ®ÆÂº∑Ë™øÊîùÂèñÂ§ßÈáèËî¨Ëèú„ÄÅÊ∞¥Êûú„ÄÅÂÖ®Á©ÄÁâ©„ÄÅË±ÜÈ°û„ÄÅÂ†ÖÊûú„ÄÅÊ©ÑÊ¨ñÊ≤πÔºå‰∏¶ÈÅ©ÈáèÊîùÂèñÈ≠öÈ°û„ÄÅ‰π≥Ë£ΩÂìÅÂíåÁ¶ΩËÇâÔºåÁ¥ÖËÇâËºÉÂ∞ëÁöÑÈ£≤È£üÊ®°Âºè„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ËøΩÊ±ÇÂÅ•Â∫∑„ÄÅÊÖ¢ÊÄßÁóÖÈ†êÈò≤„ÄÅÂøÉË°ÄÁÆ°ÂÅ•Â∫∑ÔºåÊàñÊÉ≥ÊîπÂñÑÁîüÊ¥ªÊñπÂºèÁöÑ‰∫∫„ÄÇ‰∏çÈÅ©ÂêàÈúÄË¶ÅÂö¥Ê†ºÊéßÂà∂ÁâπÂÆöÁáüÈ§äÁ¥†ÊîùÂèñÁöÑ‰∫∫Áæ§„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **Â§öÂêÉÔºö** Ëî¨Ëèú„ÄÅÊ∞¥Êûú„ÄÅÂÖ®Á©ÄÁâ©„ÄÅË±ÜÈ°û„ÄÅÂ†ÖÊûú„ÄÅÁ®ÆÂ≠ê„ÄÅÈ¶ôÊñô„ÄÅÊ©ÑÊ¨ñÊ≤π„ÄÇ
            * **ÈÅ©ÈáèÔºö** È≠öÈ°û„ÄÅÊµ∑ÈÆÆÔºàÊØèÈÄ±Ëá≥Â∞ëÂÖ©Ê¨°Ôºâ„ÄÅÁ¶ΩËÇâ„ÄÅËõã„ÄÅ‰π≥Ë£ΩÂìÅÔºàÂÑ™Ê†º„ÄÅËµ∑Âè∏Ôºâ„ÄÇ
            * **Â∞ëÂêÉÔºö** Á¥ÖËÇâ„ÄÅÂä†Â∑•È£üÂìÅ„ÄÅÁ≤æÁ∑ªÁ¢≥Ê∞¥ÂåñÂêàÁâ©„ÄÅÂê´Á≥ñÈ£≤Êñô„ÄÇ
            * **È£≤ÂìÅÔºö** Ê∞¥ÊòØ‰∏ªË¶ÅÈ£≤ÂìÅÔºåÈÅ©ÈáèÈ£≤Áî®Á¥ÖÈÖíÔºàÂ¶ÇÊûúÈÅ©Áî®Ôºâ„ÄÇ
            **‰∏ÄÈÄ±ËèúÂñÆÁØÑ‰æãÔºö**
            * **Êó©È§êÔºö** ÂÖ®È∫•ÂêêÂè∏Êê≠ÈÖçÈÖ™Ê¢®ÂíåÊ∞¥ÁÖÆËõãÔºõÊàñÂÑ™Ê†ºÂä†Ê∞¥ÊûúÂíåÂ†ÖÊûú„ÄÇ
            * **ÂçàÈ§êÔºö** ËóúÈ∫•Ê≤ôÊãâÊê≠ÈÖçÁÉ§ÈÆ≠È≠öÂíåÂ§öÁ®ÆËî¨ËèúÔºõÊàñÊâÅË±ÜÊπØÊê≠ÈÖçÂÖ®È∫•È∫µÂåÖ„ÄÇ
            * **ÊôöÈ§êÔºö** ÈõûËÇâÁáâËî¨ËèúÔºàÁî®Ê©ÑÊ¨ñÊ≤πÁÉπË™øÔºâÔºõÊàñÂÖ®È∫•Áæ©Â§ßÂà©È∫µÊê≠ÈÖçÊµ∑ÈÆÆÂíåÁï™ËåÑÈÜ¨„ÄÇ
            * **ÈªûÂøÉÔºö** Ê∞¥Êûú„ÄÅÂ†ÖÊûú„ÄÅËî¨ËèúÊ£í„ÄÇ
            """,
            "ÂÑ™Èªû": "ÊúâÁõäÂøÉËáüÂÅ•Â∫∑„ÄÅÈôç‰ΩéÊÖ¢ÊÄßÁóÖÈ¢®Èö™„ÄÅÈ´îÈáçÁÆ°ÁêÜ„ÄÅÊäóÁÇé„ÄÇ",
            "Áº∫Èªû": "ÂèØËÉΩÈúÄË¶ÅËä±Êõ¥Â§öÊôÇÈñìÊ∫ñÂÇôÈ£üÁâ©ÔºåÂ∞ç‰∏çÁøíÊÖ£Âú∞‰∏≠Êµ∑È£üÊùêÁöÑ‰∫∫‰æÜË™™ÂèØËÉΩÂàùÊúüËºÉÈõ£ÈÅ©Êáâ„ÄÇ",
            "Âª∫Ë≠∞": "ÂæûÈÄêÊ≠•Â¢ûÂä†Ëî¨Ëèú„ÄÅÊ∞¥ÊûúÂíåÂÖ®Á©ÄÁâ©ÁöÑÊîùÂèñÈñãÂßãÔºåÁî®Ê©ÑÊ¨ñÊ≤πÂèñ‰ª£ÂÖ∂‰ªñËÑÇËÇ™„ÄÇ"
        },
        "ÁîüÈÖÆÈ£≤È£ü": {
            "ÊèèËø∞": "‰∏ÄÁ®ÆÊ•µ‰ΩéÁ¢≥Ê∞¥ÂåñÂêàÁâ©„ÄÅÈ´òËÑÇËÇ™„ÄÅÈÅ©ÈáèËõãÁôΩË≥™ÁöÑÈ£≤È£üÊñπÂºèÔºåÊó®Âú®ËÆìË∫´È´îÈÄ≤ÂÖ•„ÄåÁîüÈÖÆÁãÄÊÖã„ÄçÔºåÁáÉÁáíËÑÇËÇ™ËÄåÈùûÁ¢≥Ê∞¥ÂåñÂêàÁâ©‰ΩúÁÇ∫‰∏ªË¶ÅËÉΩÈáè‰æÜÊ∫ê„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÈúÄÂø´ÈÄüÊ∏õÈáç„ÄÅÁô≤ÁôáÊÇ£ËÄÖÔºàÂú®ÈÜ´ÁîüÊåáÂ∞é‰∏ãÔºâÔºåÊàñÂ∞çÂÖ∂‰ªñÈ£≤È£üÊ≥ïÊïàÊûú‰∏ç‰Ω≥ËÄÖ„ÄÇ‰∏çÈÅ©ÂêàÂ≠ïÂ©¶„ÄÅÂì∫‰π≥ÊúüÂ©¶Â•≥„ÄÅËÇùËÖéÂäüËÉΩ‰∏çÂÖ®ËÄÖ„ÄÅÁ≥ñÂ∞øÁóÖÊÇ£ËÄÖÔºàÈúÄÂö¥ÂØÜÁõ£ÊéßÔºâ„ÄÇ**Âü∑Ë°åÂâçÂãôÂøÖË´ÆË©¢ÈÜ´ÁîüÊàñÁáüÈ§äÂ∏´„ÄÇ**",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **Á¢≥Ê∞¥ÂåñÂêàÁâ©Ôºö** ÊØèÂ§©ÊîùÂèñÈÄöÂ∏∏ÈôêÂà∂Âú® 20-50 ÂÖã‰ª•‰∏ã„ÄÇ
            * **ËÑÇËÇ™Ôºö** ‰ΩîÁ∏ΩÁÜ±ÈáèÊîùÂèñÁöÑ 70-75%„ÄÇ
            * **ËõãÁôΩË≥™ÔºöÔºö** ‰ΩîÁ∏ΩÁÜ±ÈáèÊîùÂèñÁöÑ 20-25%„ÄÇ
            **Â∏∏Ë¶ãÈ£üÁâ©Ôºö**
            * **ËÑÇËÇ™Ôºö** ÈÖ™Ê¢®„ÄÅÊ©ÑÊ¨ñÊ≤π„ÄÅÊ§∞Â≠êÊ≤π„ÄÅÂ•∂Ê≤π„ÄÅÂ†ÖÊûú„ÄÅÁ®ÆÂ≠ê„ÄÇ
            * **ËõãÁôΩË≥™Ôºö** ËÇâÈ°û„ÄÅÈ≠öÈ°û„ÄÅËõã„ÄÅËµ∑Âè∏„ÄÇ
            * **Ëî¨ËèúÔºö** Á∂†ËëâËî¨ËèúÔºàËè†Ëèú„ÄÅÁæΩË°£ÁîòËóçÔºâ„ÄÅËä±Ê§∞Ëèú„ÄÅË•øËò≠Ëä±„ÄÇ
            **‰∏ÄÈÄ±ËèúÂñÆÁØÑ‰æãÔºö**
            * **Êó©È§êÔºö** ÁÇíËõãÂä†ÈÖ™Ê¢®ÂíåÂüπÊ†π„ÄÇ
            * **ÂçàÈ§êÔºö** ÈÆ≠È≠öÊ≤ôÊãâÔºàÈ´òËÑÇÈÜ¨ÊñôÔºâ„ÄÇ
            * **ÊôöÈ§êÔºö** ÁÉ§ÈõûËÖøÊê≠ÈÖçÂ•∂Ê≤πËè†Ëèú„ÄÇ
            * **ÈªûÂøÉÔºö** Â†ÖÊûú„ÄÅËµ∑Âè∏„ÄÅÈò≤ÂΩàÂíñÂï°„ÄÇ
            """,
            "ÂÑ™Èªû": "Âø´ÈÄüÊ∏õÈáç„ÄÅÊéßÂà∂Ë°ÄÁ≥ñ„ÄÅÊîπÂñÑÁô≤Áôá„ÄÅÂèØËÉΩÈôç‰ΩéÈ£üÊÖæ„ÄÇ",
            "Áº∫Èªû": "ÂèØËÉΩÂ∞éËá¥„ÄåÈÖÆÊµÅÊÑü„ÄçÔºàÁñ≤Âãû„ÄÅÈ†≠Áóõ„ÄÅÂôÅÂøÉÔºâ„ÄÅÁáüÈ§ä‰∏çÂùá„ÄÅÂ∞çÂøÉËáüÂÅ•Â∫∑ÂΩ±ÈüøÂ∞öÊúâÁà≠Ë≠∞„ÄÅÈï∑ÊúüÂü∑Ë°åÂõ∞Èõ£„ÄÇ",
            "Âª∫Ë≠∞": "ÂøÖÈ†àÂú®Â∞àÊ•≠‰∫∫Â£´ÊåáÂ∞é‰∏ãÈÄ≤Ë°åÔºåÊ≥®ÊÑèÈõªËß£Ë≥™Ë£úÂÖÖÔºåÂ§öÂñùÊ∞¥Ôºå‰∏¶Áõ£Ê∏¨Ë∫´È´îÂèçÊáâ„ÄÇ"
        },
        "168Êñ∑È£üÊ∫´ÂíåÁâà": {
            "ÊèèËø∞": "ÊØèÊó•Â∞áÈÄ≤È£üÊôÇÈñìÈôêÂà∂Âú® 8 Â∞èÊôÇÂÖßÔºåÂÖ∂È§ò 16 Â∞èÊôÇÁ¶ÅÈ£üÔºàÂåÖÂê´Áù°Áú†ÊôÇÈñìÔºâ„ÄÇÊ∫´ÂíåÁâàÂèØËÉΩÂÖÅË®±Âú®Á¶ÅÈ£üÊúüÈñìÈ£≤Áî®ÁÑ°Á≥ñÂíñÂï°„ÄÅËå∂„ÄÅÊ∞¥Á≠â„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÊÉ≥ÂòóË©¶ÈñìÊ≠áÊÄßÊñ∑È£üÁöÑÂàùÂ≠∏ËÄÖ„ÄÅÈ´îÈáçÁÆ°ÁêÜËÄÖ„ÄÅÊÉ≥ÊîπÂñÑËÉ∞Â≥∂Á¥†ÊïèÊÑüÂ∫¶ËÄÖ„ÄÇ‰∏çÈÅ©ÂêàÂ≠ïÂ©¶„ÄÅÂì∫‰π≥ÊúüÂ©¶Â•≥„ÄÅÁ≥ñÂ∞øÁóÖÊÇ£ËÄÖÔºàÈúÄÂú®ÈÜ´ÁîüÊåáÂ∞é‰∏ãÔºâ„ÄÅÈ´îÈáçÈÅéËºïËÄÖ„ÄÅÈ£≤È£üÂ§±Ë™øËÄÖ„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * ÈÅ∏Êìá‰∏ÄÂÄã 8 Â∞èÊôÇÁöÑÈÄ≤È£üÁ™óÂè£Ôºå‰æãÂ¶Ç‰∏≠Âçà 12 ÈªûÂà∞Êôö‰∏ä 8 Èªû„ÄÇ
            * Âú®ÈÄ≤È£üÁ™óÂè£ÂÖßÊ≠£Â∏∏È£≤È£üÔºàÂÅ•Â∫∑ÂùáË°°ÁöÑÈ§êÈªûÔºâ„ÄÇ
            * Âú®Á¶ÅÈ£üÊúüÈñìÂè™È£≤Áî®ÁÑ°ÁÜ±ÈáèÈ£≤ÂìÅ„ÄÇ
            **Ê∫´ÂíåÁâàÁâπÈªûÔºö**
            * ÂèØËÉΩÂÖÅË®±Âú®Á¶ÅÈ£üÊúüÊîùÂèñÂ∞ëÈáèÔºà‰æãÂ¶Ç 50 Âç°‰ª•‰∏ãÔºâÁöÑÈ£üÁâ©Ôºå‰ΩÜÈÄôÊúÉÂâäÂº±Êñ∑È£üÊïàÊûúÔºåËºÉÂª∫Ë≠∞Âè™ÂñùÁÑ°ÁÜ±ÈáèÈ£≤ÂìÅ„ÄÇ
            **‰∏ÄÊó•ËèúÂñÆÁØÑ‰æãÔºàÈÄ≤È£üÁ™óÂè£ 12:00-20:00ÔºâÔºö**
            * **12:00 ÂçàÈ§êÔºö** Á≥ôÁ±≥È£Ø„ÄÅÁÉ§ÈõûËÉ∏ËÇâ„ÄÅÂ§öÁ®ÆËî¨Ëèú„ÄÇ
            * **16:00 ÈªûÂøÉÔºö** ‰∏Ä‰ªΩÊ∞¥ÊûúÊàñÂÑ™Ê†º„ÄÇ
            * **19:00 ÊôöÈ§êÔºö** Ëî¨ËèúÊπØÈ∫µÊàñÈõúÁ≥ßÈ£ØÊê≠ÈÖçÈ≠öËÇâ„ÄÇ
            * **Á¶ÅÈ£üÊúüÔºö** Âè™ÂñùÊ∞¥„ÄÅÈªëÂíñÂï°„ÄÅÁÑ°Á≥ñËå∂„ÄÇ
            """,
            "ÂÑ™Èªû": "ÊúâÂä©ÊñºÈ´îÈáçÁÆ°ÁêÜ„ÄÅÊîπÂñÑËÉ∞Â≥∂Á¥†ÊïèÊÑüÂ∫¶„ÄÅÁ∞°ÂåñÈ£≤È£ü„ÄÅÂèØËÉΩÊîπÂñÑÁ¥∞ËÉû‰øÆÂæ©„ÄÇ",
            "Áº∫Èªû": "ÂàùÊúüÂèØËÉΩÊÑüÂà∞È£¢È§ìÊàñÁñ≤Âãû„ÄÅÈÉ®ÂàÜ‰∫∫ÂèØËÉΩÂá∫ÁèæÈ†≠Êöà„ÄÅÊ≥®ÊÑèÂäõ‰∏çÈõÜ‰∏≠„ÄÇ",
            "Âª∫Ë≠∞": "Âæ™Â∫èÊº∏ÈÄ≤ÔºåÂæûÁ∏ÆÁü≠ÈÄ≤È£üÁ™óÂè£ÈñãÂßãÔºõÂú®ÈÄ≤È£üÊúüÈñìÁ¢∫‰øùÁáüÈ§äÂùáË°°ÔºõÂ§öÂñùÊ∞¥„ÄÇ"
        },
        "1212Êñ∑È£ü": {
            "ÊèèËø∞": "ÊúÄÊ∫´ÂíåÁöÑÈñìÊ≠áÊÄßÊñ∑È£üÂΩ¢ÂºèÔºåÊØèÂ§©Êúâ 12 Â∞èÊôÇÁöÑÈÄ≤È£üÁ™óÂè£Âíå 12 Â∞èÊôÇÁöÑÁ¶ÅÈ£üÁ™óÂè£„ÄÇ‰æãÂ¶ÇÔºåÊó©‰∏ä 8 ÈªûÂà∞Êôö‰∏ä 8 ÈªûÈÄ≤È£üÔºåÂÖ∂È§òÊôÇÈñìÁ¶ÅÈ£ü„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÈñìÊ≠áÊÄßÊñ∑È£üÁöÑÂÖ•ÈñÄËÄÖ„ÄÅ‰ΩúÊÅØË¶èÂæãÁöÑ‰∫∫„ÄÅÊÉ≥ÊîπÂñÑÊ∂àÂåñÂíåËºïÂæÆÈ´îÈáçÁÆ°ÁêÜËÄÖ„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * ÈÅ∏Êìá‰∏ÄÂÄãÊñπ‰æøÁöÑ 12 Â∞èÊôÇÈÄ≤È£üÁ™óÂè£„ÄÇ
            * Á¢∫‰øùÂú®ÈÄ≤È£üÁ™óÂè£ÂÖßÊîùÂèñÂùáË°°ÁöÑ‰∏âÈ§ê„ÄÇ
            * Á¶ÅÈ£üÊúüÈñìÂè™È£≤Áî®ÁÑ°ÁÜ±ÈáèÈ£≤ÂìÅ„ÄÇ
            **‰∏ÄÊó•ËèúÂñÆÁØÑ‰æãÔºàÈÄ≤È£üÁ™óÂè£ 08:00-20:00ÔºâÔºö**
            * **08:00 Êó©È§êÔºö** ÁáïÈ∫•Á≤•Âä†Ê∞¥ÊûúÂíåÂ†ÖÊûú„ÄÇ
            * **13:00 ÂçàÈ§êÔºö** ÈõûËÇâËî¨ËèúÊç≤È§Ö„ÄÇ
            * **19:00 ÊôöÈ§êÔºö** Ë±ÜËÖêËî¨ËèúÁÇíÈ£Ø„ÄÇ
            * **Á¶ÅÈ£üÊúüÔºöÔºö** Âè™ÂñùÊ∞¥„ÄÅÈªëÂíñÂï°„ÄÅÁÑ°Á≥ñËå∂„ÄÇ
            """,
            "ÂÑ™Èªû": "ÈùûÂ∏∏ÂÆπÊòìÂü∑Ë°å„ÄÅÂ∞çË∫´È´îË≤†ÊìîÂ∞è„ÄÅÊúâÂä©ÊñºÂª∫Á´ãË¶èÂæãÈ£≤È£üÁøíÊÖ£„ÄÅÊîπÂñÑÊ∂àÂåñ„ÄÇ",
            "Áº∫Èªû": "Ê∏õÈáçÊïàÊûúÂèØËÉΩ‰∏çÂ¶ÇÊõ¥Èï∑ÊôÇÈñìÁöÑÊñ∑È£üÈ°ØËëó„ÄÇ",
            "Âª∫Ë≠∞": "ÈÄôÊòØÂÄãÂæàÂ•ΩÁöÑÂÖ•ÈñÄÊñπÂºèÔºåÂèØ‰ª•ÊÖ¢ÊÖ¢ÈÅéÊ∏°Âà∞ 14:10 Êàñ 16:8„ÄÇ"
        },
        "Ê∏õÈÜ£È£≤È£ü": {
            "ÊèèËø∞": "Áõ∏Â∞ç‰ΩéÁ¢≥Ê∞¥ÂåñÂêàÁâ©ÁöÑÈ£≤È£üÊñπÂºèÔºåÈÄöÂ∏∏Â∞áÊØèÊó•Á¢≥Ê∞¥ÂåñÂêàÁâ©ÊîùÂèñÈáèÊéßÂà∂Âú® 100-150 ÂÖãÔºàÊàñÊõ¥‰ΩéÔºå‰ΩÜÈ´òÊñºÁîüÈÖÆÈ£≤È£üÔºâ„ÄÇÂº∑Ë™øÂÑ™Ë≥™ËõãÁôΩË≥™„ÄÅÂÅ•Â∫∑ËÑÇËÇ™ÂíåÂ§ßÈáèËî¨Ëèú„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÊÉ≥ÊéßÂà∂Ë°ÄÁ≥ñ„ÄÅÈ´îÈáçÁÆ°ÁêÜ„ÄÅÊîπÂñÑ‰ª£Ë¨ùÁóáÂÄôÁæ§„ÄÅÊàñÂ∞çÈ´òÁ¢≥Ê∞¥È£≤È£üÊïèÊÑüËÄÖ„ÄÇÁõ∏Â∞çÁîüÈÖÆÈ£≤È£üÊõ¥ÂÖ∑ÂΩàÊÄßÔºåÈÅ©ÂêàÈï∑ÊúüÂü∑Ë°å„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **Ê∏õÂ∞ëÔºö** Á≤æÁ∑ªÁ¢≥Ê∞¥ÂåñÂêàÁâ©ÔºàÁôΩÁ±≥„ÄÅÁôΩÈ∫µÂåÖ„ÄÅÂê´Á≥ñÈ£≤Êñô„ÄÅÁîúÈªûÔºâ„ÄÇ
            * **ÈÅ∏ÊìáÔºö** ÂÖ®Á©ÄÁâ©ÔºàÁ≥ôÁ±≥„ÄÅËóúÈ∫•Ôºâ„ÄÅË±ÜÈ°û„ÄÅÂ§ßÈáèÈùûÊæ±Á≤âÈ°ûËî¨Ëèú„ÄÅÂÑ™Ë≥™ËõãÁôΩË≥™ÔºàÈõûËõã„ÄÅÈ≠ö„ÄÅËÇâ„ÄÅË±ÜËÖêÔºâ„ÄÅÂÅ•Â∫∑ËÑÇËÇ™ÔºàÈÖ™Ê¢®„ÄÅÊ©ÑÊ¨ñÊ≤π„ÄÅÂ†ÖÊûúÔºâ„ÄÇ
            **‰∏ÄÈÄ±ËèúÂñÆÁØÑ‰æãÔºö**
            * **Êó©È§êÔºö** ÂÖ®È∫•‰∏âÊòéÊ≤ªÔºàÁÑ°Á≥ñËä±ÁîüÈÜ¨„ÄÅËõã„ÄÅÁîüËèúÔºâÔºõÊàñÊ∞¥ÁÖÆËõãÈÖçÂ∞èÈªÉÁìúÂíåÁï™ËåÑ„ÄÇ
            * **ÂçàÈ§êÔºö** ÈõûËÉ∏ËÇâÊ≤ôÊãâÔºàÂ§öÊ®£Ëî¨Ëèú„ÄÅÈÖ™Ê¢®ÔºâÔºõÊàñÈõúÁ≥ßÈ£ØÊê≠ÈÖçÁÉ§È≠öÂíåÁÇíÈùíËèú„ÄÇ
            * **ÊôöÈ§êÔºö** Ë±ÜËÖêËèáËèáÁÖ≤ÔºõÊàñ‰ΩéÈÜ£Ëä±Ê§∞ËèúÁ±≥ÁÇíÈ£Ø„ÄÇ
            * **ÈªûÂøÉÔºö** ‰∏ÄÂ∞èÊääÂ†ÖÊûú„ÄÅÂÑ™Ê†º„ÄÅËî¨ËèúÊ£í„ÄÇ
            """,
            "ÂÑ™Èªû": "ÊúâÂä©ÊñºÁ©©ÂÆöË°ÄÁ≥ñ„ÄÅÊéßÂà∂È´îÈáç„ÄÅÊîπÂñÑÈ£ΩË∂≥ÊÑü„ÄÅÁõ∏Â∞çÂÆπÊòìÈï∑ÊúüÁ∂≠ÊåÅ„ÄÇ",
            "Áº∫Èªû": "ÂàùÊúüÂèØËÉΩÂ∞çÊæ±Á≤âÈ°ûÈ£üÁâ©ÁöÑÊàíÊñ∑ÂèçÊáâÔºõÈúÄË¶ÅÂ≠∏ÁøíÈ£üÁâ©ÁöÑÁ¢≥Ê∞¥Âê´Èáè„ÄÇ",
            "Âª∫Ë≠∞": "ÂæûÈÄêÊ≠•Ê∏õÂ∞ëÁ≤æÁ∑ªÊæ±Á≤âÈñãÂßãÔºåÂ¢ûÂä†ËõãÁôΩË≥™ÂíåÁ∫ñÁ∂≠ÊîùÂèñÔºå‰øùÊåÅÂùáË°°„ÄÇ"
        },
        "Á¢≥Ê∞¥Âæ™Áí∞": {
            "ÊèèËø∞": "‰∏ÄÁ®ÆÂú®‰ΩéÁ¢≥Êó•„ÄÅ‰∏≠Á¢≥Êó•ÂíåÈ´òÁ¢≥Êó•‰πãÈñìÂàáÊèõÁöÑÈ£≤È£üÁ≠ñÁï•„ÄÇÊó®Âú®ÊúÄÂ§ßÂåñËÑÇËÇ™ÁáÉÁáí„ÄÅÁ∂≠ÊåÅËÇåËÇâÈáèÂíåÂÑ™ÂåñË®ìÁ∑¥Ë°®Áèæ„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÂÅ•Ë∫´ÊÑõÂ•ΩËÄÖ„ÄÅÈÅãÂãïÂì°„ÄÅÊúâÊ∏õËÑÇÂ¢ûËÇåÈúÄÊ±ÇÁöÑ‰∫∫ÔºåÊàñÊÉ≥Á™ÅÁ†¥Ê∏õÈáçÂπ≥Âè∞ÊúüËÄÖ„ÄÇ‰∏çÈÅ©ÂêàÂ∞çÈ£≤È£üÊéßÂà∂Ë¶ÅÊ±ÇËºÉ‰ΩéÊàñÊôÇÈñì‰∏çÂÖÖË£ïËÄÖ„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **‰ΩéÁ¢≥Êó•ÔºöÔºö** ÈÄöÂ∏∏Âú®‰∏çË®ìÁ∑¥ÊàñËºïÂ∫¶Ë®ìÁ∑¥Êó•ÔºåÊîùÂèñÊ•µ‰ΩéÁ¢≥Ê∞¥ÂåñÂêàÁâ©ÔºàÂ¶Ç 50 ÂÖã‰ª•‰∏ãÔºâÔºåÈ´òËÑÇËÇ™„ÄÅÈ´òËõãÁôΩË≥™„ÄÇ
            * **‰∏≠Á¢≥Êó•ÔºöÔºö** Âú®‰∏≠Á≠âÂº∑Â∫¶Ë®ìÁ∑¥Êó•ÔºåÈÅ©ÈáèÁ¢≥Ê∞¥ÂåñÂêàÁâ©Ôºå‰∏≠Á≠âËÑÇËÇ™„ÄÅÈ´òËõãÁôΩË≥™„ÄÇ
            * **È´òÁ¢≥Êó•ÔºöÔºö** Âú®È´òÂº∑Â∫¶Ë®ìÁ∑¥Êó•ÊàñË∫´È´îÈúÄË¶ÅË£úÂÖÖÁ≥ñÂéüÊôÇÔºåÊîùÂèñÈ´òÁ¢≥Ê∞¥ÂåñÂêàÁâ©Ôºå‰ΩéËÑÇËÇ™„ÄÅ‰∏≠Á≠âËõãÁôΩË≥™„ÄÇ
            **Ê≥®ÊÑè‰∫ãÈ†ÖÔºö** Á¢≥Ê∞¥ÂåñÂêàÁâ©ÁöÑ‰æÜÊ∫ê‰ª•Ë§áÂêàÁ¢≥Ê∞¥ÂåñÂêàÁâ©ÁÇ∫‰∏ªÔºàÁ≥ôÁ±≥„ÄÅÁáïÈ∫•„ÄÅÂú∞ÁìúÔºâÔºåÈÅøÂÖçÁ≤æÁ∑ªÁ¢≥Ê∞¥„ÄÇ
            **ÁØÑ‰æãÔºö**
            * ÈÄ±‰∏Ä„ÄÅÈÄ±‰∏â„ÄÅÈÄ±‰∫îÔºö‰ΩéÁ¢≥Êó•Ôºà‰ºëÊÅØÊàñËºïÂ∫¶Ë®ìÁ∑¥Ôºâ
            * ÈÄ±‰∫å„ÄÅÈÄ±ÂõõÔºöÈ´òÁ¢≥Êó•ÔºàÈ´òÂº∑Â∫¶Ë®ìÁ∑¥Ôºâ
            * ÈÄ±ÂÖ≠„ÄÅÈÄ±Êó•Ôºö‰∏≠Á¢≥Êó•ÔºàÊ¥ªÂãïÊó•ÊàñÊÅ¢Âæ©Ôºâ
            """,
            "ÂÑ™Èªû": "ÊúâÂä©ÊñºÁáÉÁáíËÑÇËÇ™„ÄÅÁ∂≠ÊåÅËÇåËÇâÈáè„ÄÅÊèê‰æõË®ìÁ∑¥ËÉΩÈáè„ÄÅÈò≤Ê≠¢‰ª£Ë¨ùÈÅ©Êáâ„ÄÇ",
            "Áº∫Èªû": "Âü∑Ë°åË§áÈõúÔºåÈúÄË¶ÅÁ≤æÁ¢∫Ë®àÁÆóÂÆèÈáèÁáüÈ§äÁ¥†„ÄÅ‰∏çÈÅ©ÂêàÊâÄÊúâ‰∫∫„ÄÅÂàùÊúüËºÉÈõ£ÈÅ©Êáâ„ÄÇ",
            "Âª∫Ë≠∞": "ÈúÄÈÖçÂêàÈÅãÂãïË®àÁï´ÔºåÂª∫Ë≠∞Âú®Â∞àÊ•≠‰∫∫Â£´ÊåáÂ∞é‰∏ãÈÄ≤Ë°åÔºåÂ≠∏ÁøíÁ≤æÁ¢∫ËøΩËπ§È£üÁâ©ÊîùÂèñ„ÄÇ"
        },
        "Âäâ‰∫¶Ëè≤Ê∏õËÇ•Ê≥ï": {
            "ÊèèËø∞": "ÊìöÂÇ≥Âäâ‰∫¶Ëè≤Âú®ÊãçÊîù„ÄäËä±Êú®Ëò≠„ÄãÊúüÈñìÊé°Áî®ÁöÑÊ∏õËÇ•ÊñπÊ≥ïÔºåÊ†∏ÂøÉÊòØ**‰ΩéÊ≤π„ÄÅ‰ΩéÈπΩ„ÄÅ‰ΩéÁ≥ñ„ÄÅÈ´òËõãÁôΩ„ÄÅÈ´òÁ∫ñÁ∂≠**Ôºå‰∏¶Âº∑Ë™øÈ£üÁâ©ÂéüÂûã„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ËøΩÊ±ÇÂÅ•Â∫∑„ÄÅÂùáË°°È£≤È£üÁöÑÊ∏õÈáçËÄÖÔºåÊàñÊÉ≥ÊîπÂñÑÈ£≤È£üÁøíÊÖ£ÁöÑ‰∫∫„ÄÇ‰∏çÈÅ©ÂêàÈúÄË¶ÅÂø´ÈÄüÊ∏õÈáçÊàñÊúâÁâπÊÆäÁáüÈ§äÈúÄÊ±ÇÁöÑ‰∫∫„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **ÂéüÂâáÔºö**
                * **‰ΩéÊ≤πÔºö** ÁÉπÈ£™ÊñπÂºè‰ª•Ê∏ÖËí∏„ÄÅÊ∞¥ÁÖÆ„ÄÅÊ∂ºÊãå„ÄÅÁÉ§ÁÇ∫‰∏ª„ÄÇ
                * **‰ΩéÈπΩÔºö** Â∞ëÈπΩÊàñÁÑ°ÈπΩÔºå‰ª•Â§©ÁÑ∂È¶ôÊñôË™øÂë≥„ÄÇ
                * **‰ΩéÁ≥ñÔºö** ÈÅøÂÖçÊâÄÊúâÂê´Á≥ñÈ£≤ÊñôÂíåÁîúÈªûÔºåÈÅ∏ÊìáÂ§©ÁÑ∂ÁîúÂë≥ÔºàÊ∞¥ÊûúÔºâ„ÄÇ
                * **È´òËõãÁôΩÔºö** ÂÖÖË∂≥ÁöÑÈõûËÉ∏ËÇâ„ÄÅÈ≠öËÇâ„ÄÅËõã„ÄÅË±ÜËÖêÁ≠â„ÄÇ
                * **È´òÁ∫ñÁ∂≠Ôºö** Â§ßÈáèËî¨Ëèú„ÄÅÂÖ®Á©ÄÁâ©„ÄÅÊ∞¥Êûú„ÄÇ
            * **È£üÁâ©ÈÅ∏ÊìáÔºö**
                * **‰∏ªÈ£üÔºö** Á≥ôÁ±≥„ÄÅÁéâÁ±≥„ÄÅËóúÈ∫•„ÄÅÂÖ®È∫•È∫µÂåÖ„ÄÇ
                * **ËõãÁôΩË≥™Ôºö** ÈõûËÉ∏ËÇâ„ÄÅÈ≠öËÇâ„ÄÅËù¶„ÄÅËõã„ÄÅË±ÜËÖê„ÄÇ
                * **Ëî¨ËèúÔºö** ÂêÑÁ®ÆÈ°èËâ≤ÁöÑËî¨Ëèú„ÄÇ
                * **Ê∞¥ÊûúÔºöÔºö** Êñ∞ÈÆÆÊ∞¥Êûú„ÄÇ
                * **È£≤ÂìÅÔºö** ÁôΩÈñãÊ∞¥„ÄÅÁÑ°Á≥ñËå∂„ÄÇ
            **‰∏ÄÊó•ËèúÂñÆÁØÑ‰æãÔºö**
            * **Êó©È§êÔºö** Ê∞¥ÁÖÆËõãÂÖ©È°Ü„ÄÅ‰∏ÄÊùØÁÑ°Á≥ñË±ÜÊºø„ÄÅ‰∏ÄÂ∞è‰ªΩÈõúÁ≥ßÈ•ÖÈ†≠„ÄÇ
            * **ÂçàÈ§êÔºöÔºö** Ê∏ÖËí∏È±∏È≠ö„ÄÅÊ∂ºÊãåËä±Ê§∞Ëèú„ÄÅ‰∏ÄÂ∞èÁ¢óÁ≥ôÁ±≥È£Ø„ÄÇ
            * **ÊôöÈ§êÔºö** ÁÉ§ÈõûËÉ∏ËÇâÊ≤ôÊãâÔºà‰∏çÂä†ÈÜ¨Êàñ‰ΩéËÑÇÈÜ¨Ôºâ„ÄÅÁéâÁ±≥ÂçäÊ†π„ÄÇ
            * **ÈªûÂøÉÔºö** ‰∏Ä‰ªΩÊ∞¥Êûú„ÄÇ
            """,
            "ÂÑ™Èªû": "ÂÅ•Â∫∑ÂùáË°°„ÄÅÊúâÁõäÈï∑ÊúüÁ∂≠ÊåÅ„ÄÅÊîπÂñÑÁöÆËÜöÁãÄÊÖã„ÄÅË∫´È´îË≤†ÊìîÂ∞è„ÄÇ",
            "Áº∫Èªû": "ÂèØËÉΩË¶ãÊïàËºÉÊÖ¢„ÄÅÂ∞çÊñºÈáçÂè£Âë≥ÁöÑ‰∫∫‰æÜË™™ÂèØËÉΩÂàùÊúüËºÉÈõ£ÈÅ©Êáâ„ÄÇ",
            "Âª∫Ë≠∞": "Âæ™Â∫èÊº∏ÈÄ≤Ë™øÊï¥È£≤È£üÁøíÊÖ£ÔºåÂ§öÂòóË©¶‰∏çÂêåÁöÑÂÅ•Â∫∑ÁÉπÈ£™ÊñπÂºè„ÄÇ"
        },
        "‰∫îÊó•ËºïÊñ∑È£ü": {
            "ÊèèËø∞": "‰∏ÄÁ®ÆÊµÅË°åÁöÑÈñìÊ≠áÊÄßÊñ∑È£üËÆäÈ´îÔºåÈÄöÂ∏∏ÊåáÊØèÈÄ±Êúâ 5 Â§©Ê≠£Â∏∏È£≤È£üÔºå2 Â§©ÈôêÂà∂ÁÜ±ÈáèÊîùÂèñÔºàÈÄöÂ∏∏ÁÇ∫ 500-600 Â§ßÂç°Ôºâ„ÄÇËëóÂêçÁöÑÊúâ 5:2 Êñ∑È£üÊ≥ï„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÊÉ≥ÂòóË©¶ÈñìÊ≠áÊÄßÊñ∑È£ü„ÄÅËºïÂ∫¶Ê∏õÈáç„ÄÅÊîπÂñÑ‰ª£Ë¨ùÂÅ•Â∫∑„ÄÅÊàñ‰∏çÊÉ≥ÊØèÂ§©Âö¥Ê†ºÊéßÂà∂È£≤È£üËÄÖ„ÄÇ‰∏çÈÅ©ÂêàÂ≠ïÂ©¶„ÄÅÂì∫‰π≥ÊúüÂ©¶Â•≥„ÄÅÁ≥ñÂ∞øÁóÖÊÇ£ËÄÖÔºàÈúÄÂú®ÈÜ´ÁîüÊåáÂ∞é‰∏ãÔºâ„ÄÅÈ´îÈáçÈÅéËºïËÄÖ„ÄÅÈ£≤È£üÂ§±Ë™øËÄÖ„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * ÈÅ∏ÊìáÊØèÈÄ±ÁöÑÈùûÈÄ£Á∫åÁöÑ 2 Â§©‰ΩúÁÇ∫ËºïÊñ∑È£üÊó•„ÄÇ
            * **ËºïÊñ∑È£üÊó•Ôºö** Â•≥ÊÄßÊîùÂèñÁ¥Ñ 500 Â§ßÂç°ÔºåÁî∑ÊÄßÁ¥Ñ 600 Â§ßÂç°„ÄÇÈÄöÂ∏∏ÂàÜÂÖ©È§êÊàñ‰∏âÈ§êÔºå‰ª•È´òËõãÁôΩ„ÄÅÈ´òÁ∫ñÁ∂≠„ÄÅ‰ΩéÁ¢≥Ê∞¥È£üÁâ©ÁÇ∫‰∏ª„ÄÇ
            * **Ê≠£Â∏∏È£≤È£üÊó•Ôºö** ‰øùÊåÅÂÅ•Â∫∑„ÄÅÂùáË°°ÁöÑÈ£≤È£üÔºåÈÅøÂÖçÊö¥È£≤Êö¥È£ü„ÄÇ
            **ËºïÊñ∑È£üÊó•ÁØÑ‰æãËèúÂñÆÔºà500Â§ßÂç°ÔºâÔºö**
            * **Êó©È§êÔºö** ‰∏ÄÈ°ÜÊ∞¥ÁÖÆËõã (70Â§ßÂç°) + ‰∏ÄÊùØÁÑ°Á≥ñÈªëÂíñÂï° (5Â§ßÂç°)„ÄÇ
            * **ÂçàÈ§êÔºö** ÁÉ§ÈõûËÉ∏ËÇâ 100ÂÖã (165Â§ßÂç°) + ÁáôÈùíËèú 150ÂÖã (30Â§ßÂç°)„ÄÇ
            * **ÊôöÈ§êÔºö** ÈÆ™È≠öÁΩêÈ†≠ (Ê∞¥ÁÖÆ) ÂçäÁΩê (80Â§ßÂç°) + Â∞èÈªÉÁìú‰∏ÄÊ†π (15Â§ßÂç°) + ‰∏ÄÂ∞èÁ¢óËî¨ËèúÊπØ (50Â§ßÂç°)„ÄÇ
            """,
            "ÂÑ™Èªû": "Ê∏õÈáçÊïàÊûúÈ°ØËëó„ÄÅÊîπÂñÑËÉ∞Â≥∂Á¥†ÊïèÊÑüÂ∫¶„ÄÅÊúâÂä©ÊñºÁ¥∞ËÉû‰øÆÂæ©„ÄÅÁõ∏Â∞çÈùàÊ¥ª„ÄÇ",
            "Áº∫Èªû": "Êñ∑È£üÊó•ÂèØËÉΩÊÑüÂà∞È£¢È§ì„ÄÅÁ≤æÂäõ‰∏çË∂≥„ÄÅÂàùÊúüËºÉÈõ£ÈÅ©Êáâ„ÄÇ",
            "Âª∫Ë≠∞": "Êñ∑È£üÊó•Á¢∫‰øùÊîùÂèñË∂≥Â§†Ê∞¥ÂàÜÔºå‰∏¶ÈÅ∏ÊìáËÉΩÊèê‰æõÈ£ΩË∂≥ÊÑüÁöÑËõãÁôΩË≥™ÂíåÁ∫ñÁ∂≠„ÄÇÈùûÊñ∑È£üÊó•‰øùÊåÅÂÅ•Â∫∑È£≤È£ü„ÄÇ"
        },
        "‰æøÂà©ÂïÜÂ∫óÊ∏õËÇ•ËèúÂñÆÂïÜÂìÅ": {
            "ÊèèËø∞": "Âà©Áî®‰æøÂà©ÂïÜÂ∫óÁèæÊúâÂïÜÂìÅÊê≠ÈÖçÂá∫ÁöÑÊ∏õËÇ•ËèúÂñÆÔºåÊñπ‰æøÂø´Êç∑ÔºåÈÅ©ÂêàÂøôÁ¢åÁöÑ‰∏äÁè≠ÊóèÊàñÂ§ñÈ£üÊóè„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "ÂøôÁ¢å„ÄÅÁ∂ìÂ∏∏Â§ñÈ£ü„ÄÅÊ≤íÊúâÊôÇÈñìËá™Â∑±Ê∫ñÂÇô‰∏âÈ§êÁöÑÊ∏õÈáçËÄÖ„ÄÇ",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **ÈÅ∏ÊìáÂéüÂâáÔºö**
                * **È´òËõãÁôΩÔºö** Ëå∂ËëâËõã„ÄÅÈõûËÉ∏ËÇâ„ÄÅÁÑ°Á≥ñË±ÜÊºø„ÄÅÁâõÂ•∂„ÄÅÂÑ™Ê†º„ÄÇ
                * **È´òÁ∫ñÁ∂≠Ôºö** Ê≤ôÊãâÔºàÈÜ¨ÊñôÂàÜÈñãÊàñÈÅ∏ÂíåÈ¢®/Ê≤πÈÜãÔºâ„ÄÅÁéâÁ±≥„ÄÅÂú∞Áìú„ÄÅÊ∞¥Êûú„ÄÇ
                * **‰ΩéÁ≤æÁ∑ªÁ¢≥Ê∞¥Ôºö** ÈÅ∏ÊìáÁ≥ôÁ±≥È£ØÁ≥∞„ÄÅÂæ°È£ØÁ≥∞ÔºàÈÅøÈñãÊ≤πÁÇ∏È§°ÊñôÔºâ„ÄÇ
                * **ÂÅ•Â∫∑ËÑÇËÇ™ÔºöÔºö** Â†ÖÊûúÔºàÈÅ©ÈáèÔºâ„ÄÇ
                * **È£≤ÂìÅÔºö** ÁÑ°Á≥ñËå∂„ÄÅÈªëÂíñÂï°„ÄÅÊ∞¥„ÄÇ
            **‰∏ÄÊó•ËèúÂñÆÁØÑ‰æãÔºö**
            * **Êó©È§êÔºö** Ëå∂ËëâËõãÂÖ©È°Ü + ÁÑ°Á≥ñË±ÜÊºø‰∏ÄÊùØ + Âæ°È£ØÁ≥∞ÔºàÈÆ™È≠öÊàñËÇâÈ¨ÜÔºåÈùûÊ≤πÁÇ∏Ôºâ„ÄÇ
            * **ÂçàÈ§êÔºö** Áæ©ÂºèÈõûËÉ∏ËÇâÊ≤ôÊãâÔºàÈÜ¨ÊñôÊ∏õÂçäÊàñ‰∏çÂä†Ôºâ+ ÁÉ§Âú∞Áìú„ÄÇ
            * **ÊôöÈ§êÔºö** ÈóúÊù±ÁÖÆÔºàÈÅ∏ÊìáÊ∏ÖÊπØ„ÄÅÁÑ°Âä†Â∑•ÁÅ´ÈçãÊñô„ÄÅËî¨Ëèú„ÄÅË±ÜËÖêÔºâ+ ‰∏ÄÈ°ÜÊ∞¥ÁÖÆËõã„ÄÇ
            * **ÈªûÂøÉÔºö** Ê∞¥ÊûúÔºàËòãÊûúÊàñÈ¶ôËïâÔºâÊàñÁÑ°Á≥ñÂÑ™Ê†º„ÄÇ
            """,
            "ÂÑ™Èªû": "Êñπ‰æø„ÄÅÁúÅÊôÇ„ÄÅÊòìÊñºÂü∑Ë°å„ÄÅÈÅ∏ÊìáÂ§öÊ®£„ÄÇ",
            "Áº∫Èªû": "ÂèØËÉΩËºÉÈõ£Á≤æÁ¢∫ÊéßÂà∂ÁÜ±ÈáèÂíåÁáüÈ§äÁ¥†„ÄÅÂä†Â∑•È£üÂìÅËºÉÂ§ö„ÄÅÈÉ®ÂàÜÂïÜÂìÅÈàâÂê´ÈáèÂèØËÉΩËºÉÈ´ò„ÄÇ",
            "Âª∫Ë≠∞": "‰ªîÁ¥∞Èñ±ËÆÄÁáüÈ§äÊ®ôÁ§∫ÔºåÈÅ∏Êìá‰ΩéÂä†Â∑•„ÄÅ‰ΩéÁ≥ñ„ÄÅ‰ΩéÈàâÁöÑÁî¢ÂìÅÔºõÈÜ¨ÊñôÁç®Á´ãÂåÖË£ùÁöÑÁõ°ÈáèÊ∏õÂ∞ë‰ΩøÁî®„ÄÇ"
        },
        "Ëóù‰∫∫Ê∏õËÇ•ËèúÂñÆ": {
            "ÊèèËø∞": "ËíêÈõÜÊï¥ÁêÜÈÉ®ÂàÜËóù‰∫∫ÂÖ¨ÈñãÂàÜ‰∫´ÁöÑÊ∏õËÇ•È£≤È£üÁ≠ñÁï•„ÄÇÈÄô‰∫õËèúÂñÆÈÄöÂ∏∏ÈùûÂ∏∏Âö¥Ê†ºÔºåÁõÆÊ®ôÊòØÂø´ÈÄüÈÅîÂà∞ÁâπÂÆöÈ´îÊÖã„ÄÇ",
            "ÈÅ©Âêà‰∫∫Áæ§": "‰∫ÜËß£Ëá™Ë∫´È´îË≥™„ÄÅÊúâÂº∑Â§ßËá™ÂæãÊÄß„ÄÅ‰∏¶Âú®Â∞àÊ•≠‰∫∫Â£´ÔºàÈÜ´Áîü„ÄÅÁáüÈ§äÂ∏´ÔºâÊåáÂ∞é‰∏ãÈÄ≤Ë°åÁü≠ÊúüÁõÆÊ®ôÊ∏õÈáçÁöÑ‰∫∫„ÄÇ**‰∏çÂª∫Ë≠∞Èï∑ÊúüÂü∑Ë°åÔºå‰∏îÂèØËÉΩ‰∏çÈÅ©Âêà‰∏ÄËà¨Â§ßÁúæ„ÄÇ**",
            "Â¶Ç‰ΩïÂØ¶ÊñΩ": """
            * **ÁØÑ‰æãÔºàÊüêËóù‰∫∫Ê∏õËÇ•ËèúÂñÆÔºåÂÉÖ‰æõÂèÉËÄÉÔºåÂØ¶ÈöõË´ãÂãøÁõ≤ÁõÆÊ®°‰ªøÔºâÔºö**
                * **Êó©È§êÔºö** ‰∏ÄÈ°ÜÊ∞¥ÁÖÆËõã„ÄÅ‰∏ÄÊùØÁÑ°Á≥ñÈªëÂíñÂï°„ÄÅÂçäÁâáÂÖ®È∫•È∫µÂåÖ„ÄÇ
                * **ÂçàÈ§êÔºö** Â∞ëÈáèÊ∞¥ÁÖÆÈõûËÉ∏ËÇâ„ÄÅ‰∏ÄÂ§ßÁõ§Ê∏ÖÁáôËî¨Ëèú„ÄÇ
                * **ÊôöÈ§êÔºö** ‰∏ÄÂ∞è‰ªΩÈ≠öËÇâ„ÄÅÁ∂†ËëâËî¨ËèúÊ≤ôÊãâÔºàÁÑ°ÈÜ¨Ôºâ„ÄÇ
                * **È£≤ÂìÅÔºö** Â§ßÈáèÁôΩÈñãÊ∞¥„ÄÇ
            * **ÂÖ±ÂêåÁâπÈªûÔºö**
                * Ê•µ‰ΩéÁöÑÁÜ±ÈáèÊîùÂèñ„ÄÇ
                * È´òËõãÁôΩË≥™Ôºå‰ª•Èò≤ËÇåËÇâÊµÅÂ§±„ÄÇ
                * Ê•µ‰ΩéÁöÑÁ¢≥Ê∞¥ÂåñÂêàÁâ©ÂíåËÑÇËÇ™„ÄÇ
                * Âπæ‰πéÁÑ°Âä†Â∑•È£üÂìÅ„ÄÅÁÑ°Ë™øÂë≥„ÄÇ
                * ÈÄöÂ∏∏ÊúÉÈÖçÂêàÈ´òÂº∑Â∫¶ÈÅãÂãï„ÄÇ
            """,
            "ÂÑ™Èªû": "Áü≠ÊúüÂÖßË¶ãÊïàÂø´„ÄÇ",
            "Áº∫Èªû": "Ê•µÁ´Ø„ÄÅÈõ£‰ª•ÊåÅÁ∫å„ÄÅÂÆπÊòìÂèçÂΩà„ÄÅÂèØËÉΩÈÄ†ÊàêÁáüÈ§ä‰∏çËâØ„ÄÅÂ∞çË∫´È´îÂÅ•Â∫∑ÊúâÊΩõÂú®È¢®Èö™„ÄÇ**Âº∑ÁÉà‰∏çÂª∫Ë≠∞Âú®ÁÑ°Â∞àÊ•≠‰∫∫Â£´ÊåáÂ∞é‰∏ãÂòóË©¶„ÄÇ**",
            "Âª∫Ë≠∞": "Ëóù‰∫∫Ê∏õËÇ•ËèúÂñÆÈÄöÂ∏∏ÊòØÁÇ∫‰∫ÜÊáâÂ∞çÁâπÂÆöÁöÑÂ∑•‰ΩúÈúÄÊ±ÇÔºå‰∏¶ÊúâÂ∞àÊ•≠ÂúòÈöäÊåáÂ∞é„ÄÇË´ãÂãøÁõ≤ÁõÆË∑üÈö®ÔºåÊáâ‰ª•Ëá™Ë∫´ÂÅ•Â∫∑ÁÇ∫ÈáçÔºåÈÅ∏ÊìáÂùáË°°„ÄÅÂèØÊåÅÁ∫åÁöÑÈ£≤È£üÊñπÂºè„ÄÇÂ¶ÇÊúâÊ∏õÈáçÈúÄÊ±ÇÔºåÂãôÂøÖË´ÆË©¢ÈÜ´ÁîüÊàñÁáüÈ§äÂ∏´„ÄÇ"
        }
    }

    # Using Streamlit expanders to make the content collapsible, keeping the layout clean and cute.
    # Each diet plan information is wrapped in a custom styled div for consistent look
    st.markdown("---")
    st.markdown(f"<div class='diet-plan-card'>", unsafe_allow_html=True) # Start of custom card
    st.markdown(f"<h4>ÈóúÊñº {diet_type}</h4>", unsafe_allow_html=True) # Title for the specific diet type

    info = diet_info.get(diet_type, {"ÊèèËø∞": "ÁÑ°Áõ∏ÈóúË≥áË®ä„ÄÇ", "ÈÅ©Âêà‰∫∫Áæ§": "", "Â¶Ç‰ΩïÂØ¶ÊñΩ": "", "ÂÑ™Èªû": "", "Áº∫Èªû": "", "Âª∫Ë≠∞": ""})
    
    with st.expander(f"‚ú® **ÊèèËø∞ËàáÈÅ©Âêà‰∫∫Áæ§**", expanded=True):
        st.markdown(f"**ÊèèËø∞Ôºö** {info['ÊèèËø∞']}")
        st.markdown(f"**ÈÅ©Âêà‰∫∫Áæ§Ôºö** {info['ÈÅ©Âêà‰∫∫Áæ§']}")

    with st.expander(f"üçΩÔ∏è **Â¶Ç‰ΩïÂØ¶ÊñΩ (ËèúÂñÆÁØÑ‰æã)**"):
        st.markdown(info['Â¶Ç‰ΩïÂØ¶ÊñΩ'])

    with st.expander(f"üìà **ÂÑ™Áº∫ÈªûËàáÂª∫Ë≠∞**"):
        st.markdown(f"**ÂÑ™ÈªûÔºö** {info['ÂÑ™Èªû']}")
        st.markdown(f"**Áº∫ÈªûÔºö** {info['Áº∫Èªû']}")
        st.markdown(f"**Âª∫Ë≠∞Ôºö** {info['Âª∫Ë≠∞']}")
    
    st.markdown("</div>", unsafe_allow_html=True) # End of custom card

    st.markdown("---")
    st.info("**ÂÖçË≤¨ËÅ≤ÊòéÔºö** ÈÄôË£°Êèê‰æõÁöÑÈ£≤È£üË≥áË®äÂÉÖ‰æõÂèÉËÄÉÔºå‰∏çÊáâÊõø‰ª£Â∞àÊ•≠ÈÜ´ÁôÇÊàñÁáüÈ§äÂª∫Ë≠∞„ÄÇÂú®ÈñãÂßã‰ªª‰ΩïÊñ∞ÁöÑÈ£≤È£üË®àÁï´ÂâçÔºåË´ãÂãôÂøÖË´ÆË©¢ÊÇ®ÁöÑÈÜ´ÁîüÊàñË®ªÂÜäÁáüÈ§äÂ∏´„ÄÇ")

    # Â∞á„ÄåÂõûÂà∞È†ÇÈÉ®„ÄçÊåâÈàïÁΩÆ‰∏≠Ôºå‰∏¶‰ΩøÁî®Êñ∞ÁöÑÊ®£ÂºèÔºåÊåáÂêë app_top
    st.markdown("<div style='text-align: center;'><a href='#app_top' class='scroll-to-top-btn'><span class='emoji'>‚¨ÜÔ∏è</span> ÂõûÂà∞È†ÇÈÉ®</a></div>", unsafe_allow_html=True)


# --- ‰∏ªÊáâÁî®Á®ãÂºèÈÇèËºØ ---
# ÊáâÁî®Á®ãÂºèÊ®ôÈ°å„ÄÅLOGO Âíå Slogan
st.markdown(
    f"""
    <div style='display: flex; align-items: center; margin-bottom: 5px;'>
        <img src='data:image/png;base64,{logo_base64}' class='logo-img' width='60' style='margin-right: 15px;'>
        <h1 style='color: #d81b60; margin: 0; font-family: "Comic Sans MS", "Arial Rounded MT Bold", sans-serif;'>ÂÅ•Â∫∑Êó•Ë®ò Health Diary</h1>
    </div>
    """,
    unsafe_allow_html=True
)
# Ê≠°ËøéË™ûÂíåÂÅ•Â∫∑Â∞èË™ûÁèæÂú®Áî± home_page ÂáΩÊï∏ËôïÁêÜÔºåÈÄôË£°‰∏çÈúÄË¶ÅÈáçË§áÈ°ØÁ§∫
st.markdown("---") # ‰øùÊåÅÂàÜÈöîÁ∑ö

# Êñ∞ÁöÑÂ∞éË¶ΩÊñπÂºèÔºö‰ΩøÁî® st.radio Ê®°Êì¨ÂàÜÈ†Å
page_names = ["üè† È¶ñÈ†Å", "‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ", "üìä Êï∏ÊìöÂàÜÊûê", "üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ", "‚öôÔ∏è Ë®≠ÂÆö", "ü§ñ Â∞èÂπ´Êâã"]

# ÂàùÂßãÂåñ current_page_indexÔºåÁ¢∫‰øùÂÆÉÂßãÁµÇÊòØÊúâÊïàÁöÑÁ¥¢Âºï
if 'current_page_index' not in st.session_state:
    st.session_state.current_page_index = 0 # È†êË®≠ÁÇ∫È¶ñÈ†Å
elif not (0 <= st.session_state.current_page_index < len(page_names)):
    # Â¶ÇÊûú current_page_index Ë∂ÖÂá∫ÁØÑÂúçÔºåÈáçÁΩÆÁÇ∫ 0
    st.session_state.current_page_index = 0

# st.radio ÁöÑ index ÂèÉÊï∏Áõ¥Êé•‰ΩøÁî® session state ‰∏≠ÁöÑÁ¥¢Âºï
# ÁÇ∫‰∫ÜÈö±Ëóè "Â∞éË¶Ω" Â≠ó‰∏≤ÔºåÈÄôË£°Â∞á label Ë®≠ÁÇ∫Á©∫Â≠ó‰∏≤Ôºå‰∏¶‰ΩøÁî® CSS Èö±ËóèÈ†êË®≠ÁöÑ label
selected_page_index_from_radio = st.radio(
    "È†ÅÈù¢Â∞éË¶Ω", # <-- Â∞áÈÄôË£°ÁöÑÁ©∫Â≠ó‰∏≤ÊõøÊèõÁÇ∫ÊÇ®ÊÉ≥Ë¶ÅÁöÑÂ∞éË¶ΩÊñáÂ≠ó
    options=page_names,
    index=st.session_state.current_page_index,
    horizontal=True,
    key="main_navigation_radio"
)

# Ê†πÊìöÁî®Êà∂Âú® radio button ‰∏äÁöÑÈÅ∏ÊìáÔºåÊõ¥Êñ∞ session state ÁöÑÁ¥¢Âºï
# ÈÄôÁ¢∫‰øù‰∫ÜÁï∂Áî®Êà∂ÈªûÊìäÂ∞éË¶ΩÊåâÈàïÊôÇÔºåcurrent_page_index ÊúÉË¢´Ê≠£Á¢∫Êõ¥Êñ∞
st.session_state.current_page_index = page_names.index(selected_page_index_from_radio)


# Ê†πÊìöÈÅ∏ÊìáÁöÑÈ†ÅÈù¢Á¥¢ÂºïÂëºÂè´Â∞çÊáâÁöÑÂáΩÊï∏
if st.session_state.current_page_index == page_names.index("üè† È¶ñÈ†Å"):
    home_page(st.session_state.df_history)
elif st.session_state.current_page_index == page_names.index("‚úçÔ∏è Êñ∞Â¢ûÁ¥ÄÈåÑ"):
    add_record_page()
elif st.session_state.current_page_index == page_names.index("üìä Êï∏ÊìöÂàÜÊûê"):
    data_analysis_page(st.session_state.df_history)
elif st.session_state.current_page_index == page_names.index("üóÇ Ê≠∑Âè≤Á¥ÄÈåÑ"):
    history_page(st.session_state.df_history)
elif st.session_state.current_page_index == page_names.index("‚öôÔ∏è Ë®≠ÂÆö"):
    settings_page()
elif st.session_state.current_page_index == page_names.index("ü§ñ Â∞èÂπ´Êâã"):
    assistant_page()

# È†ÅÂ∞æÊèíÂúñ (Â∑≤ÂåÖÂê´Âú® CSS ‰∏≠ÈÄ≤Ë°åÂ±Ö‰∏≠)
if footer_image_base64:
    st.markdown(
        f"""
        <div class='footer-image-container'>
            <img src='data:image/png;base64,{footer_image_base64}' width='200'>
        </div>
        """,
        unsafe_allow_html=True
    )
